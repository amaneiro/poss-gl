Primeiros pasos

O modelo clásico de como comezan os proxectos de software libre foi proposto por Eric Raymond, nun artigo xa famoso sobre procesos no software libre titulado <citetitle>A catedral e o bazar<citetitle>. Raymond escribiu:

Todos os bos proxectos de software inícianse para resolver un problema concreto dun desenvolvedor.

(de <emphasis role="bold"><ulink url="http://www.catb.org/~esr/writings/cathedral-bazaar/"></ulink> </emphasis>)

Raymond non está dicindo que os proxectos de software libre unicamente xurdan cando un desenvolvedor ten un problema. Máis ben, está dicindo que os <emphasis>bos</emphasis> programas son resultado de que un programador teña un interese persoal en ver o problema resolto; porén, resolver un problema persoal é a motivación máis frecuente dos proxectos de software libre.

Aínda que esta segue sendo a razón máis habitual para a creación de moitos proxectos de software libre, é menos agora do que era en 1997, cando Raymond escribiu esas palabras. Hoxe en día, temos o fenómeno de organizacións &mdash;incluíndo as organizacións con ánimo de lucro&mdash; que inician grandes proxectos de software libre desde cero. O programador solitario, dixitando algún código para resolver un problema persoal para decatarse máis tarde de que o seu traballo ten unha aplicación máis ampla, é aínda a fonte da maior parte do software libre de nova factura, mais non a única.

Contodo, o argumento de Raymond é perspicaz. A condición esencial é que os produtores do software teñan interese directo no seu éxito, xa que eles mesmos o utilizan. Se o programa non se comporta como debería, a persoa ou organización que o levan a cabo sentirá insatisfacción no seu día a día. Por exemplo, o proxecto OpenAdapter (<ulink url="http://www.openadapter.org/"></ulink>), que foi iniciado polo banco de investimentos Dresdner Kleinwort Wasserstein como unha ferramenta de traballo de software libre para integrar sistemas de información financeira dispares, é pouco probable que resolva a necesidade persoal dun desenvolvedor. Máis ben resolve a dunha institución. En particular, este problema xorde da experiencia da institución e dos seus socios, por tanto, se o programa non resolver o problema, eles o sufrirán. Esta situación provoca que se produza bo software, xa que a retroalimentación flúe na dirección correcta. O software non está sendo escrito para venderllo a un terceiro, senón para resolver as <emphasis>propias</emphasis> necesidades, e posteriormente é compartido con todo o mundo, como se o problema fose unha doenza e o software o medicamento, que debe ser distribuído para erradicar a pandemia.

Este capítulo versa sobre como presentar ao mundo un novo proxecto de software libre, mais moitas das súas recomendacións seríanlle familiares a unha organización sanitaria que distribúa medicamentos. Os obxectivos son moi similares: desexas deixar claro o que fai o medicamento, facelo chegar ás mans da xente que o necesita e asegurarte de que eses que o reciben saben como usalo. Pero co software,  desexas ademais atraer algúns dos receptores para que se sumen ao actual esforzo de investigación para mellorar o medicamento.

A distribución de software libre é unha tarefa a dúas bandas: o software precisa de usuarios e de desenvolvedores. Estas necesidades non están necesariamente en conflito, mais engaden algunha complexidade á presentación inicial do proxecto. Algunha información é útil para ambas audiencias, outra unicamente para unha delas. Toda esa información debería seguir o principio de presentación escalada: o grao de detalle presentado en cada etapa debe ser proporcional á cantidade de tempo e esforzo empregado polo lector. Máis esforzo debería acarretar unha recompensa maior. Cando non se equilibran ambos, as persoas poden perder rapidamente a fe e o impulso.

O corolario disto é que <emphasis>as apariencias importan</emphasis>. Habitualmente, os desenvolvedores non desexan crer nisto. O seu amor pola substancia sobre a forma é case un punto de orgullo profesional. Non é casualidade que tantos programadores amosen unha antipatía pola publicidade e as relacións públicas, nin que os deseñadores gráficos profesionais se horroricen co que os programadores propoñen.

Isto é unha mágoa, xa que existen situacións onde a forma <emphasis>é</emphasis> a substancia, e a presentación do proxecto é unha delas. Por exemplo, a primeira cousa que unha persoa descobre sobre un proxecto é a apariencia da súa páxina web. Esta información é absorvida antes que calquera outro contido &mdash; antes de ler un texto ou premer unha ligazón. Aínda que poida parecer inxusto, a xente non pode evitar facerse unha primeira impresión. A apariencia da web sinala se se dedicou tempo e esforzo á organización da presentación do proxecto. Os seres humanos temos unha antena extremadamente sensible para detectar o esforzo dedicado. Moitos de nós podemos decir tras unha única ollada se un sitio web foi publicado rapidamente ou se foi pensado con mimo. Ésta é a primeira peza de información que o proxecto mostra, e, por asociación, a impresión que crea será traspasada ao resto do proxecto.

Así, aínda que a maioría deste capítulo fala sobre o contido co que se debería iniciar o teu proxecto, recorda que a súa apariencia tamén importa. Debido a que a páxina web ten que abranguer dous tipos de visitantes distintos &dash; usuarios e desenvolvedores &dash; debe ser posta especial atención na claridade e concisión. Aínda que este non é lugar para un tratado xeral sobre deseño web, existe un principio o suficientemente importante como para prestarlle atención, particularmente cando a web informa a múltiples (é dicir, solapadas) audiencias: a xente debería ter unha vaga idea de a onde conduce unha ligazón antes de premela. Por exemplo, <emphasis>con só ver a ligazón</emphasis> á documentación de usuario ten que ficar claro que esta nos leva á documentación de usuario e non, por exemplo, á de desenvolvedor. Xerir un proxecto baséase parcialmente en suministrar información, pero tamén consiste en ofrecer comodidade. A mera presencia de estándares, nos lugares esperados, tranquiliza a usuarios e desenvolvedores que están decidindo se involucrarse ou non no proxecto. Comunica que o proxecto actúa como un todo, que anticipou as cuestións que a xente preguntará e respondeunas de maneira que o visitante teña que facer o mínimo esforzo. Dando esta sensación de preparación, o proxecto envía a seguinte mensaxe: "O teu tempo non será esbanxado se participas", que xustamente é a mensaxe que a xente precisa escoitar.

Antes de nada, bota unha ollada ao redor

Antes de comezar un proxecto de software libre, hai unha advertencia importante:

Olla sempre ao redor para ver se existe un proxecto que fai o que desexas. Son grandes as posibilidades de que calquera problema que desexas resolver, xa o tivese que resolver algún outro anteriormente. Se o fixeron e publicaron o código baixo unha licenza libre, non hai razón ningunha para reinventares a roda. Por suposto que hai excepcións: se desexas iniciar un proxecto como unha experiencia educativa, o código existente non é de axuda; ou se o proxecto que tes en mente é tan especializado que sabes que non existe a posibilidade de que alguén o teña feito xa. Mais, en xeral, non hai excusa para non investigares e a recompensa pode ser grande. Se as ferramentas de procura habituais de internet non mostran nada, trata de procurar en <ulink url="http://freshmeat.net/"></ulink> (unha web sobre noticias de proxectos de software libre, sobre o cal se falará máis tarde), en<ulink url="http://www.sourceforge.net/"></ulink> e no directorio de proxectos de software libre da Free Software Foundation <ulink url="http://directory.fsf.org/"></ulink>.

Mesmo se non atopares exactamente o que estás a procurar, podes atopar algo tan semellante que ten máis sentido unirse a ese proxecto e engadir a funcionalidade desexada que comezares un novo pola túa conta.

Comeza co que tiveres

Investigaches sen atopares nada que encaixe coas túas necesidades e decidiches comezar un novo proxecto.

E agora que?

O máis complexo sobre lanzar un proxecto de software libre é transformar unha visión privada nunha pública. Ti ou a túa organización podedes coñecer perfectamente o que desexades, mais expresar ese obxectivo dunha maneira comprensible ao mundo é complexo. Porén, é esencial que tomes tempo para facelo. Ti e os outros fundadores debedes decidir a temática real do proxecto &dash; é dicir, decidir as súas limitacións, o que vai e o que <emphasis>non</emphasis> vai facer&mdash; así como redixirdes unha declaración de intencións. Esta parte non adoita ser moi complexa e algunhas veces pode revelar asuncións implícitas e mesmo disconformidades sobre a propia natureza do proxecto, o que é positivo: é mellor resolvelas agora que máis tarde. O seguinte paso é empaquetardes o proxecto para o público, o que é un traballo pesado.

O que o torna tan laborioso é que principalmente consiste en organizar e documentar o que xa todo o mundo sabe &mdash; "todo o mundo", é dicir, todos aqueles que teñen participado no proxecto ata agora. Entón, para a xente que fai o traballo non hai beneficio directo por realizar esta tarefa. Eles non precisan un ficheiro chamado <filename>README</filename> que resuma o proxecto, nin un documento de deseño ou un manual de usuario. Non precisan unha árbore de código meticulosamente ordeada conforme a estándares de distribución de código fonte informais mais ampliamente difundidos. Sexa como for a maneira en que o código fonte estiver organizado, estará ben para eles, xa que están afeitos a el, e se o código funciona, saben como usalo. Nin sequera importa se as asuncións fundamentais da arquitectura do proxecto están sen documentar; tamén están familiarizados con iso.

Por outra banda, os recén chegados precisan esas cousas. Afortunadamente, non as precisan todas á vez. Non é necesario proporcionar todos os recursos posibles antes de facer un proxecto público. Talvez nun mundo perfecto, cada novo proxecto de software libre comezaría a súa vida cun exhaustivo documento de deseño, un manual de usuario completo (con marcas especiais para funcionalidades ideadas mas aínda sen implementar), código bonito e portable, capaz de ser executado en calquera plataforma, etc. En verdade, preocuparse de todos eses flocos consumiría demasiado tempo e, de calquera forma, é traballo que un pode confiar en que fagan os voluntarios unha vez o proxecto esté en marcha.

Porén, o que <emphasis>si</emphasis> é necesario, é investirmos suficiente esforzo na presentación do proxecto, de modo que os recén chegados poidan superar a barreira inicial ao non estaren familiarizados co proxecto. Considérao como o primeiro paso dun proceso de arranque encamiñado a diminuír a enerxía de activación do proxecto. A este umbral soe chamárselle <firstterm>enerxía de hacktivación</firsterm>: a cantidade de enerxía que debe aportar un recén chegado antes de recibir algo a cambio. Canto menor sexa o punto de hacktivación, mellor. A primera tarefa é baixar este umbral ata un nivel que anime a xente a participaren.

Cada unha das seguintes subseccións describe un aspecto importante á hora de comezar un novo proxecto. Son presentadas aproximadamente na orde na que un novo visitante as atoparía, aínda que a orde en que sexan implementadas pode ser diferente. Poden ser entendidas como unha lista de tarefas. Cando se inicia un proxecto, é preciso revisar a lista e asegurarse de que cada unha das partes foron tidas en conta, ou que as potenciais consecuencias de deixar algunha sen realizar son asumibles.

Escolle un bo nome

Ponte no lugar de alguén que acaba de atopar o proxecto, talvez porque se atopou casualmente con el mentres procuraba software para resolver algún problema. A primeira cousa que vai ver é o nome.

Un bo nome vai tornar o proxecto nun suceso de maneira automática, e un mal nome non o vai condenar ao fracaso &mdash; ben, un nome <emphasis>verdadeiramente<emphasis> malo podería facelo, mais asumiremos que ninguén trata de sabotar o seu proxecto. Porén, un mal nome pode atrasar a adopción, ben porque a xente non o toma en serio, ben porque simplemente lle custe lembralo.

Un bo nome:

Dá certa idea do que fai o proxecto, ou está polo menos relacionado dunha maneira obvia, tal que, se se ten oído o nome e se sabe o que fai o proxecto, o nome será lembrado rapidamente.

É sinxelo de lembrar. Non se pode obviar o feito de que o inglés se convertiu no idioma franco da internet: "sinxelo de lembrar" quere dicir "sinxelo de lembrar para alguén que saiba inglés". Os nomes que son xogos de palabras dependentes da pronunciación do falante, por exemplo, serán opacos para moitos lectores non nativos. Se o xogo de palabras é particularmente rechamante e memorable, pode pagar a pena; unicamente é preciso ter en mente que moita xente que le o nome non o vai percibir da mesma maneira que un nativo.

Non ten o mesmo nome que outro proxecto existente e non infrinxe ningunha marca comercial. É unha cuestión de educación e de cumprir a lei. Non se desexa crear confusión a respecto da marca. Xa é suficientemente complexo manterse ao día de todo o que está dispoñible na rede, sen necesidade de que proxectos distintos teñan o mesmo nome.

Os recursos mencionados anteriormente <xref linkend="look-around"/> son útiles para saber se outro proxecto xa posúe o nome no que se está pensando. É posible consultar ferramentas de procura gratuitas de marcas rexistradas en <ulink url="http://www.nameprotect.org/"></ulink> e <ulink url="http://www.uspto.gov/"></ulink>.

Se for posible,que estea dispoñible como un nome de dominio nos dominios de primeiro nivel <systemitem>.com</systemitem>, <systemitem>.net</systemitem> e <systemitem>.org</systemitem>. Probablemente se debería escoller o <systemitem>.org</systemitem> para promocionalo como o sitio principal do proxecto; os outros dous deberían redirixidir a este, son útiles unicamente para evitar que terceiras partes creen unha confusión da marca sobre o nome do proxecto. Mesmo se se ten a intención de aloxar o proxecto nalgún outro lugar (ver <xref linkend="starting-with-canned-hosting"/>), é posible rexistrar os dominios e redirixilos ao lugar onde o proxecto está aloxado. É de utilidade para os usuarios ter que recordar unicamente unha URL sinxela.

Ten unha clara declaración de intencións

Unha vez que se atopa a web do proxecto, o seguinte que a xente fai é procurar unha descrición rápida, unha declaración de intencións para poderen decidir (en menos de 30 segundos) se están interesados ou non en saber máis. Esta debe ser colocada nun lugar prioritario da portada, preferiblemente xusto debaixo do nome do proxecto.

A declaración de intencións debe ser concreta, restritiva e, sobre todo, curta. Un bo exemplo é a de <ulink url="http://www.openoffice.org/"></ulink>:

Crear, en comunidade, a ferramenta ofimática lider a nivel internacional, que funcione nas principais plataformas proporcionando acceso a toda funcionalidade e datos a través de API's baseadas en compoñentes abertos e un formato de ficheiros baseado en XML.

En poucas palabras, tocaron os puntos relevantes, explicando a misión tendo en conta os coñecementos previos do lector. Ao diciren "<emphasis>en comunidade</emphasis>", sinalan que ningunha corporación dominará o desenvolvemento; "<emphasis>internacional</emphasis>" significa que o programa estará dispoñible en diversas linguas e codificacións; "<emphasis>nas principais plataformas</emphasis>" quere dicir que funcionará en UNIX, Macintosh e Windows. O resto comunica que as interfaces abertas e os formatos de arquivo facilmente lexibles son un aspecto importante dos obxectivos. De boas a primeiras non din que están tratando de ser unha alternativa libre a Microsoft Office, pero a maioría da xente pode ler entre liñas. Aínda que esta declaración de intencións pode parecer ampla a primeira vista, a verdade é que está bastante circunscrita: as palabras "<emphasis>ferramenta ofimática</emphasis>" indican algo moi concreto a todos aqueles familiarizados con este tipo de programas. Asumir os coñecementos previos do lector (neste caso probablemente de MS Office) permite obter unha declaración de intencións concisa.

A natureza da declaración de intencións depende parcialmente de quen a escriba, non só do programa que intenta describir. Por exemplo, ten sentido que OpenOffice.org empregue as palabras "<emphasis>en comunidade</emphasis>" xa que o proxecto foi iniciado, e aínda é fortemente patrocinado, por Sun Microsystems. Incluíndo esas palabras, Sun amosa unha certa sensibilidade cara a aqueles que poden pensar que tentará controlar o proceso de desenvolvemento. Con esta clase de cousas, amosando preocupación por problemas <emphasis>potenciais</emphasis>, avánzase moito no camiño de evitar o problema por completo. Por outra banda, os proxectos que non están patrocinados por unha única corporación probablemente non necesiten tal linguaxe; despois de todo, o desenvolvemento feito pola comunidade é a norma, co cal non existiría razón algunha para listalo como parte dos obxectivos.

Declara que o proxecto é libre

Aqueles que seguiren interesados logo de ler a declaración de intencións, desexarán coñecer máis detalles, talvez a documentación de usuario ou a de desenvolvedor, mesmo poden desexar descarregarlo. Mais antes de todo iso, necesitarán saber o que é software libre.

<emphasis>A portada debe deixar claro, sen ambigüidades, que o proxecto é software libre.</emphasis> Aínda que poida parecer obvio, é sorprendente cantos proxectos olvidan este aspecto. Existen webs de proxectos de software libre que non só non publican a licenza particular que usan, senón que nin sequera indican que o proxecto é libre. Algunhas veces, esta información crucial é relegada á páxina de descargas, á de desenvolvedores ou a algún outro lugar que require un click para chegar a el. En casos extremos, a licenza non se indica en ningún lugar do sitio web &mdash; a única maneira de atopala é descarregar o programa e ollar dentro.

Non cometas este erro. Tal omisión pode provocar a perda de moitos usuarios e desenvolvedores potenciais. Indícao desde o principio, xusto debaixo da declaración de intencións, que o proxecto é software libre, mostrando a licenza particular escollida. Pódese ver unha guía rápida para elixir licenza en <xref linkend="license-quickstart"/><phrase output="printed">máis adiante neste mesmo capítulo</phrase>, e os aspectos concretos sobre o licenciamento son discutidos con detalle en <xref linkend="legal"/>.

Chegados a este punto, un hipotético visitante da web, decidiu &mdash; probablemente nun minuto ou menos &mdash; que está interesado en investir outros cinco minutos informándose sobre o proxecto. As seguintes seccións describen o que debería atopar nos seguintes 5 minutos.

Lista de funcionalidades e requerimentos

Debería existir unha breve lista das funcionalidades que o programa soporta (se algo aínda non estiver completo, podes listalo, mais poñendo "<emphasis>planeado<emphasis>" ou "<emphasis>en &nbsp; progreso</emphasis>" cerca da funcionalidade), así como o entorno necesario para que o programa funcione. Pensa na lista de funcionalidades/requerimentos como o que lle darías a alguén se pedir un resumo do proxecto. Habitualmente é unha expansión da declaración de intencións. Por exemplo, esta podería dicir:

<blockquote> <para><emphasis>Crear un indexador de texto completo e motor de procura cunha API usable por programadores, que permita fornecer servizos de procura para grandes coleccións de ficheiros.</emphasis></para> </blockquote> <para>A lista de funcionalidades e requerimentos daría os detalles, restrinxindo o ámbito da declaración de obxectivos:</para> <blockquote> <para><emphasis>Funcionalidades:</emphasis></para> <itemizedlist> <listitem><para><emphasis>Procura en texto plano, HTML, e XML</emphasis></para> </listitem> <listitem><para><emphasis>Procura de palabras ou frases</emphasis></para> </listitem> <listitem><para><emphasis>(planeada) Coincidencias aproximadas (Fuzzy matching)</emphasis></para> </listitem> <listitem><para><emphasis>(planeada) Actualización incremental de índices</emphasis></para> </listitem> <listitem><para><emphasis>(planeada) Indexación de sitios webs remotos</emphasis></para> </listitem> </itemizedlist> <para><emphasis>Requerementos:</emphasis></para> <itemizedlist> <listitem><para><emphasis>Python 2.2 ou superior</emphasis></para> </listitem> <listitem><para><emphasis>Espazo en disco suficiente para almacenar os índices (aproximadamente 2x o tamaño orixinal do conxunto de datos)</emphasis></para> </listitem> </itemizedlist> </blockquote>

Con esta información, os lectores poden ter unha idea de se este programa é o que necesitan e valorar a súa implicación no proxecto como desenvolvedores.

Estado do desenvolvemento

Á xente gústalle saber como está evoluíndo un proxecto. En proxectos novos, desexan saber a distancia existente entre as palabras e a realidade. En proxectos maduros, desexan coñecer o grao de actividade do mantemento, con que frecuencia se publican novas versións, a receptividade do proxecto para recibir informes de erros, etc

Para responder a estas cuestións, deberíase crear unha sección na web para desenvolvedores, listando os obxectivos a curto prazo do proxecto e as necesidades (por exemplo, se se están a procurar desenvolvedores expertos nun tema en particular). A páxina pode tamén mostrar as anteriores publicacións do programa con listas de funcionalidades, de cara a que os visitantes poidan ter unha idea de como se define "progreso" neste proxecto e con que rapidez se avanza conforme a esa definición.

Non te preocupes por se dás a sensación de non estares preparado, e non caias na tentación de acelerar o grao de desenvolvemento. Todo o mundo sabe que o software evolúe por etapas; non hai que se envergoñar ao dicir "Este é un programa en estado alpha con erros coñecidos. Corre, e funciona polo menos algunhas veces, así que úsao baixo a túa propia responsabilidade". Este tipo de linguaxe non asustará o tipo de desenvolvedor que precisas nese momento. Por outra banda, de cara ao usuario, unha das peores cousas que pode facer un proxecto é atraelo antes de o programa estar pronto para ser empregado. Unha mala reputación a respecto da estabilidade e erros é difícil de eliminar, unha vez adquirida. Ser conservador paga a pena a longo prazo; sempre é mellor que o software sexa <emphasis>máis</emphasis> estable do que o usuario espera, que o caso contrario. O mellor boca a boca vén de sorpresas agradables.

Alpha e Beta

O termo <firstterm>alpha</firstterm> adoita significar unha primeira publicación que se pode usar e ten toda a funcionalidade esperada, pero tamén ten bugs coñecidos. A principal razón de publicar programas en alpha é xerar feedback, de maneira que os desenvolvedores saiban onde concentrar o traballo. A seguinte etapa, <firstterm>beta</firstterm>, indica que o software ten todos os erros serios resoltos mais non está suficientemente probado para ser publicado como estable. O propósito dos programas beta é convertérense nunha publicación estable, asumindo que non se atoparon erros, ou aportaren feedback suficiente aos desenvolvedores para que se poida obter a estable rapidamente. A diferenza entre alpha e beta é unha cuestión de xuízo.

Descargas

O código fonte do programa debería poderse descarregar en formatos estándar. Cando se lanza un proxecto, os pacotes binarios (executables) non son precisos a menos que o proxecto teña requerimentos ou dependencias moi complexas de compilación, polo que simplemente facelo funcionar sería complexo para a maioría da xente. (Mais se éste for o caso, o proxecto vaino ter complicado para atraer desenvolvedores!)

O mecanismo de distribución debería ser o máis estándar e sinxelo posible. Se estiveres tentando erradicar un virus, non distribuirías o medicamento de tal modo que requerise unha agulla especial para ser administrado. De igual modo, o software debería axeitarse a métodos de instalación e compilación estándares; canto máis se desviar do estándar, máis usuarios e desenvolvedores se van dar por vencidos e van abandonar o proxecto.

Aínda que pareza obvio, moitos proxectos non se molestan en estandarizar o proceso de instalación ata moi tarde, dicíndose a si mesmos que teñen tempo a facelo máis adiante: <emphasis>"Enfrontarémonos a esas cuestións cando o código estea case pronto."</emphasis> Mais non se decatan de que deixando para o final os aburridos procesos de construción e instalación do código están a atrasar a finalización do proxecto&mdash; xa que desalentan a desenvolvedores que de outra maneira poderían ter contribuído no proxecto. O peor de todo é que <emphasis>non saben</emphasis> que están a perder desenvolvedores, xa que o proceso é unha acumulación de non-eventos: alguén visita a web, descarrega o proxecto, tenta construír o programa, non o consegue, abandona e vaise. Quen saberá algunha vez o que aconteceu, excepto a mesma persoa? Ninguén do proxecto vaise decatar de que o interese de alguén foi desaproveitado.

As tarefas aborridas cun alto beneficio deberían ser feitas nas etapas iniciais do proxecto. E baixar a barreira de entrada utilizando un bo sistema de paquetización consegue un grande beneficio.

Cando se publica un paquete descargable, é vital asignar un número único de versión á publicación, para que a xente poida comparar entre 2 publicacións diferentes e saber cal substitúe cal. Pódese atopar información detallada sobre a numeración de versións en <xref linkend="release-numbering"/>, e os detalles de estandarización dos procesos de construción e instalación son tratados en <xref linkend="packaging"/><phrase output="printed">, ambos en <xref linkend="development-cycle"/></phrase>.

Control de versións e acceso ao Sistema de notificación de bugs

Descarregar pacotes co código fonte é suficiente para aqueles que unicamente desexan instalar e usar o programa, pero non o é para os que desexan depurar o código ou engadir novas funcionalidades. Empacotar o código diariamente pode axudar, mais non é suficiente para unha comunidade de desenvolvedores saudable. A xente precisa acceso en tempo real ao código fonte, e o modo de darllo é usar un sistema de control de versións. A presenza de código fonte baixo control de versión accesible anonimamente é un signo &mdash; tanto para usuarios como para desenvolvedores &mdash; de que o proxecto está facendo un esforzo por darlle á xente o que precisa para participar. Se non é posible ofrecer control de versións neste momento, indica que se está montando a infraestrutura. Todo o relativo ao control de versións estúdase en detalle en <xref linkend="vc"/><phrase output="printed"> dentro de <xref linkend="technical-infrastructure"/></phrase>.

O mesmo é aplicable para o sistema de notificación de erros do proxecto. A importancia deste sistema non só reside na utilidade para os desenvolvedores, senón o que isto significa para a xente que ve o proxecto desde fóra. Para moita xente, unha base de datos de erros accesible é un dos signos máis importantes de que o proxecto debe ser tomado en serio. Ademais, cantos máis erros rexistrados, mellor. Aínda que poida parecer contraintuitivo, é preciso recordar que o número de erros almacenado depende de 3 claves: o número absoluto de erros presentes no programa, o número de usuarios que o usan e a facilidade coa que os usuarios poden rexistrar os erros. Deses 3 factores, os últimos 2 son máis significativos que o primeiro. Calquera aplicación de tamaño e complexidade suficientes ten unha cantidade arbitraria de erros esperando a seren descubertos. A verdadeira cuestión é o ben que o proxecto almanece e priorice eses erros. Un proxecto cunha base de datos de erros grande e ben mantida (é dicir, os erros aténdense sen demoras, os duplicados son unificados, etc) dá mellor impresión que un proxecto sen base de datos ou cunha case inexistente.

Obviamente, se o proxecto acaba de comezar, a base de datos de erros conterá poucos, non hai moito que facer ao respecto. Mais se a páxina do proxecto indica a súa xuventude e se a xente que usa a base de datos pode ver que a maioría dos erros foron notificados recentemente, é posible extrapolar que o proxecto ten un <emphasis>ratio</emphasis> de rexistros saudable e os visitantes non se alarmarán polo baixo número total de erros rexistrados.

É preciso sinalar que os sistemas de notificación de erros son habitualmente empregados non só para manter un rexistro de erros no software, senón tamén para indicar peticións de funcionalidades, mudanzas na documentación, tarefas pendentes, etc. Os detalles sobre a xestión dun sistema de notificación de erros son comentados en <xref linkend="bug-tracker"/><phrase output="printed"> dentro de <xref linkend="technical-infrastructure"/></phrase>, polo que non se entrará en detalles aquí. Desde o punto de vista da presentación, a importancia radica en <emphasis>ter</emphasis> un sistema de notificación e asegurarse de que é visible desde a páxina principal do proxecto.

Canais de comunicación

Habitualmente, os visitantes da web desexan saber como porse en contato coa xente implicada no proxecto. Proporciona a dirección das listas de correo, salas de chat, canais de IRC e calquera outro foro onde a comunidade interactúe. Deixa claro que tanto ti como os outros participantes do proxecto estades subscritos a estas roldas de correo, para que a xente vexa que existe un modo de enviar feedback aos desenvolvedores. A presenza nas roldas de correo non implica a obrigación de responder todas as preguntas nin implementar todas as peticións de funcionalidades. A longo prazo, moitos usuarios non se van cadastrar nos foros, mais gustaralles saber que poderían facelo se algunha vez o precisaren.

En etapas iniciais do proxecto, non hai necesidade de ter foros separados para usuarios e desenvolvedores. É mellor ter a todo o mundo falando xuntos, nunha única "sala". Entre os primeiros participantes do proxecto, a distinción entre usuario e desenvolvedor é confusa; mais se a distinción tivese que ser feita, o ratio entre desenvolvedores e usuarios é habitualmente máis alta no comezo. Aínda que non é posible asumir que cada participante nas etapas iniciais sexa un programador que desexa hackear o programa, é posible asumir que están polo menos interesados en seguir os debates sobre o desenvolvemento e obter unha visión de cara a onde avanza o proxecto.

Xa que este capítulo únicamente versa sobre como iniciar un proxecto, chega con dicir que os foros de comunicacións teñen que existir. Máis adiante, en <xref linkend="growth"/><phrase output="printed"> dentro de <xref linkend="communications"/></phrase>, examinarase onde e como establecer as maneiras en que poden ser xestionados e moderados, e como separar foros de usuarios de foros de desenvolvedores, cando for preciso, sen crear un abismo infranqueable.

Pautas de desenvolvemento

Se alguén está a pensar en contribuir a un proxecto, buscará as pautas de desenvolvemento. Estas pautas non son tanto técnicas como sociais: explican como os desenvolvedores interactúan entre si e cos usuarios ou como se realiza o traballo.

Este tema trátase en detalle en <xref linkend="written-rules"/><phrase output="printed"> dentro de <xref linkend="social-infrastructure"/></phrase>, mais os elementos básicos das pautas de desenvolvemento son: <itemizedlist> <listitem><para>ligazóns aos foros onde interactuar con outros desenvolvedores</listitem> <listitem><para>instruccións sobre como notificar erros e enviar remendos</listitem> <listitem><para>indicacións sobre como o desenvolvemento se realiza habitualmente &mdash; é o proxecto unha dictadura benevolente? unha democracia? calquera outra cousa? </para> </listitem> </itemizedlist>. O temo "dictadura" non pretende ter sentido pexorativo. É perfectamente válido xestionar un proxecto como se de unha tiranía se tratase, onde un único desenvolvedor teña poder de veto sobre todos as mudanzas. Moitos proxectos con suceso funcionan deste xeito. O importante é que o proxecto sexa consciente diso e o comunique. Unha tiranía que pretenda ser unha democracia desalentará as persoas a participaren; unha tiranía que diga que é tal, funcionará ben sempre que sexa competente e de confianza.

Pódese obserar aquí <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"></ulink> un exemplo de pautas de desenvolvemento, ou <ulink url="http://www.openoffice.org/dev_docs/guidelines.html"></ulink> para pautas máis enfocadas á governanza e o espírito de participación e menos en aspectos técnicos.

O tema de como fornecer unha introdución á aplicación para o programador discutirase máis adiante neste mesmo capítulo<xref linkend="developer-documentation"/><phrase output="printed"></phrase>

Documentación

A documentación é esencial. É preciso que exista<emphasis>algo</emphasis> que a xente poida ler, aínda que sexa rudimentario e incompleto. Esta tarefa cae de cheo na categoría de "traballo pesado" antes citada e habitualmente é a primeira das áreas nas que un proxecto de software libre fracasa. Ter unha declaración de intencións e unha lista de funcionalidades, escoller unha licenza, resumir o estado do desenvolvemento &mdash; son pequenas tarefas que polo xeral se realizan e habitualmente non precisan ser revisadas unha vez feitas. Por outra banda, a documentación é algo que nunca remata, o que pode ser unha das razóns polas que sempre se retrasa ou non se realiza.

O máis insidioso da documentación é que a utilidade para quen o escribe é inversamente proporcional á utilidade para quen o vai ler. A documentación máis importante para usuarios iniciais é o básico: cómo configurar a aplicación, unha introdución ao seu funcionamento e talvez algunhas indicacións sobre como facer tarefas comúns. E xusto esas son as cousas que os <emphasis>redactores</emphasis> da documentación coñecen demasiado ben &mdash; polo que pode ser difícil para eles poñerse no punto de vista do lector e listar os pasos que (para o escritor) parecen tan obvios que non paga a pena mencionar.

Non hai unha solución máxica para este problema. Alguén ten que sentarse e escribila para logo presentarlla a un usuario novato e comprobr a calidade. Usa un formato sinxelo, fácil de editar como HTML, texto plano, Texinfo ou algunha variante do XML &mdash; algo que sexa facilmente editable. Isto vai facilitar as melloras incrementais tanto por parte dos escritores actuais como dos que se unan máis tarde ao proxecto e desexen traballar sobre a documentación.

Un modo de asegurarse de que se fai a documentación é limitar o seu alcance por adiantado. Desta forma, escribila non parecerá unha tarefa sen fin. Unha boa regra xeral é seguir uns criterios mínimos:

Indicarlle ao lector claramente o nivel técnico que precisa ter.

Describir clara e extensivamente como configurar a aplicación e, nalgunha parte ao principio da documentación, indicar como executar algún tipo de proba ou comando que confirme que todo funciona correctamente. A documentación sobre como comezar é ás veces mais importante que a documentación de uso. Canto máis esforzo eña investido unha persoa en instalar e ter funcionando a aplicación, máis persistente será en descubrir funcionalidades que non estean ben documentadas. A xente que abandona soe facelo no comezo; por iso, son as etapas iniciais, como a instalación, as que precisan máis soporte.

Dar un exemplo, tipo tutorial, sobre como levar a cabo unha tarefa común. Obviamente, cantos máis exemplos mellor, mais se o tempo for limitado, escolle unha e descríbea a fondo. Unha vez unha persoa vexa que a aplicación pode ser utilizada para unha cousa, comezará a explorar que máis se pode facer &mdash; e, con sorte, comezará a xerar documentación por el mesmo. O que nos leva ao seguinte punto.

Indica que áreas da documentación están incompletas. Mostrándolle aos lectores que te preocupas das deficiencias, estaste aliñando co seu punto de vista. A empatía dilles aos lectores que non terán que facer moito ruído para convenceren ao proxecto do que é importante. Esas indicacións non teñen por que ser entendidas como algo que teña que ser feito para unha data determinada, senón que poden verse como tarefas abertas a voluntarios.

O último punto é de maior importancia e pode ser aplicado ao conxunto do proxecto, non unicamente á documentación. Unha detallada explicación das deficiencias do proxecto é a norma no mundo do software libre. Non esaxeres nos defectos do proxecto, limítate a identificalos escrupulosa e desapaixoadamente cando sexa necesario (na documentación, na base de datos de erros ou na lista de correo). Ninguén o vai ver como derrotismo nin como un compromiso para resolvelos no futuro, a menos que se faga esa promesa explícita. Xa que calquera que use a aplicación vai decubrir as deficiencias por si mesmos, é mellor que estean psicoloxicamente preparados &mdash; á vez que o proxecto mostrará ter un sólido coñecemento de como está progresando.

Manter unha FAQ (Preguntas Frecuentes)

Unha <firsttem>FAQ</firsttem> (un documento de preguntas frecuentes) pode ser un dos mellore investimentos que un proxecto pode facer en termos de documentación. As FAQs están altamente enfocadas ás preguntas que os usuarios e desenvolvedores preguntan &mdash; e que pode ser o contrario ás preguntas que ti <emphasis>esperabas</emphasis> que fixeran &mdash; unha FAQ detallada soe dar a quen procura a resposta exacta que estaba a esperar. A FAQ é habitualmente o primeiro lugar onde os usuarios consultan cando atopan un problema, mesmo antes do manual oficial, e é o documento do proxecto que probablemente máis se vai enlazar desde outros lugares.

Infelizmente, a FAQ non se pode realizar ao principio do proxecto. As boas FAQ non están escritas, medran. Son documentos reactivos, que evolúen a través do tempo en resposta ao uso diario da aplicación. Xa que é imposible anticipar correctamente as preguntas que van ser realizadas, é imposible sentarse e redixir unha FAQ útil dende cero.

Polo tanto, non esbanxes o tempo facéndoo. Porén, pode ser útil crear un molde inicial para as FAQ, de maneira que exista un lugar obvio onde as persoas contribúan con preguntas e respostas cando o proxecto comece a andar. Nesta etapa, o máis importante non é que estean completas, senón a conveniencia: se é sinxelo engadir contido á FAQ, a xente vaino facer. O mantemento correcto da FAQ non é un problema trivial e será comentado máis a fondo en <xref linkend="faq-manager"/><phrase output="printed"> en <xref linkend="managing-volunteers"/></phrase>.

Disponibilidade da documentación

A documentación debe estar dispoñible desde 2 lugares: en liña (directamente dende a páxina web) <emphasis>e<emphasis> na distribución descarregable da aplicación (ver <xref linkend="packaging"/><phrase output="printed"> in <xref linkend="development-cycle"/></phrase>). É preciso que estea en liña, de modo navegable, xa que a xente habitualmente le a documentación <emphasis>antes</emphasis> de descarregar o programa por primeira vez, para decidir si paga a pena facelo. Mais tamén debería ir acompañando o programa, baixo o principio de que a aplicación debería facer accesible todo aquilo que alguén necesitar para usar o programa.

Para a documentación en liña, é preciso asegurarase de que hai unha ligazón que amose a documentación nunha única páxina HTML (pon unha nota como "monolítico ou "todo en un" ou "un único ficheiro" para que a xente saiba que pode levar un tempo que o documento carregue). Isto é útil porque a xente habitualmente desexa procurar unha palabra ou frase específica en todo o documento. Xeralmente, saben o que están a procurar, só que non recordan en que sección está. Para esta xente, nada será máis frustante que atopar unha páxina HTML para a tabela de contidos, outra páxina para a introdución, outra para as instruccións de instalación, etc. Cando as páxinas se dividen dese modo, a función de procura do navegador é inútil. O estilo de páxinas separadas por sección é útil para aqueles que saben que sección precisan ou desexan ler a documentación enteira. Mais esta <emphasis>non</emphasis> é a maneira máis habitual en que se accede á documentación. É moito máis habitual que alguén que xa coñece o programa vaia procurar unha palabra ou frase específica. Non darlles un único documento sobre o que facer as procuras tornaríalles a vida un pouco máis dura.

Documentación para desenvolvedores

A documentación para desenvolvedores está escrita para axudar os programadores a entenderen o código, para que poidan reparalo ou extendelo con máis funcionalidades. Isto é diferente das <emphasis>pautas de desenvolvemento</emphasis> comentadas anteriormente, as cales son máis sociais que técnicas. Estas dinlle aos programadores como interactuar uns cos outros; a documentación para programadores dilles como interactuar co código. Ambas son habitualmente empacotadas xuntas nun único documento por comodidade (como co <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"></ulink> exemplo mostrado anteriormente), mais non ten por que ser así.

Aínda que a documentación para programadores pode ser moi útil, non hai razón para atrasar unha publicación por non posuíla. Para empezar, é suficiente que os autores orixinais estean dispoñibles (e dispostos) a contestaren cuestións sobre o código. De feito, ter que responder ás mesmas preguntas unha e outra vez é unha gran motivación para escribir documentación. Mais antes de que sexa escrita, os contribuidores dispostos atoparán o modo de colaborar. O que conduce á xente a investiren o seu tempo na aprendizaxe do código é que éste faga algo útil para eles. Se a xente ten fe, tomaralles o seu tempo; se non teñen fe, ningunha documentación fará que se queden.

Polo tanto, se unicamente tes tempo para escribires documentación para unha única audiencia, escríbea para os usuarios. Toda documentación de usuario é á súa vez documentación para programadores; calquera programador que desexe usar unha parte do software terá que familializarse co seu uso. Máis tarde, cando os programadores pregunten as mesmas cuestións unha e outra vez, tómate o teu tempo para escribires documentación específica para eles.

Algúns proxectos usan wikis para a súa documentación inicial e mesmo como primeira fonte de documentación. Pola miña experiencia, isto unicamente funciona se o wiki é editado activamente por unha pouca xente que decide como a documentación ten que ser organizada e que clase de "voz" debe ter. Ver <xref linkend="wikis"/><phrase output="printed"> en <xref linkend="technical-infrastructure"/></phrase> para máis información.

Exemplos de saídas e capturas de pantalla

Se o proxecto envolve o uso dunha interfaz de usuario gráfica ou se produce saídas gráficas ou distintivas dalgunha outra forma, publica algúns exemplos na páxina web do proxecto. No caso de interfaces, isto quere dicir capturas de pantalla; para resultados de saída, poden ser capturas de pantallas ou ficheiros. Ambas serán útiles para o usuario: unha simple captura de pantalla pode ser máis convincente que parágrafos de texto descriptivo e barullo nas listas de correo, xa que a captura de pantalla é unha proba irrefutable de que <emphasis>a aplicación funciona</emphasis>. Pode ter erros, ser complicada de instalar ou ter documentación incompleta, mais esa captura de pantalla é a proba de que se un fai o suficiente esforzo, é posible facela funcionar.

Capturas de pantalla

Debido a que as capturas de pantalla poden ser desalentadoras ata que fas unhas poucas, aquí tes unhas instruccións básicas para facelas. En Gimp (<ulink url="http://www.gimp.org/"></ulink>), abre o menú <guimenu>Arquivo</guimenu>-&gt;<guimenu>Tomar</guimenu>-&gt;<guimenu>Captura de pantalla</guimenu>, escoller <guimenuitem>Unha&nbsp;única&nbsp;xanela</guimenuitem> ou <guimenuitem>Xanela&nbsp;completa</guimenuitem>, preme en <guimenuitem>Capturar</guimenuitem>. A seguinte vez que premas unha xanela ou pantalla vai ser capturada como imaxe no Gimp. Recorta e redimensiona a imaxe tanto como for necesario, usando as instruccións que podes atopar en <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"></ulink>.

Hai moitas máis cousas que se poden poñer na páxina web do proxecto, se tes tempo ou se por algunha razón son especialmente apropiadas: unha páxina de noticias, outra sobre a historia do proxecto, ligazóns relacionadas, unha ferramenta de procura do sitio web, ligazóns para facer doazóns, etc. Ningunha desas son necesarias ao comezo, mais tenas presentes para o futuro.

Aloxamento enlatado

Existen algúns lugares que facilitan aloxamento gratuito e infraestrutura para proxectos de software libre: unha páxina web, sistema de control de versións, xestor de bugs, área de descargas, salas de chat, backups regulares, etc. Os detalles varían entre sitio e sitio, mais os mesmos servizos básicos son ofertados en todos eles. Usando un destes servizos, obtense moito por nada; porén, cédese control sobre a experiencia do usuario. O servizo de aloxamento decide sobre que aplicacións funciona e pode controlar ou influir no "look&feel" das páxinas dos proxectos.

Ver <xref linkend="canned-hosting"/><phrase output="printed"> en <xref linkend="technical-infrastructure"/></phrase> para obter máis detalles sobre as vantaxes e desvantaxes de usar aloxamento enlatado así como para obter unha lista de sitios que o ofrecen.

Escoller unha licenza e aplicala

Esta sección pretende ser unha rápida guía sobre como escoller licenzas. Le <xref linkend="legal"/> para comprenderes as implicacións legais das diferentes licenzas, e como a licenza que escollas podo afectar a como a xente pode integrar o teu programa con outros.

Existen moitas e moi boas licenzas de software libre onde escoller. A maioría delas non precisan ser consideradas aquí, xa que foron escritas para satisfacer as necesidades legais dalgunha corporación ou persoa específica, e non serían apropiadas para o teu proxecto. Cinguirémonos ás máis comunmente usadas; na maioría dos casos, será suficiente con escoller unha delas.

As licenzas "Fai o que queiras"

Se che parece ben que o código do teu proxecto poida ser integrado en programas propietarios, usa una licenza estilo <firstterm>MIT/X</firstterm>. É a máis sinxela de moitas licenzas que unicamente declaran un copyright nominal (sen restrinxir a copia) e especifica que o código ven sen garantía. Ver <xref linkend="license-choosing-mit-x"/> para os detalles.

A licenza GPL

Se non desexas que o teu código poida ser usado en programas propietarios, usa a GNU General Public License (<ulink url="http://www.gnu.org/licenses/gpl.html"></ulink>). A GPL é probablemente a licenza máis coñecida e extendida no mundo a día de hoxe. Esto en si mesmo é unha vantaxe, xa que moitos usuarios potenciais e contribuidores estarán familiarizados con ela, polo que non terán que investir tempo extra en comprender que licenza usas. Ver <xref linkend="license-choosing-gpl"/><phrase output="printed"> en <xref linkend="legal"/></phrase> para máis detalles.

Se os usuarios interactúan co teu código a través da rede &mdash; isto é, se o programa é parte dun servizo aloxado &mdash; podes considerar o uso da <firstterm>GNU Affero GPL</firstterm>. Ver <xref linkend="gnu-affero-gpl"/><phrase output="printed"> in <xref linkend="legal"/></phrase> para máis información.

Como aplicar unha licenza ao teu código

Unha vez escolleres unha licenza, deberás indicalo na páxina principal do proxecto. Non é preciso incluíres o texto completo da licenza, unicamente dar o seu nome e pór unha ligazón ao texto completo.

Isto dille ao público baixo que licenza será publicado o software, máis non é suficiente para fins legais. Para iso, o software en si mesmo debe conter a licenza. A maneira habiltual de facelo é poñendo o texto da licenza completa nun ficheiro chamado <filename>COPYING</filename> ou <filename>LICENSE</filename>, así como poñer un aviso no cabezallo de cada ficheiro de código fonte, indicando a data do "copyright", mantedor e licenza usada e indicando onde atopar o texto completo.

Existen moitas variacións deste padrón, así que únicamente imos ver un deles. A GNU GPL di que se debe poñer un aviso como o seguinte no cabezallo de cada ficheiro de código fonte:

Copyright (C) &lt;ano&gt;  &lt;nome do autor&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;

O texto non indica especificamente que a copia da licenza se pode atopar no ficheiro <filename>COPYING<filename>, mais é alí onde habitualmente se pón. É posible mudar o aviso anterior para indicalo explicitamente. Este molde tamén dá un enderezo postal onde pedir unha copia da licenza. Outro método común é dar unha ligazón a unha páxina web que a conteña. Usa o teu xuízo para apuntares a onde considerares que se mantén a copia máis permanente da licenza, que pode ser algún lugar da páxina web do teu proxecto. En xeral, o aviso que poñas en cada ficheiro de código fonte non ter por que ser igual ao anterior, sempre e cando comece co mesmo aviso de data e mantedor do copyright, indique o nome da licenza e deixe claro onde obter a licenza completa.

Axustando o tono

Ata agora falouse de tarefas unitarias que se fan durante a etapa de inicio do proxecto: escoller unha licenza, organizar a páxina web, etc. Mais os aspectos máis importantes dun proxecto son dinámicos. Elixir un nome para unha lista de correo é sinxelo, asegurarse de que as conversas da lista se manteñen nas temáticas e son productivas é outra cousa totalmente diferente. Se o proxecto se fai público logo de anos de desenvolvemento pechado interno, os procesos de desenvolvemento mudarán e será necesario preparar os desenvolvedores para esa mudanza.

Os primeiros pasos son os máis duros, xa que aínda non se sentaron precedentes e expectativas para condutas futuras. A estabilidade dun proxecto non vén de políticas formais, senón dunha intelixencia compartida e colectiva que se desenvolve co tempo. Habitualmente tamén existen regras escritas, mais en esencia, soen ser unha destilación do intanxible antes que acordos que realmente guían o proxecto. As políticas que se escriben non definen a cultura do proxecto, senón que a describen, e só aproximadamente.

Hai algunhas razóns polas que as cousas funcionan así. O crecemento e a alta taxa de rotación entre voluntarios non son tan nocivos como para precisar da acumulación de normas sociais, como un puidera pensar a primeira vista. Mentres a mudanza non teña lugar <emphasis>demasiado</emphasis> rápido, os novos teñen tempo de aprenderen como se fan as cousas; unha vez aprenderen, axudarán a reforzar os valores por si mesmos. Considera como as nanas sobreviven polos séculos dos séculos. Os nenos de hoxe cantan aproximadamente as mesmas rimas que as que cantaron outros nenos centos de anos atrás. Aínda é máis sorprendente se temos en conta que non hai nenos que estén agora vivos que tamén fosen nenos daquela. Os cativos máis pequenos oen as cancións que cantan os maiores, e cando sexan máis vellos cantaranas diante doutros rapaces máis novos ca eles. Os cativos non están comprometidos cun programa consciente de transmisión, desde logo. As razóns polas que as cancións sobreviven é, nada máis e nada menos, porque son transmitidas regular e repetidamente. A escala de tempo dos proxectos de software libre pode non ser medida en séculos (aínda non o sabemos) mais as dinámicas de transmisión de coñecemento son as mesmas. Porén, a taxa de rotación é máis rápida e debe ser compensada por un esforzo máis activo e deliberado de transmisión de prácticas e coñecemento compartido.

Este esforzo válese do feito de que a xente, en xeral, chega ao proxecto agardando e procurando normas sociais. Así é a raza humana. En calquera grupo unificado por un comportamento común, a nova xente que se une quere reafirmar comportamentos que os convirtan en parte do grupo. O obxectivo de poñer precedentes ao principio é facer que eses comportamentos internos do grupo sirvan o proxecto; cando sexan establecidos, serán autoperpetuados por moito tempo.

A continuación hai algúns exemplos de cousas que se poden facer para sentar bos precedentes. Non pretenden ser unha lista exhaustiva, senón ser útiles como ilustracións de que investir en comportamentos e normas compartidas no inicio pode axudar moito no futuro do proxecto. Fisicamente, cada desenvolvedor pode estar traballando só nun cuarto, mais é posible facer moito para que se <emphasis>sintan</emphasis> como se estivesen todos no mesmo cuarto. Canto máis se sintan desta maneira, máis desexarán participar no proxecto. Escollín os seguintes exemplos particulares xa que foron os que se propuxeron no proxecto Subversion (<ulink url="http://subversion.tigris.irg"></ulink>), no cal participei desde os seus inicios. Mais non son únicos ao proxecto Subversion; situacións como as seguintes ocorren na maioría dos proxectos de software libre, e deberían ser vistas como oportunidades para comezar con bo pé. 

Evita os debates privados

Mesmo despois de que o proxecto sexa público, ti e os demáis fundadores habitualmente desexaredes xerir en privado temas difíciles. Isto é especialmente certo nos primeiros momentos do proxecto, cando hai moitas decisións importantes que tomar, e poucos voluntarios cualificados para tomalas. Todas as desvantaxes dos debates en listas de correo públicas vanse erguer ante ti: os atrasos inherentes a debates por correo electrónico, a necesidade de deixar tempo suficiente para que se forme o consenso, discutir con voluntarios inxenuos que pensan que comprenden todo mais en realidade non (todos os proxectos os teñen; algunhas veces se convirten nos mellores contribuidores do proxecto, outras veces simplemente continúan na súa inxenuidade), a persoa que non comprende que só desexas resolver o problema X cando éste é obviamente unha pequena parte do maior Y, etc. A tentación de tomar decisións a porta pechada e presentalas como <foreignphrase>faits accomplis</foreignphrase>, ou como as firmes recomendacións dun unido e influente bloco de votantes, será moi grande.

Non o fagas.

A pesar do lentos e difíciles que os debates públicos poden chegan ser, case sempre son preferibles a longo prazo. Tomar as decisións en privado é como rociar repelente anti-contribuidores sobre o proxecto. Ningún voluntario serio permanecerá moito tempo nun entorno onde un consello secreto toma todas as grandes decisións. Ademais, os debates públicos teñen efectos positivos que permanecerán alén de calquera cuestión tecnolóxica efímera:

O debate contribuirá ao adestramento e educación dos novos desenvolvedores. Non é posible saber cantos ollos estan a seguir a conversa; e aínda que a maioría da xente non participe, moitos poden estar observando en silencio, obtendo información sobre o proxecto.

O debate formarate na arte de explicar cuestións técnicas a xente que non está tan familiarizada co programa coma ti. Esta é unha capacidade que require práctica e non podes practicala con xente que xa sabe o que ti sabes.

O debate e as súas conclusións estarán dispoñibles en arquivos públicos, evitando que futuros debates reincidan sobre os mesmos pasos. Ver <xref linkend="using-archives"/><phrase output="printed"> en <xref linkend="communications"/></phrase>.

Finalmente, existe a posibilidade de que alguén na lista faga unha contribución real á conversa, propoñendo unha idea que nunca se che ocorrería. É difícil calcular a probabilidade de que ocorra, dependerá da complexidade do código e do grao de especialización requerido. Mais se se me permite una pequena anécdota, apostaría a que isto é máis probable do que intuitivamente poida parecer. No proxecto Subversion, os fundadores críamos que nos enfrontabamos a un complexo conxunto de problemas, sobre os que tiñamos pensado moito durante algúns meses e -francamente- dubidabamos de que alguén na recén creada lista de correo contribuíse con algunha idea nova ao debate. Así, tomamos o camiño máis sinxelo e comezamos a compartir algunhas ideas en privado, ata que un observador do proxecto <footnote><para>Aínda non o puxemos na sección de créditos, mais por practicar o que máis tarde predicarei: o nome do observador é Brian Behlendorf, e foi el quen sinalou a necesidade de manter todos os debates en público a menos que existise algunha razón concreta para facelo en privado.</para></footnote> decatouse do que ocorría e pediu que o debate se movese á lista pública. Así o fixemos, e ficamos abraiados polo número de comentarios e suxerencias brillantes que pronto xurdiron. En moitos casos, a xente deu ideas que nunca se nos terían ocorrido. Isto demostrou que había xente <emphasis>moi</emphasis> intelixente nesa rolda de correo; unicamente estaban a agardar o momento adecuado para participar. Se ben é certo que os debates foron máis longos do que serían se fosen mantidos en privado, sen dúbida foron máis produtivos en aberto e o tempo extra pagou a pena.

Sen deixarnos levar por xeralizacións como "o grupo sempre é máis intelixente que o individuo" (todos temos coñecido bastantes grupos como para saber que isto non é certo), hai que recoñecer que en certas actividades os grupos son excelentes. A revisión masiva entre pares é unha delas; xerar un número de ideas grande en pouco tempo é outra. A calidade das ideas dependerá da calidade dos pensadores que están detrás delas, desde logo, mais non saberás qué clase de pensadores rondan o proxecto ata que os estimules cun problema desafiante.

Naturalmente, hai certos debates que deben ser mantidos en privado; máis adiante no libro se poderán ver exemplos. Mais a política debería ser sempre: <emphasis>se non hai razón para que sexa privado, debe ser público</emphasis>.

Esto non se fai só. Non é suficiente con que te asegures de que todas as túas mensaxes van á lista pública. Debes tamén facer que os demáis eviten as conversas privadas. Se alguén tenta comezar un debate privado, e non hai razón para que así sexa, é a túa obriga abrir o meta-debate de inmediato. Nin sequera comentes no tema orixinal ata que a conversa se teña movido a un foro público ou descubras que a privacidade do caso é realmente precisa. S fixeres isto de modo coherente, a xente rapidamente seguirá esta política e comezará a usar os foros públicos por defecto.

Tolerancia cero coa rudeza

Dende o primeiro momento en que o proxecto sexa público, débese manter tolerancia cero cos comportamentos maleducados ou insultantes nos foros de debate. Tolerancia cero non significa usar medidas técnicas per se: non é preciso eliminar a xente da rolda de correo cando entrar en conflito con outro participante ou quitarlle o dereito de enviar commits debido a que fixo comentarios despectivos (en teoría, podes ter que levar a cabo esas accións, mais unicamente cando todos os outros intentos teñan errado &mdash; o que, por definición, non soe ser o caso ao principio do proxecto). Tolerancia cero simplemente significa que nunca deixes que os malos comportamentos pasen inadvertidos. Por exemplo, cando alguén publica un comentario técnico mesturado cun ataque <foreignphrase>ad hominen</foreignphrase> sobre outro desenvolvedor do proxecto, é necesario que primeiro se trate o ataque <foreignphrase>ad hominen</foreignphrase> como unha cuestión independente e unicamente despois diso debatir o contido técnico.

Infelizmente, é moi sinxelo e demasiado típico, que debates constructivos se convirtan en longos debates destructivos "<firstterm>flames</firstterm>"). A xente di cousas por e-mail que nunca dirían cara a cara. Os temas de debate amplificarán este efecto: en cuestións técnicas, a xente habitualmente pensa que hai unha resposta única para a maioría das preguntas e que estar en desacordo sólo pode ser signo de ignorancia ou estupidez. Hai unha distancia moi pequena entre chamar estúpida unha proposta técnica a chamar estúpida a persoa que a propón. De feito, habitualmente é complexo dicir onde remata o debate técnico e comeza o ataque persoal, o que é unha das razóns polas que as respostas drásticas ou os castigos non son unha boa idea. En troca diso, cando algo así ocorra, publica unha mensaxe que saliente a importancia de manter o debate amigable, sen acusar ninguén en particular de ser problemático. Desafortunadamente, esas mensaxes soen ser vistas como as de unha profesora de xardín de infancia dando aulas de bo comportamento:

Primeiramente, reduce os comentarios que sexan persoais; como por exemplo, dicir que o deseño de J para a camada de seguridade é "inxenuo e ignora os principios básicos da seguridade dos computadores". Pode ser certo ou non, mais en calquera caso non é xeito de manter o debate. J fixo a súa proposta de boa fe. Se ten deficiencias, que sexan sinaladas e resolvámolas ou obteñamos un novo deseño. Seguramente M non quixo insultar J persoalmente, mais a frase foi desafortunada e aquí trátase de manter os debates constructivos.

Agora, sobre a proposta. Creo que M estaba no certo cando dixo que ...

A pesar do torpe que poidan parecer esas respostas, teñen un notable efecto. Se chamas a atención sobre os malos comportamentos pero non esixes unha desculpa pola parte que ofende, facilitas que a xente se calme e a seguinte vez amose un mellor comportamento &mdash; e farano. Un dos segredos para facer isto con suceso consiste en nunca deixar que o meta-debate se convirta no tema principal. A resposta debería ser colateral, un breve prefacio á mensaxe completa. Sinalando que "as cousas non se fan así nesta comunidade" e continuando o debate sobre contido real, facilitas un tema sobre o que a xente pode seguir falando deixando detrás a mala contestación. Se alguén che recrimina que non merecían tal reprimenda, non entres nese debate. Ou non respondas (se considerares que simplemente precisan desestresarse) ou responde pedindo desculpas se a túa reacción foi exesiva e que é difícil detectar certos matices nun correo electrónico. E volta ao contido principal da conversación. Nunca xamais esixas unha desculpa, sexa pública ou privada, de alguén que se comportou de modo inapropiado. Se por si mesmos deciden escribila, estupendo, mais esixila só causará resentemento.

O obxectivo xeral é facer ver que a boa educación é unha das políticas de comportamento do grupo. Isto axudará o proxecto xa que os desenvolvedores poden decidir non contribuir (incluso en proxectos que lles gustan e nos que desexan participar) debido ás continuas guerras de flames. É probable que non te des nin conta; alguén está únicamente lendo a rolda de correo, ve que hai que ter coraxe para participar no proxecto e decide non facelo. Mante-la netiqueta nos foros é unha estratexia de longo recorrido e é máis sinxela de implementar cando o proxecto é pequeno. Unha vez que é parte da cultura, non serás a única persoa en promocionala. Será mantida por todo o mundo.

Fomenta a revisón pública do código

Unha das mellores maneiras de favorecer unha comunidade de desenvolvemento produtiva é facer que a xente revise o código de outros. Para atinxilo de modo efectivo é precisa certa infraestrutura técnica &mdash; en particular, o aviso de novos commits por email debe ser activado; ver <xref linkend="commit-emails"/> para máis detalles. O efecto de activar o aviso por email dos commits é que cada vez que alguén faga un commit sobre o repositorio de código do proxecto, un email será enviado mostrando o log do mensaxe e as mudanzas introducidas (ver <xref linkend="vc-vocabulary-diff"/>, en <xref linkend="vc-vocabulary"/>). A <firstitem>revisión de código</firstitem> é a práctica de revisar os emails de commit que chegan, buscando erros e posibles melloras.

Así é como habitualmente se fai a revisión do código en proxectos de software libre. En proxectos máis centralizados, a "revisión do código" pode mesmo envolver grupos de persoas que se reúnen para procuraren problemas e patróns específicos sobre o código impreso.

A revisión do código ten varias vantaxes. A máis obvia é que é un exemplo de revisión entre pares no mundo do software libre e axuda de maneira directa a manter a calidade do software. Cada erro que se empacota nunha aplicación chegou alí porque non foi detectado ao ser subido ao repositorio do código e, por iso, cantos máis ollos miren, máis erros van ser corrixidos. Mais a revisión do código tamén ten unha vantaxe indirecta: fai que a xente saiba que o que fan serve para algo, xa que un desenvolvedor non revisaría un commit se non estivese interesado polos seus efectos. A xente dá o mellor de si cando saben que os demais van avaliar o seu traballo.

As revisións deberían ser públicas. Mesmo cando estabe no mesmo cuarto que outro desenvolvedor e un de nós facía un commit, procurabamos non facer a revisión verbalmente no cuarto, senón enviala á lista de correo. Todo o mundo se beneficia de ver a revisión. A xente verá os comentarios e algunhas veces atopará erros neles; mais mesmo se non o fan, é algo que recorda que a revisión é unha actividade que se espera do grupo, como lavar os pratos ou cortar o céspede.

No proxecto Subversion non fixemos a revisión do código desde o inicio. Non había garantía ningunha de que un commit fose revisado, aínda que ás veces alguén podía revisar unha mudanza se estaba especialmente interesado nesa parte do código. Os erros incluídos puideron e deberon ter sido detectados. Un desenvolvedor chamado Greg Stein, quen coñecía a importancia da revisión do código por traballos anteriores, decidiu que ía sentar precedente mediante a revisión de cada liña de <emphasis>cada commit</emphasis> realizado sobre o repositorio do código do proxecto. Así, cada commit realizado viña seguido por un email de Greg á lista de correo dos desenvolvedores, diseccionándoo, analizando posibles problemas e ocasionalmente alabando un pedazo de código brillante. Desde o primeiro momento, empezou a a detectar erros e prácticas de código non óptimas que de outro modo se terían filtrado sen que ninguén se decatase. Hai que salientar que nunca se queixou de ser a única persoa que revisaba cada commit, aínda tendo en conta que lle levaba unha gran cantidade de tempo, e alababa as vantaxes da revisión do código cada vez que tiña ocasión. Máis xente, incluído eu mesmo, comezamos logo a revisar os commits regularmente. Cal foi a nosa motivación? Non foi que Greg se queixara porque nós non o fixeramos. A razón foi que demostrara que a revisión de código era unha actividade coa que se podía contribuír tanto ao proxecto como escribindo código novo. Unha vez o demostrou, convertiuse nun hábito do grupo, ata tal punto de que cada commit que non tiña ningún comentario provocaba que o desenvolvedor se preocupase e mesmo preguntase na lista de correo si alguén tivera a oportunidade de revisalo. Máis tarde, Greg comezou un traballo que non lle deixou moito tempo para colaborar co proxecto Subversion. Para entón, o hábito estaba tan interiorizado en cada un de nós como se tivese sido sempre así.

Comeza a facer revisións desde o primeiro commit. A clase de problemas que son máis sinxelos de detectar mediante a revisión de diffs son as vulnerabilidades de seguridade, fugas de memoria, comentarios insuficientes ou documentación da API, erros "off-by-one", incumprimento das regras de estilo e outros problemas que requiren un mínimo de contexto para seren vistos. Porén, mesmo problemas maiores tales como non abstraer patróns que se repiten poden ser vistos despois de que un teña feito revisións regularmente, xa que a memoria das mudanzas anteriores axuda na revisión dos presentes.

Non te preocupes se non puideres atopar nada sobre o que comentares, ou se non souberes o suficiente sobre cada área do código. Habitualmente hai cousas que dicir sobre cada commit; mesmo onde non atopes nada que cuestionar, podes atopar algo que gabar. O importante é deixares claro a cada commiter que o que fan é visto e comprendido. Desde logo, a revisión de código non absolve os programadores da responsabilidade de revisaren e probaren as súas mudanzas antes de subírenas ao repositorio; ninguén debería deixar que a revisión do código faga o traballo que un debería ter feito por si mesmo.

Cando publicares un proxecto que estiver pechado ata agora, ten presente a magnitude da mudanza

Se vas facer público un proxecto existente, un que xa ten desenvolvedores activos afeitos a traballaren nun ambiente pechado, asegúrate de que todo o mundo comprende que a apertura supón unha gran mudanza &mdash; e de que comprendes como se van sentir con ela.

Trata de imaxinar como é a situación para eles: ata esa altura, todas as decisións de deseño e código foron feitas por un grupo de programadores que coñecían o software máis ou menos igual, que recibiron as mesmas presións desde o mesmo equipo de xestión e que todos coñecen os puntos fracos e fortes dos seus compañeiros. A apertura do proxecto supón expor o código ao escrutinio de estranos, que se formarán xuízos de valor baseados unicamente no código, sen se preocuparen de que presións de negocio poden ter forzado a tomar certas decisións. Eses estranos van facer moitas preguntas, preguntas que van facer que os desenvolvedores se decaten de que a documentación na que tan duramente traballaran é <emphasis>aínda</emphasis> inadecuada (isto é inevitable). E máis aínda, os recén chegados son descoñecidos, entidades sen face. Se un dos teus desenvolvedores xa se sinte inseguro sobre as súas capacidades, imaxina como ese sentimento será exacerbado cando os recén chegados sinalen erros no código que escribiu, e aínda peor, diante dos seus colegas. A menos que teñas un equipo de perfectos programadores, isto é inevitable &mdash; de feito, probablemente lle ocorrerá a todos eles ao principio. Isto non se debe a que sexan malos programadores; é só que todo programa cunhas certas dimensións ten erros e a revisión entre pares deitará luz sobre algúns deles (ver <xref linkend="code-review"/><phrase output="printed"> anteriormente neste capítulo</phrase>). Ao mesmo tempo, os recén chegados non están baixo o mesmo nivel de revisión, xa que non poden enviar código ata que se familiarizaren co proxecto. Os teus desenvolvedores poden sentir como que todas as críticas van dirixidas a eles, pero ningunha para os demais. Así, existe o perigo de que se extenda un sentimento negativo entre o equipo.

O mellor modo de evitar esta sensación é tentar que todo o mundo saiba o que implica a mudanza, explicárllelo, dicirlles que o incomodo inicial é perfectamente normal e asegurarlles que co tempo a situación vaise normalizar. Algunhas desas recomendacións deben ser feitas en privado antes da apertura do proxecto. Mais pode ser mesmo útil recordarlle á xente a través das listas públicas que hai un novo modo de desenvolver o proxecto e que os axustes van levar tempo. O mellor que podes facer é liderar mediante o exemplo. Se non ves os teus desenvolvedores responderen a cuestións dos recén chegados, dicirlles que o fagan non será suficiente. Poden todavía non ter un bo sentido do que se debe responder e como, ou poden non ter claro como priorizar o traballo de codificación fronte ás novas tarefas de relacións externas. A maneira de que participen é participares ti mesmo. Estares presente nas listas de correo públicas e responderes algunhas preguntas axudará. Se non tiveres a experiencia para responderes algunha das preguntas, pásalla a un desenvolvedor que si a teña &mdash; e asegúrate de que aporte unha solución ou polo menos responda. De modo natural, os teus desenvolvedores realizarán moitos dos seus comentarios en privado, entre eles, xa que é como o acostumaban a facelo. Subscríbete ás listas de correo internas nas que isto poida ocorrer e suxire que tales debates sexan movidos á lista pública.

Hai outras cuestións a longo prazo que un debe ter en conta cando decide abrir un proxecto. <xref linkend="money"/> Explora as técnicas para envolver con suceso desenvolvedores pagados e voluntarios, e <xref linkend="legal"/> debate as dilixencias legais necesarias cando abrires un código que pode ter partes "propiedade" de terceiros.

Anunciar o proxecto

Unha vez o proxecto é presentable &mdash; non perfecto, só presentable &mdash; estás pronto para anuncialo ao mundo. Isto é un proceso sinxelo: vai a <ulink url="http://freshmeat.net/"></ulink>, pincha sobre <guimenuitem>Enviar</guimenuitem> na barra de navegación superior e preenche un formulario coas características do teu proxecto. Freshmeat é o lugar onde todo o mundo procura novos proxectos. Unicamente tes que facer que uns poucos ollos se fixen para que a noticia sobre o teu proxecto se expanda.

Se coñeces listas de correo ou foros onde a publicación do proxecto poida ser de interese, faino tamén aí, mais tenta escribires exactamente <emphasis>unha</emphasis> mensaxe por foro e dirixires a xente aos teus propios canais de comunicación para continuar a conversa (configurando o cabezallo <sistemitem>Reply-to</sistemitem>). As mensaxes debería ser curtas e directas:

To: discuss@lists.example.org
Asunto: [ANN] Proxecto Scanley: indexador de texto completo
Reply-to: dev@scanley.org

Esta mensaxe é para anunciar a creación do proxecto Scanley,
 un motor de indexado e porocura de texto completo open source cunha
API amplia, para ser usado por programadores que desexaren fornecer servizos de procura
de amplias coleccións de arquivos de texto. Scanley é funcional, está
baixo desenvolvemento activo e precísanse desenvolvedores e testeadores.

Páxina web: http://www.scanley.org/

Funcionalidades:
   - Procuras de texto plano, HTML e XML
   - Procura de palabras e/ou frases
   - (planeada) Fuzzy matching
   - (planeada) Actualización incremental dos índices
   - (planeada) Indexación de sitios web remotos

Requerimentos:
   - Python 2.2 ou superior
   - Espazo en disco suficiente para manter os índices (aproximadamente 2x
     o tamaño orixinal)

Para máis información, ver scanley.org.

Obrigado,
-J. Random

(Ver <xref linkend="publicity"/><phrase output="printed"> en <xref linkend="communications"/></phrase> para consellos sobre como anunciar futuras liberacións do proxecto e outros eventos.)

Hai un debate non pechado no mundo do software libre sobre se é preciso comezar con código que funcione ou se un proxecto se pode beneficiar das vantaxes da apertura nas etapas de deseño e debate. Eu acostumaba a pensar que o factor máis importante era comezar con código que funcionase, que iso era o que separaba os proxectos con suceso dos xoguetes e que os desenvolvedores serios unicamente eran atraídos por software que facía algo concreto.

Isto demostrou ser erróneo. No proxecto Subversion, comezamos cun documento de deseño, un grupo de desenvolvedores interesados e ben conectados, moita fanfarrada e <emphasis>sen</emphasis> código que funcionase. Para a miña sorpresa, o proxecto adquiriu participantes activos desde o primeiro momento e para cando tiñamos algo funcional, había uns cantos desenvolvedores voluntarios profundamente implicados no proxecto. Subversion non é o único exemplo; o proxecto Mozilla foi tamén lanzado sen código que funcionase e agora é un navegador web que ten suceso.

Ante tales evidencias, teño que retractarme das miñas palabras. Comezar con código que funcione é unha das mellores formas para atinxir o éxito e unha boa regra sería esperar ata que tiveres algo para anunciares o proxecto. Porén, poden existir ocasións onde anunciar o proxecto en fases máis previas teña sentido. Creo firmemente que é necesario polo menos un bo documento de deseño ou algunha clase de código marco &mdash; desde logo, pode ser revisado en público, mais ten que existir algo concreto, algo máis tanxible que só boas intencións para que á xente lle interese participar.

Cando fixeres o anuncio, non esperes que unha horda de voluntarios se unan ao proxecto de maneira inmediata. Habitualmente, o resultado da publicación é que tes unhas poucas preguntas, algunha xente se unirá ás listas de correo e todo continuará case coma sempre. Mais ao pasar o tempo, observarás incrementos graduais na participación tanto de usuarios como de desenvolvedores. O anuncio pode ser considerado meramente unha semente. A expansión da noticia pode demorar. Se o proxecto premiar eses que participaren, as noticias vanse estender rápidamente xa que á xente lle gusta compartir que atoparon algo que vale a pena. Se todo vai ben, as dinámicas de redes de comunicacións exponenciais transformaranse lentamente nunha comunidade complexa, onde non necesariamente vas coñecer todo o mundo nin vas poder seguir cada conversa. Os seguintes capítulos versan sobre como traballar nese entorno.