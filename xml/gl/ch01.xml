<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="">
   <para>Capítulo 1. Introdución</para>
   <para/>
   <para>Case todos os proxectos de software libre fracasan.</para>
   <para/>
   <para>Poucas veces nos chegan noticias dos fracasos. Os únicos proxectos que chaman a atención son os ben sucedidos, e o cantidade total de proxectos é tan elevada<footnote>
         <para>SourceForge.net, un aloxamento web moi conhecido, tinha rexistrados 79.225 proxectos a mediados de abril de 2004. Este número é moi inferior ao total de proxectos en activo, trátase unicamente dos que escolleron Sourceforge.</para>
      </footnote> que, embora só unha pequena porcentaxe sobreviven o fracaso, o número de sucesos é alto. E non nos chegan noticias dos fracasos porque un fracaso non é un acontecemento importante. </para>
   <para/>
   <para>Un proxecto non deixa de ser viable nunha altura concreta, máis ben pódese considerar que os membros vanse afastando pouco a pouco do mesmo e deixan de traballar nel. É posible que, nunha altura concreta, sexa feita unha mudanza definitiva no proxecto, mais é frecuente que os responsables non se decaten de que se trata da derradeira modificación ata tempo despois. Nin sequera existe unha definición clara de cando remata un proxecto. Cando pasan seis meses sen que ninguén traballe nel? Cando a base de usuarios deixa de medrar, sen ultrapasar a base de desenvolvedores? Que acontece se os desenvolvedores dun proxecto o abandonan porque se decatan de que están a duplicar o traballo de outros, e que acontece se adscriben a outro proxecto, e o amplían ata incluíren nel a maior parte do seu traballo anterior? Consideráse que o proxecto inicial rematou, ou que simplemente mudou de nome?</para>
   <para/>
   <para>Estas complicacións fan que sexa difícil especificar o número de proxectos que fracasan, mais a experiencia de máis de unha década no mundo do código aberto, unha pequena procura en SourceForge.net e un toque de Google lévanos a concluír que a procentaxe de fracasos é moi elevada, posiblemente de 90-95%.  Esta porcentaxe aumenta se incluírmos proxectos activos mais disfuncionais (aqueles que están a producir código operativo, mais que non son atractivos, ou cuxos avances non son tan rápidos ou fiables como deberían).</para>
   <para/>
   <para>O obxectivo desta obra é aprender como evitar o fracaso. Non se limita a examinar como facer as cousas ben, senón tamén como facelas mal, para que poidas decatarte dos problemas a tempo. Espero que este libro che forneza un repertorio de técnicas non só para evitares os atrancos máis frecuentes no desenvolvemento do código aberto, senón tamén para administrares o desenvolvemento e mantemento dun proxecto ben sucedido. O suceso non é un xogo de soma cero, e esta obra non explica como ganhar ou ultrapasar a concorrencia. Unha parte importante da xestión dun proxecto de código aberto é, de facto, traballar en harmonía con outros proxectos relacionados. A longo prazo, todo proxecto ben sucedido contribúe á saúde do software libre a nivel mundial. </para>
   <para/>
   <para>Podemos sentir a  tentación de dicir que os  os proxectos de software libre fracasan polos mesmos motivos que os proxectos de software propietario. Os requisitos irreais, as especificacións vagas, a xestión inadecuada de recursos, as fases de desenho insuficientes, ou calquera outro atranco non son patrimonio exclusivo do software libre, tamén son ben conhecidos por calquera que traballe na industria do software. Existen numerosas publicacións que tratan eses temas, así que non os vou comentar nesta obra; tratarei de describir os problemas exclusivos do software libre. Con frecuencia, o fracaso dun proxecto de software libre é debido a que os desenvolvedores (ou os administradores) non se decatan dos problemas que presenta o desenvolvemento de código aberto, embora sexan que de indentificar as dificultades, máis conhecidas, que presenta o desenvolvemento de código pechado.</para>
   <para/>
   <para>Un dos erros máis frecuentes é crearse expectativas irreais sobre as vantaxes do código aberto en sí mesmo. Unha licenza de código aberto non é garantía de que milleiros de desenvolvedores van participar no teu proxecto; nin liberar o código dun proxecto vai solucionar os problemas que este tiver. Antes ben, soe acontecer o contrario: liberar un proxecto pode acarretar novas dificultades, e ser máis custoso a curto prazo que se se mantiver en privado. Liberar un proxecto implica ordenar o código para que persoas alleas ao mesmo o poidan comprender, crear un sito web de desenvolvemento e listas de correo, e en moitos casos redactar documentación pola primeira vez, o que supón unha carga considerable de traballo. E, por suposto, se algúns desenvolvedores sí se prestan voluntarios, hai que resolver as súas dúbidas antes de comezar a ver os resultados do seu traballo. O desenvolvedor Jamie Zawinski dicía o seguinte sobre os duros comezos do proxecto Mozilla:</para>
   <para/>
   <para>O código aberto funciona, mais non é unha panacea. Podemos tirar a seguinte conclusión: non se pode coller un proxecto moribundo, botarlle os pós máxicos do «código aberto» e esperar que todo saia ben. O software é un terreo difícil, os problemas non son sinxelos. </para>
   <para/>
   <para>(de <ulink url="http://www.jwz.org/gruntle/nomo.html">http://www.jwz.org/gruntle/nomo.html</ulink>)</para>
   <para/>
   <para/>
   <para>Un problema que ten a ver con isto é a escasa importancia que se lle dá á presentación e á configuración dos pacotes, partindo da premisa de que sempre se pode facer máis adiante. A presentación a configuración dos pacotes envolven múltiples tarefas, todas elas encaminhadas a mellorar a accesibilidade. Para tornar o proxecto atractivo para os non iniciados, é necesario redactar documentación para os usuarios e os desenvolvedores, crear un Web do proxecto con información para os que acaban de chegar, automatizar a compilación e instalación o máximo posible, etc. Infelizmente, moitos programadores contemplan estas tarefas como algo secundario en comparación co código en si mesmo. Isto é debido a dous motivos principalmente. En primeiro lugar, pode parecer traballo inútil, xa que os máis beneficiados son aqueles que menos familiarizados están co proxecto, e viceversa; despois de todo, os desenvolvedores do código non necesitan os pacotes, porque xa saben como administrar, instalar  e utilizar o software, non hai que esquecer que o código foi escrito por eles. E en segundo lugar, as habilidades necesarias para configurar a presentación e os pacotes son frecuentemente moi distintas das habilidades necesarias para crear o código.  Os individuos tenden a concentrarse no que destacan, mesmo se facendo outra cousa na que tenhen menos destreza lle darían un maior pulo ao proxecto. O capítulo 2, INSERIR TÍTULO CAPÍTULO 2, fala de maneira detallada sobre a presentación e a configuración de pacotes, e explica por que é extremadamente importante darlles prioridade desde o inicio do proxecto. </para>
   <para/>
   <para>Outro erro común é crer que non se necesita xerir os proxectos de código aberto, ou pola contra, crer que as estratexias de xestión empregadas nos proxectos pechados terán o mesmo suceso se foren aplicadas a proxectos de código aberto. As tarefas de xestión dun proxecto de código aberto non sempre son aparentes, mais case sempre están, dunha maneira ou de outra, detrás dos proxectos ben sucedidos, como mostra un sinxelo experimento mental. Un proxecto de código aberto consta dun conxunto variable de programadores (ben conhecidos por seren unha turma anárquica de seu) que, na maioría dos casos, non se conhecen persoalmente, e que posiblemente participarán no proxecto por motivos distintos. O experimento mental consiste en imaxinar como acabaría un grupo destas características sen administradores. Se non intervir un milagre, desaparecería ou disolveríase logo. Os proxectos non avanzan de motu propio, por máis que quixeramos que así fose. Mais as tarefas de xestión, embora activas, adoitan ser informais, sutís e elementais. O único que mantén unido o grupo de desenvolvedores é a crenza de que xuntos poden chegar máis lonxe que por separado. A finalidade das tarefas de xestión é, principalmente, garantir que mantenhan esa crenza, establecendo reglas básicas de comunicación, asegurando que bos desenvolvedores non sexan marxinados debido a idiosincrasias persoais e, en xeral, tornando o proxecto atractivo para os desenvolvedores. A presente obra explica con detalle as técnicas específicas para atinxir estes obxectivos.</para>
   <para>En último lugar, existe unha categoría de problemas que se pode denominar «fracasos da navigación cultural». Hai dez anos, mesmo hai cinco, sería prematuro falarmos dunha cultura global do software libre, mais isto xa non é así. Unha cultura identificable apareceu de vagar e, embora non sexa monolítica (é tan propensa a sufrir discordancias internas e sectarismos como calquera outra cultura asociada a un lugar xeográfico), posúe un núcleo razonablemente sólido. A maior parte dos proxectos de software libre comparten unha ou varias das características deste núcleo: recompensan certo tipo de comportamentos e condenan outros, crean unha atmosfera que invita á participación espontánea (ás veces a expensas dunha coordinación central), a súa visión do que é correcto ou incorrecto pode diferir notablemente da visión maioritaria noutros ámbitos. E, sobre todo, moitos dos colaboradores a longo prazo xa interiorizaron estas características, polo que comparten un certo consenso sobre cal debe ser a conducta a seguir. Os proxectos que fracasan soen afastarse dese núcleo, aínda que o fagan inconscientemente, e xeralmente carecen de ese consenso a respecto do comportamento que cabe esperar. Cando aparecen os problemas, a situación pode empeorar rapidamente, xa que os participantes carecen dos reflexos culturais nos que apoiarse para resolveren a súas diferenzas.</para>
   <para/>
   <para>Este libro é unha guía práctica, non unha historia nin un estudo antropolóxico. Porén, uns certos conhecementos útiles sobre as orixes da cultura do software libre actual constitúen o alicerce fundamental de calquera consello práctico. Un  individuo con conhecementos sobre esta cultura pode chegar lonxe no mundo do software libre; atopará multitude de peculiaridades e «dialectos», mais poderá participar comoda e eficazmente en calquera lugar. En troca, un individuo que non comprenda esta cultura, atopará o proceso de organización ou participación nun proxecto difícil e cheo de sorpresas. Dado que o número de desenvolvedores de software continúa a aumentar, hai moita xente nesta última categoría. É esta unha cultura de inmigrantes recentes, e continuará a selo durante un tempo. Se pensas que es un destes últimos, a seguinte sección proporcionarache conceptos básicos útiles para posteriores discusións, tanto na presente obra como en Internet. (Por outra banda, se levas tempo traballando con código aberto, é posible que saibas moito sobre a súa historia, e talvez desexes saltar a seguinte sección). </para>
   <para/>
   <para/>
   <para>Historia</para>
   <para/>
   <para>O feito de compartir software é tan vello como o propio software. Nos inicios da era dos computadores, os fabricantes crían que as vantxes competitivas dependían das innovacións no terreo do hardware, e en consecuencia non contemplaban o software como un factor de negocio. Moitos dos compradores deses computadores eran cientistas e técnicos, capaces de modificar e ampliar o software que acompanhaba as máquinas. Con frecuencia, os clientes enviasen as súas versións non só aos fabricantes, senón tamén a outros propietarios de computadores semellantes. Os fabricantes soían tolerar e mesmo alentar este comportamento: para eles, as melloras feitas no software, sen importar por quen, tornaban o compoutador máis atractivo para outros clientes potenciais.</para>
   <para/>
   <para>Aínda que este período inicial se asemella á cultura do software libre actual en moitos aspectos, diferénciase desta en dous puntos fundamentais. En primeiro lugar, a compatibilidade entre equipos era mínima (esta etapa caracterizouse por unha innovación constante no desenho dos computadores, mais debido á diversidade de arquitecturas case ningún equipo era compatible co resto), polo que o software escrito para un equipo poucas veces servía para outros. Os programadores soían adquirir experiencia nunha arquitectura ou familia de arquitecturas determinada (na actualidade é frecuente que se especializen nunha linguaxe ou nunha familia de linguaxes de programación en particular, coa convicción de que as destrezas adquiridas poderán ser transferidas a calquera tipo de hardware co que tiveren que traballar). Dado que as destrezas dun individuo soían estar confinadas a un tipo concreto de computador, a acumulación de destrezas tornaba ese equipo máis atractivo para o resto dos seus colegas. A expansión deses conhecementos e dos códigos específicos para cada equipo beneficiaban por tanto os intereses dos fabricantes. </para>
   <para/>
   <para>En segundo lugar, non había Internet. Embora as restriccións legais sobre o acto de compartir fosen menores que hoxe, as restriccións de carácter técnico eran maiores: trasladar datos de un sitio a outro era, en termos relativos, incómodo e custoso. Existían pequenas redes locais, idóneas para compartir información entre os empregados dunha mesma empresa ou laboratorio de investigación, mais era necesario superar barreiras para compartir material co resto da xente, sen importar onde vivisen. Estas barreiras eran superadas en moitos casos: ás veces algúns grupos contactaban con outros de maneira independente, e trocaban discos ou fitas por correo,  ás veces os propios fabricantes obraban como intermediarios na elaboración de remendos (patches). Tamén axudou o feito de que moitos dos primeiros desenvolvedores informáticos pertencesen ao ámbito universitario, onde é frecuente publicar os novos avances. Mais a realidade física da transmisión de datos dificultaba o acto de compartir, tanto máis canto maior fose a distancia (real ou en termos organizativos) que tivese que cruzar o software. O acto de compartir a gran escala e con facilidade, como o conhecemos hoxe, era imposible.</para>
   <para/>
   <para/>
   <para>A aparición do software  privativo e do software libre</para>
   <para/>
   <para/>
   <para>Ao ir madurando a industria, tiveron lugar de maneira simultánea mudanzas que estaban interrelacionadas. A enorme diversidade de desenhos de hardware foi desaparecendo en favor duns poucos vencedores, que se impuxeron mercé de unha tecnoloxía superior, mellor publicidade ou unha combinación de ambos. Nesa altura, e non de maneira casual, o desenvolvemento das chamadas linguaxes de programación de «alto nivel» permitiron que programas escritos nunha linguaxe puidesen ser traducidos automaticamente («compilados») e utilizados en distintos computadores. Os fabricantes decatáronse logo das posibilidades deste método: un cliente podía levar a cabo un gran esforzo de creación de software sen restrinxirse a unha arquitectura determinada. Se combinarmos o anterior coa cada vez menor diferencia de rendemento entre os distintos computadores, consecuencia da desaparición dos desenhos menos eficientes, os fabricantes que contemplaban o seu hardware como o seu único activo enfrontábanse a unha futura reducción da súa marxe de beneficios. O rendemento bruto das máquinas estaba a se tornar nun ben funxible, en canto o software estaba a se tornar no elemento diferenciador. A venda de software, ou polo menos a súa integración na venda de hardware, tornouse nunha boa estratexia. </para>
   <para/>
   <para>Como consecuencia do anterior, os fabricantes comezaron a imponher dereitos autorais  cada vez máis estrictos sobre o seu código, dado que os usuarios, se continuaren a compartir e modificar o código entre eles, poderían chegar a reimplementar algúns dos avances comercializados como «valor engadido» polo distribuidor. Ironicamente, todo isto aconteceu na altura en que Internet comezaba a coller folgos. Apenas o acto de compartir software comezaba a ser posible desde o punto de vista técnico, cando o as mudanzas no negocio dos computadores o tornaron en algo pouco desexable desde o punto de vista económico, polo menos desde o pounto de vista de calquera empresa a nivel individual. Os fornecedores impediron o acceso, ben negándolle o acceso ao código aos utentes dos seus equipoa, ben imponhendo acordos de non divulgación que imposibilitaban o acto de compartir.</para>
   <para/>
   <para/>
   <para>A resistencia consciente</para>
   <para/>
   <para>En canto desaparecía o universo do código sen restriccións, un programador reaccionou ante este feito. Richard Stallman traballaba no Laboratorio de Intelixencia Artificial do Instituto Tecnolóxico de Massachussets (MIT) na década dos 70 e inicios dos 80, durante o que  viu a verificarse a mellor época e o mellor lugar para quen quixese compartir código.  No laboratorio de IA reinaba unha forte «ética hacker<footnote>
         <para>Stallman emrpega a palabra «hacker» co significado de «alguén que adora programar e goza sendo bo», non co significado relativamente recente de «alguén que accede de maneira ilexítima a outros computadores».</para>
      </footnote>», e animábase os traballadores a compartiren calquera mellora que fixesen no sistema. Tempo despois, o propio Stallman escribiu:</para>
   <para/>
   <para>Non chamabamos o noso software «software libre» porque o termo aínda non existía, mais era exactamente software libre. Cando calquera persoa de outra universidade ou empresa quería levar e utilizar un programa, dabamoslle permiso encantados. Se vías alguén traballar cun programa novidoso e interesante, podías perdirlle que che deixase ver o código fonte, para poder mudalo ou copiar partes e facer un programa novo.</para>
   <para/>
   <para>(de <ulink url="http://www.gnu.org/gnu/thegnuproject.html">http://www.gnu.org/gnu/thegnuproject.html</ulink>)</para>
   <para/>
   <para>Esta comunidade idílica desapareceu pouco despois de 1980, cando as mudanzas que tiveran lugar no resto do mundo chegaron ao Laoboratorio de IA. Unha empresa de recente creación contratou a maior parte dos programadores do Laboratorio para traballaren nun sistema operativo moi semellante a aquel co que traballaran na etapa anterior, mais esta vez baixo licenza exclusiva. Na mesma altura,  o laboratorio de IA adquiriu unha serie de equipos que xa traían un sistema operativo propietario. </para>
   <para/>
   <para>Stallman reconheceu un padrón na cadea de acontecementos:</para>
   <para/>
   <para>Os computadores modernos naquela altura, como o VAX ou o 68020, posuían os seus propios sistemas operativos, mais non se trataba en ningún caso de software libre, xa que estabas obrigado a asinar un acordo de non divulgación mesmo para obter unha copia executable. </para>
   <para/>
   <para>Así, o primeiro paso para utilizar un computador pasaba por negarlle axuda ao vecinho, era proibida  a existencia dunha comunidade de cooperación.  A norma imposta polos donos do software propietario era: «se queres compartir co teu vecinho, es un pirata; se quixeres modificar algo, préganos que o fagamos nós».</para>
   <para/>
   <para>Algo dentro del opúxose a esta tendencia. En troca de continuar co seu traballo no (agora moi debilitado) Laboratorio de IA, ou de dixitar código nunha das novas companhías, onde o produto do seu traballo ficaría fechado nunha caixa, deixou o Laboratorio e iniciou o Proxecto GNU e a Fundación polo Software Libre (FSF). GNU<footnote>
         <para>GNU son as siglas de «GNU Non é Unix», onde «GNU» quere dicir... exactamente o mesmo. Trátase dun acrónimo recursivo (N. do T.).</para>
      </footnote> procuraba desenvolver un sistema operativo  e un conxunto de aplicacións  completamente libres e gratuitas, que os usuarios puidesen hackear e compartir as modificacións que fixesen.  Estaba a recrear, en esencia, o que se perdera no Laboratorio de IA, mais a escala mundial e sen as vulnerabilidades que tornaran a cultura do Laboratorio de IA en algo susceptible de desaparecer. </para>
   <para/>
   <para>Para alén de traballar no novo sistema operativo, Stallman creou unha licenza de dereitos autorais cuxos termos garantían que o seu código ficaría libre para sempre. A Licenza Pública Xeral da GNU (GPL) constitúe unha obra maxistral de enxenharía legal: establece que o código pode ser copiado e modificado sen restricións de ningún tipo, e que tanto as copias como os produtos derivados (por exemplo, as versións modificadas) deben ser distribuidas baixo a mesma licenza que o orixinal, sen ningunha clase de restricións adicionais. O que fai é aproveitarse das leis autorais para atinxir o efecto contrario ao que perseguen as leis autorais tradicionais: en troca de limitar a distribución do software, evita que calquera, mesmo o autor, a limite. Stallman considerou que este sistema era mellor que limitarse a entregar o seu código ao dominio público. Se for de dominio público, calquera copia particular do mesmo podería ser incorporada a un programa propietario (como xa aconteceu con código protexido por licenzas autorais permisivas). Embora tal incorporación non afectaría en absoluto á disponibilidade do código, si implicaría que os esforzos de Stallman poderían beneficiar o inimigo, o software propietario. A GPL pode ser contemplada como unha medida protectora do software libre, en canto evita que o software non libre tire vantaxes do código protexido pola GPL. O capítulo 9, TÍTULO DO CAPÍTULO 9, analiza a GPL e a súa relación con outras licenzas de software libre.</para>
   <para/>
   <para>Coa axuda de numerosos programadores, algúns dos que compartían a ideoloxía de Stallman e outros que simplemente querían que houbese unha gran cantidade de código libre en circulación, o proxecto GNU comezou a publicar substitutos libres da maior parte dos componentes fundamentais dun sistema operativo. A estandarización actual de hardware e software, amplamente estendida, posibilitou a utilización de substitutos GNU en sistemas non libres, algo do que se beneficiou moita xente.  O editor de texto da GNU (Emacs) e o compilador C (GCC) tiveron un suceso especial, e gozaron de unha gran aceptación non por motivos ideolóxicos, senón pola súa perfección técnica. Por volta de 1990, a GNU producira a maoir parte dun sistema operativo, excepto o núcleo (kernel), a parte da máquina responsable do arranque, de administrar a memoria, o disco e outros recursos do sistema.  </para>
   <para/>
   <para>Infelizmente, o proxecto GNU seleccionara un núcleo (kernel) cuxa implementación deu en ser máis complexa do que se esperara. A demora impediu que a Fundación polo Software Libre lanzase a primeira versión dun sistema operativo completamente libre. A derradeira peza foi colocada por Linus Torvalds, estudante finés de ciencias da computación quen, axudado por voluntarios de todo o mundo, completara un núcleo libre de desenho máis tradicional. Púxolle o nome de Linux, e cando foi combinado cos programas GNU existentes, deu orixe a un sistema operativo totalmente libre. Pola primeira vez era posible ligar o computador e traballar sen utilizar software propietario<footnote>
         <para>Linux non foi o primeiro, con anterioridade fora lanzado un sistema operativo libre para computadores compatibles con IBM chamado 386BSD, mais era moito máis difícil de configurar. O suceso de Linux non foi debido unicamente ao feito de  ser libre, senón tamén a que funcionaba -na maior parte dos casos.  </para>
      </footnote>.</para>
   <para/>
   <para>Unha grande parte do software deste sistema operativo non foi producido polo proxecto GNU. De facto, a GNU non era o único grupo que estaba a traballar na produción dun sistema operativo libre (por exemplo, o código que co tempo desembocou en NetBSD e FreeBSD xa estaba en proceso de desenvolvemento nesta altura). A relevancia da Fundación polo Software Libre non se limita ao código que creou, senón que se estende tamén á súa retórica política. O feito de que contemplasen o software libre como unha causa e non como un produto despertaba unha certa conciencia política nos programadores. Mesmo aqueles que non concordaban cos postulados da FSL víanse na obriga de participaren no debate, aínda que só fose para manifestaren unha opinión diverxente. A efectividade da FSF como órgano propagandístico radicaba no feito de vincularen o código a unha mensaxe, coa axuda da GPL entre outros. Ao estenderse o código, estendeuse tamén a mensaxe.</para>
   <para/>
   <para/>
   <para>Resistencia accidental</para>
   <para/>
   <para>Porén, os inicios do software libre foron unha época de gran actividade, e poucas accións tinhan un componhente ideolóxico tan explícito como o Proxecto GNU de Stallman. Un dos movementos máis destacados foi a Berkeley Software Distribution (BSD), unha reimplementación gradual do sistema operativo UNIX (que ata finais dos 70 foi un proxecto de investigación  da AT&amp;T de carácter lixeiramente propietario) xerido por programadores da Universidade de California en Berkeley. A turma da BSD non fixo declaracións de carácter político sobre a necesidade de os programadores se uniren e compartiren entre eles, mais puxeron a idea en práctica con talento e entusiasmo, coordinando un esforzo desenvolvedor distribuido no que os intérpretes de comandos e as librerías de códigos, e despois o propio núcleo do sistema operativo, foron reescritos desde cero, principalmente por voluntarios. O proxecto BSD tornouse no exemplo perfecto de desenvolvemento de software libre sen vinculacións ideolóxicas, e tamén lle serviu de adestramento a moitos desenvolvedores que pasaron a traballar no mundo do código aberto.</para>
   <para/>
   <para>Outro crisol de desenvolvemento cooperativo foi o X Window System, un entorno gráfico de computación libre e transparente, desenvolvido polo MIT a mediados dos 80 en colaboración con distribuidores de hardware interesados en ofrecer un sistema de xanelas aos seus clientes. Lonxe de oponherse ao sistema propietario, a licenza X permitía engadir extensións propietarias ao núcleo libre de maneira deliberada (cada un dos membros do consorcio quería ter a oportunidade de perfeccionar a distribución X, obtendo así unha vantaxe competitiva sobre o resto dos membros). X Windows<footnote>
         <para>Prefiren chamalo «X Window System», mais na práctica emprégase o nome «X Windows» por simple comodidade. </para>
      </footnote> era software libre en si mesmo, mais o seu obxectivo era igualar as condicións de xogo entre intereses empresariais, non ponher fin ao dominio do software propietario. Outro exemplo que se anticipou ao proxecto GNU nuns poucos anos foi TeX, un sistema de tipografía de calidade profesional creado por Donald Knuth e publicado baixo unha licenza que permite modificar e distribuír o código, mais proíbe referirse a esas novas versións como TeX a menos que superen unha serie de probas de compatibilidade moi estrictas (trátase dun exemplo de licenza libre con «protección da marca comercial», das que falarei en maior profundidade no capítulo 9, TÍTULO CAP 9). Knuth non se posicionou no debate software libre versus software propietario, simplemente necesitaba un sistema tipográfico mellor para atinxir o seu auténtico obxectivo (un libro sobre programación de computadores) e non viu motivo ningún para non ponher o seus sistema ao alcance do resto do mundo unha vez rematase. </para>
   <para/>
   <para>Sen enumerar todos os proxectos e licenzas, pódese dicir que, a finais dos 80, existía unha gran cantidade de software libre baixo unha ampla variedade de licenzas. Esta diversidade de licenzas correspondíase cunha gran diversidade de motivacións. Mesmo algúns dos programadores que escolleran a GNU GPL tinhan menos motivacións ideolóxicas ca o propio proxecto GNU. Embora traballasen con gusto con software libre, moitos desenvolvedores non percibían o software poropietario como un mal social. Había quen sentía o compromiso moral de librar o mundo do «software acaparador» (termo coinado por Stallman para referirse ao software non libre), mais a outros animábaos o carácter técnico dos proxectos, ou traballar con colegas con esquemas mentais semellantes, outros simplemente ambicionaban a gloria. Con todo, esta gran variedade de motivacións non entraban en conflicto entre elas. A causa radica en que o software, a diferenza de outras modalidades creativas como a prosa ou as belas artes, debe superar probas moderadamente obxectivas para ser considerado ben sucedido: debe funcionar, e non pode presentar demasiados erros (bugs). Isto proporciónalles aos participantes nun proxecto unha especie de base común, un motivo e un marco para cooperaren sen se preocuparen de demasiados detalles de outro carácter que non sexa o técnico. </para>
   <para/>
   <para>Os desenvolvedores tenhen aínda outro motivo para traballaren xuntos: veuse a demostrar que o universo do software libre estaba a crear código de moi boa calidade, que nalgúns casos mesmo chegaba a superar a outras alternativas non libres desde o punto de vista técnico; noutros casos era polo menos igual de bo, e por suposto sempre máis barato. Mentres que só unhas poucas persoas se sentían motivadas a empregar software libre por motivos puramente filosóficos, un gran número de individuos o empregaban porque funcionaba mellor, e unha porcentaxe dos que o utilizaban estaban dispostos a doar o seu tempo e habilidades para axudar a manter e a mellorar o software.</para>
   <para/>
   <para>Esta tendencia cara a produción de código de calidade non era universal, mais estaba a ganhar cada vez maior presenza nos proxectos de software libre a nivel mundial. Os negocios que dependían moito do software comezaron a decatarse diso, e moitos deles descubriron que xa estaban a utilizar software libre en tarefas do día a día, sen sabelo (os xestores de alto nivel moitas veces non saben o que fai o departamento de TI). As corporacións comezaron a tomar parte de maneira máis activa e aberta en proxectos de software libre. Os beneficios derivados podían, nalgúns casos, multiplicar varias veces o investimento inicial. A empresa contrata unicamente un pequeno grupo de programadores expertos para traballaren a tempo enteiro no proxecto, mais benefíciase das contribucións de todo o mundo, voluntarios e programadores contratados por outras companhías incluidos. </para>
   <para/>
   <para/>
   <para>«Código libre» fronte a «código aberto»</para>
   <para/>
   <para>Á medida que aumentou o interese das corporacións polo software libre, os programadores enfrontáronse a novos retos de presentación, un dos cales era a propia palabra «libre». Ao escoitaren o termo «libre» pola primeira vez, moita xente cre que se trata simplemente de «software gratuíto»<footnote>
         <para>O  adxectivo «free», presente na expresión «free software», pode significar tanto «libre» como «gratuíto», o que explica a confusión (N. do T.).</para>
      </footnote>. É certo que todo o softare libre é gratuíto<footnote>
         <para>Pódese cobrar un montante pola distribución de copias de software libre, mais dado que non se pode impedir que os compradores o distribúan posteriormente gratis, o prezo fica anulado. </para>
      </footnote>, mais non todo o software gratuíto é libre.  Por exemplo, na altura da guerra dos navigadores, nos anos 90, tanto Netscape como Microsoft regalaban copias dos seus respectivos navigadores co ánimo de ampliar a súa cota de mercado, mais en ningún caso se trataba de «software libre». Non se podía acceder ao código fonte, e se alguén o conseguía, non tinha dereito a modificalo nin a redistribuílo<footnote>
         <para>O código fonte do Netcape Navigator foi liberado  baixo licenza de código aberto en 1998, e tornouse nos alicerces do que sería o navegador Mozilla. Ver: http://www.mozilla.org/. </para>
      </footnote>. O único que podía facer era descargalo como ficheiro executable e abrilo. Estes navigadores eran tan libres como calquera programa comprado na tenda, a única diferencia era o prezo.</para>
   <para/>
   <para>A confusión causada pola palabra «free» é debida a unha ambigüidade do adxectivo en inglés. A maior parte das demais linguas diferencian entre a liberdade e o barato (a distinción entre gratis e libre é obvia para calquera falante dunha lingua romance, por exemplo). Mais o estatus que o inglés ten como lingua franca da Internet implica que un problema co inglés é, ata certo punto, un problema para todo o mundo. A confusión creada pola palabra «free» estaba tan estendida que o programadores crearon unha fórmula explicativa: «It's free as in freedom- think free speech, not free beer» (libre de liberdade, pensa en «discurso libre», non en «cervexa gratis»). Contodo, ter que explicalo constantemente cansa, e moitos programadores opinaban, con razón, que a palabra «free» impedía que a xente comprendese as características dese software. </para>
   <para/>
   <para>Mais as raíces do problema eran máis profundas, xa que a palabra «libre»  posuía connotacións morais evidentes: se a liberdade constituía un fin en sí mesma, era indiferente que o software libre fose superior, ou máis rentable para determinados negocios en determinadas circunstancias. Estes eran simplemente efectos colaterais positivos dunha empresa que non era, en esencia, nin técnica nin mercantil, senón simplemente moral. Aínda máis, a filosofía «free as in freedom» (libre de liberdade) presentaba un problema de conciencia para as empresas que desexaban apoiar programas específicos de software libre, pero que ao mesmo tempo querían continuar a vender software propietario.</para>
   <para/>
   <para>Estes dilemas aterraron nunha comunidade que xa era propensa de seu ás crises de indentidade. Os programadores que producen software libre nunca foron unánimes a respecto de cal debería ser o obxectivo común do movemento polo software libre, se houber algún. Mesmo dicir que as opinións van de un estremo ao outro crearía confusión, xa que daría a entender a existencia de unha gradación linear en lugar da distribución multidimensional que existe na realidade. Porén, pódense distinguir dúas grandes categorías ideolóxicas, se ignorarmos as sutilezas polo momento. Uns comparten o punto de vista de Stallman de que que a liberdade de compartir e facer modificacións é o máis importante, e se perdérmonos de vista a liberdade, non atenderiamos ao elemento principal. Outros cren que o software en sí mesmo constitúe a baza principal, e séntense incómodos ao identificaren o software propietario como algo malo de seu. Algúns programadores, mais non todos, cren que o autor (ou o contratista, se o traballo for remunerado), debería ter control sobre a distribución, e que a escolla dos termos non debería ficar supeditada a xuízos morais de ningún tipo.</para>
   <para/>
   <para>Estas diferenzas non requeriron unha análise detallada nin unha articulación profunda durante moito tempo, mais o auxe do software libre no mundo dos negocios mudou esta situación. O termo código aberto (open source) foi creado en 1998 como alternativa ao termo «libre» (free) por un grupo de programadores que daría orixe á Iniciativa do Código Aberto (OSI<footnote>
         <para>A páxina da OSI é: http://www.opensource.org/.</para>
      </footnote> polas siglas en inglés).  Para a OSI, non só o termo «sofware libre» (free software) era potencialmente confuso, senón que a propia palabra «libre» (free) era un sintoma dun problema máis amplo, concretamente, de que o movemento necesitaba unha campanha de marketing para tornalo atractivo ante os ollos do mundo empresarial, e que falar de aspectos morais e dos beneficios sociais de compartir non espertarían interese nas reunións de executivos. Nas súas propias palabras:</para>
   <para/>
   <para>A Iniciativa do Código Aberto é unha campanha de marketing de software libre. Dálle un pulo ao «software libre» desde unha visión pragmática, sen recorrer a discursos ideolóxicos inflamados. A esencia segue a ser a mesma, mais a actitude derrotista e o simbolismo mudaron. […]</para>
   <para/>
   <para>O que hai que lograr que comprendan a maior parte dos especialistas non é o concepto de código aberto, senón o nome. Por que non chamalo, como fixemos sempre, software libre?</para>
   <para/>
   <para>Un dos motivos principais é que o termo «software libre» (free software) crea tal confusión que pode propiciar conflictos...</para>
   <para/>
   <para>Mais a mudanza de nome é de carácter puramente mercantil, xa que queremos trasladar as nosas ideas ao mundo empresarial. Disponhemos dun producto excelente, mais a nos posición no pasado era desastrosa. Os executivos non comprenden o significado real do termo «software libre», identifican o desexo de compartir con estratexias anticomerciais, ou aínda peor, con roubar.</para>
   <para/>
   <para>A maior parte dos grandes executivos nunca van comprar «software libre». Mais se collermos a mesma tendencia, a mesma xente e as mesmas licenzas, e mudarmos o nome para «código aberto», si van comprar. </para>
   <para/>
   <para>Para algúns hackers é difícil de crer, porque son especialistas que pensan en termos concretos e substanciais e que non comprenden a importancia da imaxe cando se quere vender algo.</para>
   <para/>
   <para>No marketing, as apariencias son a realidade. Aparentar que temos vontade de saír das barricadas e de cooperar co mundo empresarial é tan importante como os nosos principios, as nosas conviccións e o noso software. </para>
   <para/>
   <para>(de http://opensource.feratech.com/advocacy/faq.php e http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing) </para>
   <para/>
   <para>No téxto pódense enxergar vestixios de controversia. Fai referencia a «as nosas conviccións», mais evita con habilidade concretar en que consisten esas conviccións. Algúns pensarán que as conviccións tenhen a ver con que o código desenvolvido nun proceso aberto vai ser mellor; outros, que defenden que toda a información debe ser compartida. Fálase de «roubar» para referirse (presuntamente) ás copias ilegais, un concepto co que moita xente discrepa, xa que o elemento copiado segue en posesión do propietario orixinal despois de feita a copia. O texto deixa entrever que o movemento polo software libre pode ser acusado erroneamente de anticomercialismo, mais deixa no aire a cuestión de se tais acusacións son lexítimas.</para>
   <para/>
   <para>Con isto non quero dicir que o web da OSI sexa incoherente ou conduza a equivocacións, non é así. Máis ben, trátase dun exemplo perfecto das carencias que ten o movemento polo software libre, e que a OSI leva tempo denunciando; en concreto, unha boa estratexia de marketing, onde por «boa» se entende «viable no mundo empresarial». A Iniciativa polo Código Aberto forneceulle a moita xente o que estaban a procurar, un vocabulario que permite falar sobre o software libre como unha metodoloxía de desenvolvemento e unha estratexia empresarial, en troca de  unha cruzada moral. </para>
   <para/>
   <para>A creación da Iniciativa polo Código Aberto mudou a paisaxe do software libre. Formalizou unha dicotomía que ficara anónima durante moito tempo, o que forzou o movemento a reconhecer que posuía unha política tanto interna como externa. Como resultado, hoxe en día, ambas partes tenhen que atopar un elemento común, xa que programadores de ambas faccións colaboran en moitos proxectos, e hai participantes que non poden ser adscritos a ningunha das dúas categorías. Isto non quere dicir que non se fale de motivacións de carácter moral (ás veces advírtese de problemas coa «ética hacker» tradicional, mais é infrecuente que un desenvolvedor de software libre/código aberto cuestione abertamente as motivacións do resto de persoas que participan no proxecto). A contribución é o que prevalece, se alguén escribe bo código non lle preguntas se o fai por conviccións morais, porque cobra por iso, porque quere ter un bo currículo, etc. A contribución é avaliada en termos técnicos, e respóndese en termos técnicos. Mesmo organizacións cunha política explícita como o proxecto Debian, cuxo obxectivo é ofrecer un entorno de computacion 100% libre, non ponhen impedimentos á hora de traballar con código non libre e de cooperar con programadores que non comparten os seus obxectivos. </para>
   <para/>
   <para>A situación actual</para>
   <para/>
   <para>Ao xestionares un proxecto de software libre non terás que tratar temas filosóficos tan profundos con frecuencia. Os programadores non van esixir que todos os participantes do proxecto compartan as súas ideas en todos os ámbitos (os que si o fan decátanse logo de que non poden colaborar en ningún proxecto). Mais tes que ser consciente da existencia das diferencias entre «software libre» e «código aberto», en parte para evitares ferir a sensibilidade de algúns dos colaboradores, e en parte tamén porque comprender as motivacións dos desenvolvedores é o mellor xeito (e ata certo punto o único) de xerir un proxecto.</para>
   <para/>
   <para>O software libre é unha cultura de libre elección, e para desenvolvéreste nela con suceso tes que comprender os motivos que levan a determinadas persoas a desexaren ser parte da mesma. A coerción non funciona; se os colaboradores dun proxecto non estiveren contentos co mesmo migrarán a outro. Un dos aspectos máis salientables do software libre, mesmo entre comunidades de voluntarios, é a pouca dedicación que esixe. A maioría dos colaboradores dun proxecto non se conhecen persoalmente, e limítanse a doar parte do seu tempo cando lles apetecer. Os condutos habituais de interacción entre os seres humanos vense reducidos a un único elemento: a palabra escrita, propagada a través de circuitos electrónicos. A consecuencia disto pode pasar moito tempo ata que se forma un grupo comprometido e, de igual maneira, é fácil perder voluntarios potenciais nos cinco primeiros minutos de «conversa». Se un proxecto non causar unha boa primeira impresión, os recén chegados rara vez lle dan unha segunda oportunidade. </para>
   <para/>
   <para>A volatilidade (ou mellor dito a volatilidade potencial) das relacións é quizais o maior desafío ao que se enfrontan os proxectos nas súas fases iniciais. Que vai manter a toda esa xente unida o bastante como para produciren algo de utilidade?. A resposta a esta pregunta é o bastante complexa como para ocupar o resto desta obra, mais se tivermos que resumila nunha oración, diría así:</para>
   <para>Os colaboradores deberían percibir que a súa implicación nun proxecto e a súa influencia sobre o mesmo son directamente proporcionais ás súas aportacións.</para>
   <para/>
   <para>Ningún grupo de desenvolvedores, ou de desenvolvedores en potencia, debería sentirse discriminado por razóns de carácter non técnico. É obvio que os proxectos que contaren con patrocinio empresarial e/ou desenvolvedores asalariados deben prestar especial coidado neste sentido, como se explica no capítulo 5 INSERIR TITULO CAPITULO 5. Isto non quere dicir que se non houber patrocinio empresarial non hai nada de que se preocupar; o dinheiro non é máis ca un dos múltiples factores que poden afectar o suceso dun proxecto. Tamén hai cuestións como que linguaxe empregar, que licenza, que proceso de desenvolvemento, que tipo de estrutura  vai ser implementada, como publicitar a creación do proxecto de maneira eficaz, e moitas máis. O próximo capítulo explica como iniciar un proxecto con bo pé.</para>
   <para/>
   <para/>
</article>