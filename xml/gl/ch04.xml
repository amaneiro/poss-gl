<chapter id="social-infrastructure">

<title
>Infraestrutura social e política</title>

<simplesect>

<para
>Xeralmente, as primeiras cuestións que a xente acostuma facer sobre o software libre son: Como traballa?Que mantén un proxecto activo?Quen toma as decisións? Eu sempre me dou por satisfeito con respostas conciliadoras sobre meritocracia, o espírito de cooperación, o código fala por si mesmo, etc. O feito é que a cuestión non é fácil de responder. Meritocracia, cooperación e executar código son parte deste, mais non chegan a explicar como os proxectos funcionan no día a día, e non din nada sobre como son resoltos os conflitos.</para>

<para
>Este capítulo trata de mostrar a estrutura subxacente que os proxectos de éxito teñen en común. Refírome a "éxito" non só en termos de calidade técnica, senón tamén á saúde operacional e de supervivencia. Saúde operacional é a capacidade efectiva do proxecto de incorporar as novas contribucións de código e novos desenvolvedores, e para dar resposta aos informes de erros. Supervivencia é a capacidade do proxecto de existir independentemente dalgún participante ou patrocinador, entendendo isto como a probabilidade de que o proxecto continúe, ata se todos os seus membros fundadores tivesen que pasar a outras cousas. O éxito técnico non é difícil de atinxir, mais sen unha base robusta de desenvolvemento e base social, un proxecto pode ser incapaz de manexar o crecemento que trae o éxito inicial ou a saída de persoas carismáticas.</para>

<para
>Hai varios xeitos de lograr este tipo de éxito. Nalgúns casos supón dispoñer dunha estrutura formal de goberno, na que se resolven os debates, convídanse (ou expúlsanse) novos desenvolvedores, planifícanse novas características, etc. Outros requiren dunha estrutura menos formal, mais tense que facer un esforzo maior de autocontrol para producir unha atmosfera de equidade na que a xente pode confiar coma unha  forma de goberno <foreignphrase
>de facto</foreignphrase
>. Ambas formas conducen ao mesmo resultado: un sentimento de permanencia institucional, apoiado por hábitos e procedementos que son entendidos por todas as persoas que participan. Estas características son aínda máis importantes nos sistemas auto-organizados que nos centralizados, xa que nos sistemas auto-organizados, todos son conscientes de que unhas poucas mazás apodrecidas poden apodrecer todo o cesto, polo menos durante un tempo.</para>

<sect1 id="forkability">
<title
>Posibilidade de escisión (forkability)</title>

<para
>O ingrediente indispensable que une os desenvolvedores nun proxecto de software libre, e fai que estean dispostos a comprometérense cando for necesario, é a <firstterm
>capacidade de escisión (forkability)</firstterm
> do código: a capacidade de calquera de coller unha copia do código fonte e utilizala para iniciar un proxecto en concorrencia, coñecido como "fork".O paradoxo é que a <emphasis
>posibilidade </emphasis
>de escisión (fork) é unha forza moito maior nos proxectos de software libre que as escisións actuais, as cales son moi raras. Xa que unha escisión é mala para todos (por motivos examinados en detalle en <xref linkend="forks"/><phrase output="printed"
> in <xref linkend="managing-volunteers"/></phrase
>), canto mais alto sexa o risco de escisión, máis dispostos a comprometerse para evitalo estarán os membros.</para>

<para
>As escisións, ou máis ben as escisións potenciais, son a razón de que non existan verdadeiros ditadores nos proxectos de software libre. Isto pode parecer unha afirmación sorprendente, considerando que é común oír como alguén é cualificado de "ditador" ou "tirano" nalgún proxecto de código aberto. Mais este tipo de tiranía é especial, moi diferente da interpretación convencional da palabra. Imaxinádevos un rei cuxos súbditos puidesen copiar todo o seu reino en calquera momento e pasar á copia para gobernala como mellor lles parecese. Non sería o goberno dese rei moi diferente doutro cuxos súbditos estiveren obrigados a permanecer baixo o seu mandato, sen importar o que fixer?</para>

<para
>Por esta razón mesmo os proxectos que non están organizados formalmente como democracias, na práctica, compórtanse como tales cando se trata de afrontar decisións importantes. A capacidade de replicar implica a posibilidade de escindirse; a posibilidade dunha escisión implica consenso. É moi posible que todo o mundo estea disposto a someterse a un líder (o exemplo máis famoso é Linus Torvalds no desenvolvemento do kernel de Linux), mais isto é así porque eles <emphasis
>escollen</emphasis
> facelo, dunha forma totalmente libre de cinismo ou dobreces. O ditador non ten un dominio máxico sobre o proxecto. Unha propiedade clave de todas as licenzas de fontes abertas é que non conceden máis poder a unha parte sobre as decisións de como mudar o código ou usalo. Se o ditador, de repente, comezase a tomar malas decisións, produciríase unha axitación, seguida finalmente dun levantamento e unha escisión.</para>

<para
>Mais porque exista a posibilidade dunha escisión, o que impón un gran límite en canto a poder que alguén exerce nun proxecto, non quere dicir que non existan importantes diferenzas en como son dirixidos os proxectos. Non é desexable que cada decisión sexa condicionada pola posibilidade de que alguén estea considerando unha escisión. Isto pode converterse en algo pesado e esbanxar enerxías destinadas ao auténtico traballo. As dúas seccións seguintes examinan os modos de organizar os proxectos para que a maioría das decisións sexan tomadas sen problemas. Estes dous exemplos son os casos estremos idealizados; moitos proxectos estarán situados entre estes estremos.</para>

</sect1>

</simplesect>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolant-dictator"
></simplesect>
<!-- ======================== SECTION ============================== -->
<sect1 id="benevolent-dictator">
<title
>Ditadores benevolentes</title>

<para
>O modelo de <firstterm
>ditador benevolente</firstterm
> é exactamente o que parece: a autoridade de tomar a decisión final radica nunha soa persoa, da que, en virtude da súa personalidade e experiencia, espérase que a use sabiamente.</para>

<para
>Aínda que "ditador benevolente" (ou <firstterm
>BD</firstterm
>) é o termo estándar para este rol, sería mellor pensar nel coma un "árbitro autorizado da comunidade" ou "xuíz". En xeral, os ditadores benevolentes realmente non toman todas as decisións, nin incluso a maioría das decisións. É pouco probable que unha persoa poida ter os suficientes coñecementos para a toma de decisións apropiadas en todas as áreas dun proxecto, e ademais, os desenvolvedores máis cualificados non permanecerán no proxecto a non ser que teñan algunha influencia sobre a dirección do proxecto. Polo tanto, os ditadores benevolentes non adoitan ditar moito. Pola contra, deixan que as cousas funcionen por si soas a través do debate e a experimentación sempre que sexa posible. Participan nesas discusións, mais como un desenvolvedor máis , a miúdo delegando nun mantedor desa área que teña máis pericia. Só cando é evidente que non se logra o consenso, e que a maioría do grupo <emphasis
>quere</emphasis
> que alguén guíe a decisión para que o desenvolvemento poida seguir adiante, pisan firme e din: "Esta é a forma en que vai ser". As reticencias a tomar decisións por decreto é unha característica compartida por case todos os ditadores benevolentes con éxito, é unha das razóns polas que logran manter este rol.</para>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolant-dictator-qualifications"
></simplesect>
<sect2 id="benevolent-dictator-qualifications">
<title
>Quen pode ser un bo ditador benevolente?</title>

<para
>Ser un DB (ditador benevolente) require unha combinación de características. Necesítase, en primeiro lugar, unha certa delicadeza para xulgar a súa propia influencia no proxecto, o que á súa vez leva á moderación. Nas primeiras etapas dunha discusión, un non debe expresar opinións e conclusións con tanta seguridade que os outros sintan que é inútil opinar en contra. A xente debe ser libre de lanzar ideas, mesmo ideas estúpidas. É inevitable que o DB expoña unha idea estúpida de cando en vez tamén, por suposto, e polo tanto este rol require a capacidade de recoñecer cando un toma unha mala decisión; aínda que isto é unha característica básica que  calquera bo desenvolvedor debe ter, especialmente se se mantén no proxecto durante tempo. Mais a diferenza é que o DB pode darse o luxo de equivocarse de cando en vez sen ter que lamentar danos permanentes na súa credibilidade. Os desenvolvedores que levan menos tempo poden sentirse máis inseguros, polo que o BD debería expoñer as críticas ou decisións contrarias con a suficiente sensibilidade tendo en conta o peso das súas palabras, tanto tecnicamente como psicoloxicamente.</para>

<para
>O BD <emphasis
>non</emphasis
> necesita ter a maior capacidade técnica do proxecto. Debe ser suficiente como para traballar sobre o código, e entender e poder opinar sobre calquera mudanza en cuestión, mais iso é todo. A posición do DB non se adquire nin mantén en virtude dunha habilidade de xerar código que intimide. O que <emphasis
>si</emphasis
> é realmente importante é a experiencia e un bo sentido de deseño global do proxecto; non necesariamente a habilidade de xerar un bo deseño baixo demanda, senón a capacidade de recoñecelo, sexa cal for a súa orixe.</para>

<para
>É común que un ditador benevolente sexa o fundador do proxecto, mais isto é máis unha correlación que unha causa. O tipo de cualidades que permite pór en marcha con éxito un proxecto, competencia técnica, capacidade de persuadir a outros a unírense, etc, son exactamente as cualidades que calquera DB necesita. E, por suposto, os fundadores inícianse cunha especie de antigüidade automática, que a miúdo pode ser suficiente para que o ditador benevolente xurda cunha menor resistencia por parte de todos os involucrados.</para>

<para
>Debe recordarse que a posibilidade de escisión vai en ambos os sentidos. Un DB pode facer unha escisión dun proxecto tan facilmente como calquera outro, e ocasionalmente fixérono así, cando se considerou que a dirección que está tomando o proxecto é diferente ao que a maioría dos desenvolvedores desexan. Debido á posibilidade dunha escisión, non importa se o ditador benevolente ten privilexios de root (administrador do sistema) nos servidores principais do proxecto ou non. Ás veces a xente fala de control do servidor coma se fose a última fonte de poder nun proxecto, pero en realidade é irrelevante. A posibilidade de agregar ou quitar as contrasinais de commit dos membros nun servidor só afecta á copia do proxecto que reside no servidor. Un abuso prolongado dese poder, xa sexa polo DB ou doutra persoa, simplemente levaría ao traslado a un servidor diferente.</para>

</sect2>

<para
>Se o teu proxecto debería ter un ditador benevolente ou se vai funcionar mellor cun sistema menos centralizado, depende en gran medida de que exista alguén adecuado para exercer este papel. Como regra xeral, se for moi obvio para todos quen debería ser o DB, entón ese é o camiño a seguir. Contodo, se ningún candidato para BD é inmediatamente obvio, entón o proxecto probablemente deba utilizar unha toma de decisións descentralizada, como se describe na seguinte sección.</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<title
>Democracia baseada no consenso</title>

<para
>A medida que os proxectos van madurando, tenden a afastarse do modelo do ditador benevolente cara a sistemas democráticos máis abertos. Isto non se debe necesariamente á insatisfacción causada por un DB en concreto. Trátase simplemente de que unha forma de goberno baseada no grupo é máis "evolutivamente estable", usando unha metáfora biolóxica. Sempre que un ditador benevolente renuncia, ou intenta repartir a responsabilidade na toma de decisións máis equitativamente, é unha oportunidade para o grupo de asentarse nun sistema non ditatorial&mdash;establecer unha constitución, por así dicilo. O grupo pode non aproveitar esta oportunidade a primeira vez, ou na segunda, pero finalmente vaino facer; unha vez que o fan, a decisión é pouco probable que se inverta. O sentido común explica o porqué: se un grupo de persoas N tivese que investir unha persoa con poder especial, iso significaría que N&nbsp;-&nbsp;1 persoas tiveron que aceptar diminuíren a súa influencia individual. Normalmente a xente non quere facer iso. Mesmo se o fixesen, a ditadura resultante aínda sería condicional: o grupo que designa un DB, é claramente o grupo que pode depor ao DB. Polo tanto, unha vez que o proxecto pasou dun liderado carismático individual a un sistema máis formal baseado no grupo, é raro que volva ao estado anterior.</para>

<para
>Os detalles de como funcionan eses sistemas varían amplamente, mais hai dous elementos comúns: un, o grupo funciona por consenso na maioría dos casos, dous, conta cun mecanismo formal de votacións alternativo para as situacións nas que o consenso non poida ser alcanzado.</para>

<para
><firstterm
>Consenso</firstterm
> simplemente quere dicir un acordo que todo o mundo está disposto a aceptar. Non é un estado ambiguo: un grupo chegou a un consenso sobre un asunto particular cando alguén propón que o consenso foi alcanzado, e ninguén contradí esa afirmación. A persoa que propón o consenso debe, por suposto, establecer especificamente o que supón este consenso, e que accións deben tomarse en consecuencia, se non resultaren obvias.</para>

<para
>A maioría das conversacións nun proxecto tratan sobre temas técnicos, como a forma correcta de corrixir algún erro, engadir ou non unha característica, como de estrita ten que ser a documentación das interfaces, etc. O goberno baseado no consenso funciona ben porque mestura á perfección a transparencia e a discusión técnica en si mesma. Ao final dun debate, a miúdo hai un acordo xeral sobre que camiño tomar. Alguén fai unha intervención conclusiva, que é á vez un resumo do que se decidiu e unha proposta implícita de consenso. Isto ofrece unha última oportunidade para que alguén diga "¡Espera, non estou de acordo con iso. Temos que reconsiderar isto un pouco máis".</para>

<para
>Para as pequenas decisións, non controvertidas, a proposta de consenso é implícita. Por exemplo, cando un desenvolvedor realiza un commit non solicitado para a corrección dun erro, o mesmo commit é a proposta de consenso: "Supoño que todos estamos de acordo en que este erro debe ser solucionado, e que este é o xeito de arranxalo". Por suposto, o desenvolvedor non o di explicitamente; só leva a cabo a reparación, e os outros membros do proxecto non se molestan en manifestar o seu acordo, porque o silencio é consentimento. Se alguén realiza un commit que <emphasis
>non</emphasis
> alcanza o consenso, para o proxecto é simple analizar a mudanza como se aínda non se realizase. A razón de que isto funcione é o tema da próxima sección.</para>

<sect2 id="version-control-relaxation">
<title
>Control de versións quere dicir que te podes relaxar</title>

<para
>O feito de que o código fonte do proxecto fique baixo un sistema de control de versións quere dicir que a maioría das decisións poden facilmente desfacerse. O caso máis común no que isto ocorre é que alguén realiza un commit pensando, erroneamente, que todo o mundo estará de acordo con esa mudanza, soamente atopándose coas obxeccións despois de que se realizou. É típico desas obxeccións comezar obrigatoriamente desculpándose por non intervir no debate previo, aínda que isto pode omitirse se o obxector non atopa ningún rexistro dese debate nos arquivos da lista de correo. De todos modos, non hai ningunha razón para que o ton da discusión sexa diferente despois do commit que antes. Calquera mudanza pode ser revertida, polo menos ata que se introduzan mudanzas dependentes (é dicir, novo código que fallaría se as mudanzas realizadas son eliminadas subitamente). O sistema de control de versións ofrece ao proxecto un xeito de desfacer os efectos de malas ideas ou apresuradas. Isto, á súa vez, outorga liberdade á xente para confiar nos seus instintos sobre canto "feedback" é necesario antes de facer algo.</para>

<para
>Isto tamén quere dicir que o proceso de establecer un consenso non necesita ser moi formal. Moitos proxectos manexan isto por instinto. As mudanzas menores pódense levar a cabo sen discusión, ou cunha discusión mínima seguida por algúns xestos de asentimento. Para as mudanzas máis significativas, especialmente aquelas co suficiente potencial para desestabilizar unha cantidade considerable de código, as persoas deben esperar un día ou dous antes de asumiren que existe consenso. A razón de ser disto é que ninguén debe ser marxinado nunha negociación importante simplemente porque non comproba o seu correo electrónico coa frecuencia suficiente.</para>

<para
>Así, cando alguén estiver seguro de que sabe o que hai que facer, debería seguir adiante e facelo. Isto aplícase non só ao software, senón tamén ás actualizacións do sitio web, mudanzas na documentación, e calquera outra cousa que non suscite controversia. Polo xeral só haberá uns poucos casos en que unha acción deba ser rectificada, e estas poden ser tratadas caso por caso. Por suposto, non se debe animar a xente a que sexa demasiado obstinada. Hai aínda unha diferenza psicolóxica entre unha decisión baixo discusión e unha que xa foi efectuada, mesmo se for tecnicamente reversible.
A xente sempre sente que o impulso está unido á acción, e serán un pouco máis relutantes a reverteren unha mudanza que a previla nun primeiro momento. Se un desenvolvedor abusa deste feito, efectuando commits potencialmente controvertidos demasiado rápido, a xente pode e debe queixarse, aplicándolle a este desenvolvedor unhas normas máis estritas ata que isto mellore.</para>

</sect2>

<sect2 id="voting">
<title
>Cando o consenso non pode ser alcanzado, votación</title>

<para
>Inevitablemente, algúns debates non chegarán ao consenso. Cando fallan todos os outros medios de saír do estancamento, a solución é votar. Mais antes de levar a cabo a votación, debe existir un claro conxunto de opcións nas papeletas. Aquí, de novo, o proceso normal de discusión técnica intégrase, case casualmente, cos procedementos de toma de decisións do proxecto. Os tipos de preguntas que teñen lugar na votación entrañan a miúdo asuntos complexos e polifacéticos. En calquera debate tan complexo, hai xeralmente unha ou dúas persoas exercendo o papel de <firstterm
>intermediario honesto</firstterm
>: expondo periodicamente resumos dos diversos argumentos e facendo un seguimento de onde residen os puntos centrais de desacordo (e acordo). Estes resumos axudan a medir o grao de progreso alcanzado, e recordar que cuestións quedan por resolver. Estas sínteses poden servir como modelos para unha papeleta de votación, en caso de ser necesaria esta. Se os intermediarios honestos fixeron ben o seu traballo, estarán en condicións de chamar á votación cando chegar o momento, e o grupo estará disposto a usar a papeleta de votación baseada no seu resumo das cuestións a resolver. Os intermediarios tamén participarán no debate; non é necesario que fiquen fóra da contenda, a condición de que poidan entender e representar as opinións dos demais, e non deixen que os seus sentimentos partidistas lles impidan sintetizar o estado do debate dunha forma neutral.</para>

<para
>O contido real da votación non acostuma ser polémico. Por cuestións de tempo, ao chegar a unha votación, o desacordo foi reducido a unhas poucas cuestións, ben etiquetadas e con descricións breves. Ocasionalmente, un desenvolvedor oporase á forma da votación mesma. Ás veces esta preocupación é lexítima, por exemplo, que unha opción importante sexa deixada de lado ou que non se describa con precisión. Mais outras veces un desenvolvedor pode tratar de impedir o inevitable, tal vez por saber que o voto non vai ir no seu sentido. Ver <xref linkend="difficult-people"/><phrase output="printed"
> en <xref linkend="communications"/></phrase
> para saber como facer fronte a este tipo de obstrucionismo.</para>

<para
>Recorda que se debe especificar o sistema de votación, xa que hai moitos tipos diferentes, e a xente pode ter falsas expectativas sobre o procedemento que se utiliza. Unha boa elección na maioría dos casos é o <firstterm
>voto de aprobación</firstterm
>, a través do cal cada elector pode votar por tantas opcións como desexe. O voto de aprobación é fácil de explicar e recontar, e a diferenza doutros métodos, só require unha rolda de votación. Consulta <ulink url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"
></ulink
> para obteres máis detalles acerca da votación de aprobación e outros sistemas de votación, mais debes tratar de evitar entrar nun longo debate sobre que sistema de votación utilizar (porque, por suposto, pódeste atopar nun debate sobre que sistema de votación utilizar para decidir o sistema de votación!). Unha razón para escolleres o voto de aprobación como unha boa opción é que é moi difícil para alguén oporse a este&mdash;é tan xusto como un sistema de votación pode chegar a ser.</para>

<para
>Para rematar, débense administrar as votacións publicamente. Non hai necesidade de segredos ou anónimos nunha votación sobre os asuntos que se debateron publicamente. Cada participante envía o seu voto á lista de correo do proxecto, de modo que calquera observador poida facer o reconto e verificar os resultados por si mesmo, e así fique todo rexistrado nos arquivos.</para>

</sect2>

<sect2 id="when-to-vote">
<title
>Cando votar</title>

<para
>O máis difícil da votación é determinar cando é necesario realizala. Levar a cabo unha votación debería ser algo pouco frecuente&mdash;o último recurso cando todas as opcións fracasaron. Non se debe pensar na votación como unha gran solución para resolver discusións. Non o é. Finaliza a discusión, e polo tanto, tamén acaba coa creatividade sobre como resolver o problema. Mentres a discusión continúa, existe a posibilidade de que alguén apareza cunha nova solución que lle guste a todos. Sorprendentemente, isto ocorre a miúdo: un debate aberto pode producir unha nova forma de pensar sobre o problema, e dar lugar a unha proposta que finalmente satisfaga a todos. Embora non xurda unha proposta nova, é mellor negociar unha solución intermedia a que teña lugar unha votación. Logo de alcanzar un compromiso, todos están un pouco tristes, mentres que logo dunha votación, algunhas persoas non están contentas e outros son felices. Desde un punto de vista político, a primeira situación é preferible: polo menos cada persoa pode sentir que obtén algo en troca da súa infelicidade. Pode estar insatisfeito, mais todos o están.</para>

<para
>A principal vantaxe da votación é que se pecha a cuestión e pódese seguir adiante. Mais o acordo alcánzase por un reconto, en lugar dun diálogo racional que conduza a todos á mesma conclusión. As persoas con máis experiencia en proxectos de software libre, son as que menos ansiosas atopei por alcanzar solucións a través da votación. No seu lugar, tratarán de buscar solucións previamente non consideradas ou transixir máis do que planearan. Existen varias técnicas para previr unha votación prematura. A máis obvia é simplemente dicir "eu non creo que esteamos listos para unha votación", e explicar por que non. Outra é a de solicitar un método informal (non vinculante) a man alzada. Se a resposta tende claramente cara a un lado ou outro, isto fará que, de súpeto, algunhas persoas estean máis dispostos a chegar a un acordo, evitando a necesidade dunha votación formal. Mais a forma máis efectiva é simplemente ofrecer unha solución nova, ou un novo punto de vista sobre unha proposta antiga, para que a xente volva ocuparse dos problemas a tratar en troca de limitárense a repetir os mesmos argumentos.</para>

<para
>Nalgúns casos isolados, todos poden estar de acordo en que as solucións intermedias son peores que calquera das que non o son. Cando iso ocorre, a votación non é tan cuestionable, tanto porque é máis probable que conduza a unha solución superior como porque a xente non vai estar demasiado descontenta, non importando como resulte. Ata entón, a votación non debe precipitarse. A discusión que desemboca nunha votación é o que educa o electorado, e deter pronto unha discusión pode diminuír a calidade do resultado.</para>

<para
>(Ten en conta que este consello de ser relutante ás votacións non se aplica á votación sobre mudanza-inclusión que se describe en <xref linkend="estabilizando unha release"/><phrase output="printed"
> en <xref linkend="ciclo de desenvolvemento"/></phrase
>. Alí, a votación é máis un mecanismo de comunicación, un medio de rexistrar o propio compromiso no proceso de revisión de mudanza para que todos poidan dicir canta atención recibiu unha mudanza determinada).</para>

</sect2>

<sect2 id="electorate">
<title
>Quen vota?</title>

<para
>Ter un sistema de votación pon de manifesto a cuestión do electorado: quen vai votar? Isto pode ser un tema delicado, porque obriga a que o proxecto recoñeza oficialmente que hai xente máis involucrada, ou máis valorada que outros.</para>

<para
>A mellor solución é simplemente tomar unha distinción existente, o acceso a commit, e asociar a isto o privilexio de voto. Nos proxectos que ofrecen permisos tanto parciais como totais, a cuestión de se os committers con acceso parcial poden votar, depende en gran medida do proceso polo cal se concede o acceso parcial a commit. Se o proxecto é administrado dunha forma liberal, por exemplo, como un medio de manter moitas ferramentas de colaboración para terceiras partes no repositorio, debe ficar claro que o acceso a commit parcial é só o dereito de realizar commits, non de voto. Naturalmente a implicación inversa mantense: como os committers con acceso total <emphasis
>terán</emphasis
> privilexios de voto, estes deben ser elixidos non só como programadores, senón como membros do electorado. Se alguén mostra tendencias que poden producir rupturas ou obstrucións na lista de correo, o grupo debe ser moi cauteloso á hora de facelo committer, ata se a persoa está capacitada tecnicamente.</para>

<para
>O sistema de votación debería ser utilizado para elixir os novos committers, tanto con privilexios completos como parciais. Mais aquí é un dos raros casos en que o segredo é apropiado. Non se pode ter os votos sobre os potenciais committers nunha lista de correo pública, porque os sentimentos dos candidatos (e a reputación) poderían resultar feridos. No canto disto, a forma habitual é que un committer actual envíe a unha lista de correo privada, formada só por committers, a proposta de que lle sexan concedidos permisos de commit a alguén. Deste xeito todos poden expresarse libremente, sabendo que a discusión é privada. A miúdo, non haberá desacordo, e polo tanto non se necesitará votar. Logo de esperar uns días para asegurarse de que todos tiveron a oportunidade de responder, o propoñente envía un mail ao candidato e ofrécelle permisos de commit. Se hai desacordo, iníciase unha discusión como para calquera outra cuestión, resultando posiblemente nunha votación. Para que este proceso sexa aberto e franco, o mero feito de que se está a levar a cabo debería ser totalmente secreto. Se a persoa en cuestión sabía o que estaba pasando, e logo non se ofrece o acceso a commit, pode concluír que perdeu a votación, e probablemente sentirse ferido. Por suposto, se alguén explicitamente pide o acceso ao commit, entón non hai máis remedio que considerar a proposta e explicitamente aceptalo ou rexeitalo. Neste último caso, entón debe facerse con sumo tacto, cunha explicación clara: "Gústannos os teus remendos, mais aínda non demostran o suficiente" ou "apreciamos todos os teus remendos, mais necesitaron considerables axustes antes de poder ser aplicados, polo que aínda non nos sentimos cómodos concedéndoche permisos de commit. Aínda que esperamos que isto mude co tempo". Recorda que o que se di pode caer como un golpe, dependendo do nivel de confianza coa persoa. Trata de velo desde o seu punto de vista cando escribas o email.</para>

<para
>Posto que adicionar un novo committer é máis importante que a maioría de decisións puntuais, algúns proxectos teñen requirimentos especiais para o voto. Por exemplo, poderase esixir que a proposta reciba polo menos n votos positivos e ningún voto negativo, ou que certa supermaioría vote a favor. Os parámetros exactos non son importantes, a idea principal é conseguir que o grupo debe ser coidadoso ao engadir novos committers. Similares requirimentos especiais, ou ata máis estritos, débense aplicar nas votacións para <emphasis
>eliminar</emphasis
> committers, aínda que oxalá que iso nunca sexa necesario. Ver <xref linkend="committers"/><phrase output="printed"
> en <xref linkend="xestionando voluntarios"/></phrase
> para máis información sobre aspectos ademais dos relacionados coa votación engadindo e eliminando committers.</para>

</sect2>

<sect2 id="polls">
<title
>Enquisas versus votacións</title>

<para
>Para certas clases de votacións, pode ser útil ampliar o electorado. Por exemplo, se os desenvolvedores non poden determinar se unha interface dada coincide co xeito coa xente realmente usa o software, unha solución é pedir que voten todos os subscritores das listas de correo do proxecto. Estas son realmente <firstterm
>enquisas</firstterm
> en lugar de votacións, mais os desenvolvedores poden optar por tratar os resultados como vinculantes. Como en calquera votación, asegúrate de deixares claro aos participantes que existe a opción de incluír novas opcións: se alguén pensa nunha opción mellor que non está na lista, esta resposta pode chegar a ser o resultado máis importante da enquisa.</para>

</sect2>

<sect2 id="veto">
<title
>Vetos</title>

<para
>Algúns proxectos permiten un tipo especial de dereito que se coñece como <firstterm
>veto</firstterm
>. O veto é unha forma para que un desenvolvedor poida deter unha mudanza apresurada ou mal considerada, polo menos o tempo suficiente para que todos poidan discutila máis a fondo. Pensa no veto como algo que se sitúa entre unha forte obxección e unha manobra obstrucionista. O seu significado exacto varía dun proxecto a outro. Algúns proxectos fan que sexa moi difícil invalidar un veto; outros permiten que sexa superado polo voto da maioría, quizais logo dunha demora forzada para poder examinar máis o tema. Un veto debe ser acompañado por unha explicación exhaustiva; o veto presentado sen esa explicación debe ser considerado inválido.</para>

<para
>Cos vetos introdúcese o problema do abuso do veto. Ás veces os desenvolvedores están demasiado ansiosos por aumentar a presión cun veto, cando o que realmente se require é máis discusión. Podes previr o abuso do veto sendo moi relutante ao uso deste, e facendo notar con tacto cando alguén usa o veto demasiado a miúdo. Se for necesario, tamén podes lembrarlle ao grupo que os vetos son de obrigado cumprimento a condición de que o grupo estea de acordo&mdash;despois de todo, se a maioría de desenvolvedores queren X, X vai ocorrer dun modo ou outro. Ou ben o desenvolvedor do veto retírao, ou o grupo vai quitarlle importancia a este dereito de veto.</para>

<para
>Pode verse que a xente escribe "-1" para expresar un dereito de veto. Este costume vén da Apache Software Foundation, que ten moi estruturados o sistema de voto e o proceso de veto, que se describe en <ulink url="http://www.apache.org/foundation/voting.html"
></ulink
>. As normas de Apache estendéronse a outros proxectos, e pódese ver como as súas convencións son utilizadas en diversos graos en moitos lugares no mundo do código aberto. Tecnicamente "-1" non sempre indica un veto formal de acordo coas normas de Apache, mais informalmente considérase que representa un veto, ou polo menos unha obxección moi forte.</para>

<para
>Do mesmo xeito que as votacións, os vetos pódense aplicar con carácter retroactivo. Non é correcto rexeitar un veto sobre a base de que a mudanza en cuestión xa se cometeu, ou das medidas adoptadas (a menos que sexa algo irrevogable, por exemplo unha nota de prensa). Doutra banda, un veto que chega con semanas ou meses de atraso, non é probable que se tome moi en serio, nin debería selo.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<title
>Poñer todo por escrito</title>

<para
>Nalgún momento, o número de convenios e acordos que circulan no seu proxecto poden chegar a ser tan grandes que se necesiten rexistrar nalgún lugar. A fin de dar lexitimidade a eses documentos, debe ficar claro que se basean nas discusións da lista de correo e nos acordos xa en vigor. A medida que o redactes, remítete aos fíos relevantes dos arquivos das listas de correo, e cada vez que haxa un punto no que non esteas seguro, pregunta de novo. O documento non debería conter ningunha sorpresa: non é a fonte dos acordos, é simplemente unha descrición destes. Por suposto, se ten éxito, a xente comezará a citalo como fonte de autoridade en si mesmo, mais iso só significa que reflicte a vontade xeral do grupo con precisión.</para>

<para
>Este é o documento aludido <xref linkend="directrices para o desenvolvedor"/><phrase output="printed"
> en <xref linkend="primeiros pasos"/></phrase
>. Naturalmente, cando o proxecto é moi recente, terá que establecer os criterios a seguir sen os beneficios cos que contan os proxectos con máis historia. Mais a medida que a comunidade de desenvolvemento madura, pode axustar a linguaxe para reflectir a forma en que actualmente son levadas a cabo as cousas.</para>

<para
>Non trates de abranguelo todo. Ningún documento pode capturar todo o que a xente necesita saber acerca da participación nun proxecto. Moitas das convencións que un proxecto contrae son tácitas, nunca mencionadas explicitamente, mais aceptadas por todos. Outras cousas son simplemente demasiado evidentes para seren mencionadas, e só iría en detrimento de material importante mais non evidente. Por exemplo, non ten sentido redactar directrices como "Sexa cortés e respectuoso cos demais nas listas de correo, e non inicie apaixonadas guerras", ou "Escriba código limpo, fácil de ler e libre de erros." Por suposto, estas cousas son desexables, mais xa que non existe un universo concibible no que puidesen <emphasis
>non</emphasis
> ser desexables, non son dignas de mención. Se a xente for groseira na lista de correo, ou escribir código con erros, non van deixar de facelo só porque a guía do proxecto o di. Estas situacións requiren atención no momento en que aparecen, e non con admonicións xerais para ser bos. Por outra parte, se o proxecto tiver liñas específicas sobre <emphasis
>como</emphasis
> escribir bo código, entón esas directrices da guía deberían escribirse co máximo detalle posible.</para>

<para
>Un bo xeito de determinar o que debe incluírse é basear o documento nas preguntas que fan os chegados recentemente, e nas queixas que expoñen os desenvolvedores con experiencia máis a miúdo. Isto non quere dicir que necesariamente teñan que converterse nun FAQ&mdash;posiblemente o documento necesite unha estrutura narrativa máis coherente que a que pode ofrecer o FAQ. Mais debería seguir o mesmo principio baseado en abordar as cuestións que realmente se producen, en troca de anticiparse ás que poidan xurdir.</para>

<para
>Se o proxecto é unha ditadura benévola, ou ten axentes dotados de poderes especiais (presidente, secretario, ou calquera outro), entón o documento é tamén unha boa oportunidade para codificar os procedementos de sucesión. Ás veces isto pode ser tan simple como nomear a persoas específicas como sucesores no caso de que o DB abandone repentinamente o proxecto por calquera razón. Xeralmente, se hai un DB, é só el quen pode designar un sucesor. Se se elixe unha comisión, entón o procedemento da elección e o nomeamento dos integrantes da comisión ten que estar descrito no documento. Se orixinariamente non existe un procedemento, entón hai que conseguir un consenso nas listas de correo <emphasis
>antes</emphasis
> de escribir sobre isto. A xente, algunhas veces, pode ser susceptible coas estruturas xerárquicas, de modo que o tema debe ser tratado con delicadeza.</para>

<para
>Quizais o máis importante é deixar claro que as normas poden ser reconsideradas. Se os acordos descritos no documento comezan a frear o proxecto, recordar a todos que se supón que é un vivo reflexo das intencións do grupo, non unha fonte de frustración e estagnación. Se alguén toma, de forma inapropiada, por hábito pedir que as regras sexan reconsideradas cada vez que unha regra lle afecta, non sempre convén debater o tema con el&mdash;ás veces o silencio é a mellor táctica. Se outras persoas están de acordo coas queixas, a campá soou, e é obvio que será necesario mudar algo. Se ninguén está de acordo, entón a persoa non obterá demasiados froitos, e as regras manteranse como están.</para>

<para
>Dous bos exemplos de directrices dun proxecto son o arquivo de Subversion <filename
>hacking.html</filename
> en <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"
></ulink
>, e os documentos de xestión da Apache Software Foundation, en <ulink url="http://www.apache.org/foundation/how-it-works.html"
></ulink
> e <ulink url="http://www.apache.org/foundation/voting.html"
></ulink
>. A ASF é, realmente, unha colección de proxectos de software, organizada legalmente como unha corporación sen fins de lucro, de modo que os seus documentos tenden a describir os procedementos de goberno máis que as convencións de desenvolvemento. De todos os xeitos, paga a pena lelos, porque representan a experiencia acumulada de moitos proxectos de código aberto.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
