<chapter id="managing-volunteers">

<title
>Xestionando voluntarios</title>

<simplesect>

<para
>Conseguir que a xente se poña de acordo sobre o que un proxecto precisa, e que traballe xunta para acadalo, require de máis que unha atmosfera xenial e sen disfuncións obvias. Require unha, ou varias, persoas que xestionen concienciudamente toda a xente involucrada. Xestionar voluntarios pode non ser unha arte técnica no mesmo senso que a programación, msis é unha arte no senso de que pode mellorarse a través do estudo e da práctica.</para>

<para
>Este capítulo é un caixón de xastre con técnicas específicas para xestionar voluntarios. Aliméntase como caso de estudo, quizais dun xeito aínda máis forte que en capítulos anteriores, do proxecto Subversion, en parte porque estiven traballando nese proxecto mentres escribía este libro (o que facía que tivera as fontes primarias preto da man), e tamén en parte porque é máis aceptable tirar pedras ao propio tellado que non ao dos demais. Aínda así. tamén teño visto noutros proxectos os beneficios de aplicar&mdash;e as consecuencias de non aplicar&mdash;as recomendacións que seguen. Sempre que for politicamente correcto fornecer exemplos derivados destes outros proxectos, fareino.</para>

<para
>Falando de política, este é un momento tan bo como calquera outro para inspeccionarmos a devandita palabra maligna. A moitos enxeñeiros gústalles pensar que a política é algo no que está envolvida outra xente, ao xeito de "<emphasis
>Eu</emphasis
> estou avogando polo mellor camiño para o proxecto, mais <emphasis
>Ela</emphasis
> pon atrancos por razóns políticas." Creo que este distanciamento derivado da política (ou derivado do que se pensa que é a política) é especialmente forte nos enxeñeiros debido a que os enxeñeiros edúcanse coa idea de que algunhas solucións son obxectivamente superiores a outras. Por tanto, cando alguén actúa dun xeito que parece motivado por consideracións externas&mdash;o mantemento da súa posición de influencia, minar a influencia dun terceiro, "vender motos", ou evitar ferir os sentimentos de alguén&mdash;outros integrantes do proxecto poden anoxarse. Por suposto, isto raramente evita que se comporten do mesmo xeito cando son os seus propios intereses os que están en xogo.</para>

<para
>Se consideras que "política" é unha palabra porca, e tes esperanzas de manter o teu proxecto libre dela, abandona agora mesmo. A política é algo que aparece inevitablemente onde a xente teña que xestionar cooperativamente un recurso compartido. É absolutamente racional que unha das consideracións que se teñan en conta durante o proceso de toma de decisións de cada persoa sexa a cuestión de como unha acción dada pode afectarlle á súa futura influencia no proxecto. Despois de todo, se cres no teu propio xuízo e capacidades, e moitos programadores fano, a potencial perda futura de influencia ten que ser considerada como unha cuestión técnica, en certo senso. Un razoamento similar é aplicable a outros comportamentos que poden ser vistos, superficialmente, como "pura" política. De feito, non hai nada como a tal pura política: é precisamente debido a que as accións teñen múltiples consecuencias no mundo real polo que a xente chega a ser politicamente consciente nun primeiro momento. A política é simplemente, ao final, un recoñecemento de que <emphasis
>todas</emphasis
> as consecuencias das decisións deben ser tidas en conta. Se unha decisión concreta conduce a un resultado que a maioría dos participantes atopan tecnicamente satisfactorio, mais implica unha mudanza nas relacións de poder que provoca o isolamento de xente clave, entón debemos telo en conta e darlle importancia a ambas consecuencias. Ignoralo non só sería pouco xuizoso, senón tamén curto de miras.</para>

<para
>Así, mentres leas os consellos que seguen, e mentres traballes no teu propio proxecto, lembra que <emphasis
>ninguén</emphasis
> está por enriba da política. Amosarse como alguén por enriba da política é só unha mera estratexia política, sendo moi útil ás veces, mais nunca é a realidade. A política é simplemente o que pasa cando a xente está en desacordo, e os proxectos exitosos son aqueles que desenvolven os mecanismos políticos para xestionar construtivamente o desacordo.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="volunteers">
<title
>Conseguir o máximo de voluntarios</title>

<para
>Por que os voluntarios traballan en proxectos de software libre?<footnote
><para
>Esta cuestión foi estudada en detalle, con resultados interesantes, nun estudo de Karim Lakhani e Robert G. Wolf titulado <citetitle
>Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects</citetitle
> (Por que os Hackers fan o que fan: entendendo a motivación e o esforzo en Proxectos de Software Libre e de Fontes Abertas). Bótalle unha ollada a <ulink url="http://freesoftware.mit.edu/papers/lakhaniwolf.pdf"
></ulink
>.</para
></footnote
></para>

<para
>Cando lles preguntas, moitos expoñen que o fan porque queren producir bo software, ou queren participar persoalmente na reparación dos erros que lles afectan. Mais estas razóns son habitualmente só unha parte da historia. Despois de todo, podes imaxinar un voluntario traballando nun proxecto mesmo se nunca ninguén lle dirixiu unha palabra de aprecio sobre o seu traballo no proxecto, ou escoitou a súa opinión nunha discusión? Claro que non. Claramente, a xente emprega tempo no software libre por razóns que van para alén do desexo abstracto de producir bo código. Comprender as motivacións reais dos voluntarios vaiche axudar a arranxar as cousas de xeito que che permita atraelos e mantelos. O desexo de producir bo software pode ir no medio desas motivacións, da man do desafío e do valor educativo de traballar en problemas difíciles. Mais os humanos tamén temos un desexo intrínseco de traballar con outros humanos, e de dar e gañar respecto a través de actividades cooperativas. Os grupos involucrados en actividades cooperativas deben desenvolver normas de comportamento de xeito que o status sexa adquirido e mantido a través de accións que axuden a obter os obxectivos do grupo.</para>

<para
>Estas normas non sempre xorden por si soas. Por exemplo, nalgúns proxectos&mdash;os desenvolvedores experimentados de software libre probablemente poidan nomear varios de memoria&mdash;a xente aparentemente sente que o status é adquirido mediante o envío de mensaxes frecuentes e longas. Habitualmente non chegan a esta conclusión dun xeito accidental, senón que chegan a ela porque son recompensados con respecto por faceren longas e intricadas argumentacións, axúdenlle ou non ao proxecto. A continuación amósanse algunhas técnicas apropiadas para xerar unha atmosfera na que as accións que permitan adquirir status tamén sexan construtivas.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="delegation">
<title
>Delegación</title>

<para
>Delegar non é simplemente un xeito de repartir a carga de traballo; tamén é unha ferramenta política e social. Considera todos os efectos cando lle pides a alguén que faga algo. O efecto máis obvio é que, se acepta, el fai a tarefa e ti non. Mais outro efecto é que se decata de que ti confías nel para manexar a tarefa. Máis aínda, se fixeres a petición nun foro público, entón tamén saberá que outras persoas do grupo tamén se decataron desa confianza. Tamén é posible que se sinta presionado para aceptar, o que quere dicir que debes facerlle a petición de xeito que lle permitas declinala dun xeito apropiado se realmente non quere ese traballo. Se a tarefa require coordinación con outra xente do proxecto, entón tamén lle estás pedindo que participe dun xeito maior no proxecto, creando lazos que doutro xeito non se terían formado, e quizais que se converta nunha fonte de autoridade nalgún subdominio do proxecto. A participación adicional pode ser asoballante, ou pode conducilo a participar doutros xeitos a maiores, grazas a un renovado sentimento de compromiso.</para>

<para
>Debido a todos estes efectos, a miúdo ten sentido pedirlle a alguén que faga algo aínda que saibas que ti poderías facelo máis rápido ou mellor. Por suposto, ás veces de tódolos xeitos hai un argumento de estrita eficiencia económica: pode que o custe de oportunidade de facelo por ti mesmo sexa demasiado alto&mdash;pode haber algo mesmo máis importante que poidas facer con ese tempo que aforras. Mais mesmo cando o argumento do custe de oportunidade non for relevante, <emphasis
>aínda así</emphasis
> podes queres pedirlle a alguén que faga unha tarefa concreta debido a que no longo prazo queres que esa persoa participe máis profundamente no proxecto, mesmo se iso significa empregar un tempo extra en supervisar o seu traballo ao comezo. A técnica oposta tamén funciona: se ocasionalmente fas voluntariamente o traballo que outra persoa non quere ou non ten tempo para facer, vas gañar a súa simpatía e respecto. A delegación e a substitución non teñen a ver unicamente con conseguir que tarefas individuais sexan levadas a cabo; tamén teñen a ver con aumentar o grao de compromiso da xente co proxecto.</para>

<sect3 id="delegation-assignment">
<title
>Distingue claramente entre solicitar e asignar</title>

<para
>En ocasións é lóxico ter a expectativa de que unha persoa vaia aceptar unha tarefa concreta. Por exemplo, se alguén insire un erro dentro do código, ou fai commit de código que incumpre dun xeito obvio as directrices do proxecto, entón debería ser suficiente con sinalar o problema para asumir que a persoa implicada se fará cargo do mesmo. Mais hai outras situacións nas que non está claro que as expectativas sexan correctas. A persoa pode facer o que lle pides, ou non. Como a ninguén lle gusta que se dea por feito que vai obedecer, debes ter a sensibilidade de distinguires entre estes dous tipos de situacións, e formular a túa petición dun xeito acorde á situación que se presentar.</para>

<para
>Algo que adoita sentar mal é que lle requiras a alguén facer algo dun xeito que implique que pensas que claramente é a súa responsabilidade facelo, cando el non o pensa do mesmo xeito. Por exemplo, a asignación de incidencias entrantes adoita ser un terreo fértil para este tipo de cabreos. Os participantes dun proxecto adoitan saber quen é experto en que áreas, de tal xeito que cando se recibe unha notificación de erro, haberá unha ou dúas persoas que todo o mundo saiba que probablemente poidan solucionalo rapidamente. Aínda así, se asignares a incidencia a unha destas persoas sen o seu previo consentimento, podería sentirse posta nunha situación incómoda, dado que sente a presión das expectativas e tamén podería sentirse penalizada polo seu coñecemento e experiencia. Despois de todo, o xeito no que un adquire experiencia é mediante a resolución de erros, polo que quizais algún outro membro do grupo podería resolver este! (Ten en conta que os sistemas de notificación de erros que automaticamente asignan incidencias a persoas concretas, en base á información presente no sistema, adoitan ser menos ofensivos debido a que todo o mundo sabe que a asignación foi feita por un proceso automático, e non é un indicativo de expectativas humanas).</para>

<para
>Aínda que o desexable sexa repartir a carga o máis equitativamente posible, hai algúns momentos concretos nos que simplemente queres envolver a persoa que pode arranxar o erro o máis axiña posible. Dado que non podes afrontar un diálogo en quendas para cada asignación ("Importaríache botarlle unha ollada a este erro?" "Si." "De acordo. Daquela vou asignarche a incidencia" "De acordo"), o máis sinxelo é que fagas a asignación na forma dunha solicitude, sen exercer presión. Virtualmente todos os sistemas de notificación de erros permiten asociar un comentario coa asignación das incidencias. Nese comentario, podes dicir algo como o seguinte:</para>

<blockquote>
   <para
>Tarefa asignada para ti, X, debido a que es o que está máis familiarizado con este código. Séntete libre de devolveres a asignación se non tiveres tempo de revisala. (E faime saber se prefires non recibir este tipo de solicitudes no futuro).</para>
</blockquote>

<para
>Así distínguese claramente a <emphasis
>solicitude</emphasis
> da tarefa da <emphasis
>aceptación</emphasis
> da mesma. A audiencia nestes procesos non é unicamente o delegado, senón todo o mundo; o grupo enteiro observa unha confirmación pública do coñecemento e experiencia do delegado, mais a mensaxe tamén deixa claro que o delegado é libre de aceptar ou declinar a responsabilidade.</para>

</sect3>

<sect3 id="delegation-followup">
<title
>Persevera no delegado</title>

<para
>Cando lle pidas a alguén que faga algo, lembra que o fixeches, e persevera pase o que pasar. A maioría das solicitudes son feitas en foros públicos, máis ou menos do seguinte xeito: "Poderías encargarte de X? Dinos algo en calquera caso; non hai problema se non podes, só fáinolo saber". Podes recibir ou non unha resposta. Se a recibires, e a resposta é negativa, o círculo péchase&mdash;precisarás intentar algunha outra estratexia para emparellalo con X. Se houber unha resposta positiva, entón non perdas de vista o progreso da incidencia, e comenta o progreso que vexas ou que non vexas (todo o mundo traballa mellor cando sabe que alguén aprecia o seu traballo). Se non houber resposta despois dun poucos días, volve a preguntar, ou envía unha mensaxe dicindo que no recibiches resposta e que estades a procurar algún outro que o faga. Ou simplemente faino ti mesmo. Mais asegúrate de dicires que non recibiches resposta á solicitude inicial.</para>

<para
>O motivo de amosares publicamente a falta de resposta <emphasis
>non</emphasis
> é humillar á persoa á que se lle fixo a petición, e cando comentes o tema debes facelo de xeito que isto quede claro. O motivo é simplemente amosar que segues a pista daquilo que pides, e que notificas as reaccións que obtés. Esta forma de traballo torna máis probable que alguén che diga si a seguinte vez, porque van decatarse (aínda que só sexa de xeito inconsciente) de que vas apreciar o traballo que fagan, dado que prestas atención a detalles moito menos visibles como que alguén non responda unha solicitude.</para>

</sect3>

<sect3 id="delegation-interest">
<title
>Fíxate no que lle interesa á xente</title>

<para
>Outra cousa que fai feliz á xente é que te fixes nos seus intereses&mdash;en xeral, cantos máis aspectos da personalidade de alguén teñas presentes e lembres, máis cómodo vai estar este alguén, e máis vai querer traballar en grupos dos que ti formes parte.</para>

<para
>Por exemplo, había unha nítida diferencia no proxecto Subversion entre a xente que quería chegar a unha versión 1.0 (cousa que finalmente fixemos), e a xente que principalmente quería engadir novas funcionalidades e traballar en problemas interesantes sen importarlles moito cando iamos lanzar a versión 1.0. Ningunha destas dúas posturas é mellor ou peor que a outra; simplemente son dous tipos distintos de desenvolvedores, e ambos tipos levan a cabo moito traballo no proxecto. Mais aprendemos rapidamente que era moi importante <emphasis
>non</emphasis
> asumir que o interese por ter unha versión 1.0 era compartido por todos. As comunicacións electrónicas poden enganar; podes pensar que hai unha atmosfera de propósito común cando, realmente, dito propósito só é compartido pola xente coa que ti tes falado, mentres outras persoas teñen prioridades completamente distintas.</para>

<para
>Canto máis consciente sexas do que a xente quere obter do proxecto, máis eficiente e efectivamente podes facerlles solicitudes. Simplemente demostrares comprensión do que queren, sen faceres ningunha solicitude asociada, xa é útil, dado que lle confirma a cada persoa que non é simplemente unha partícula máis nunha masa amorfa.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="praise-and-criticism">
<title
>Louvanzas e críticas</title>

<para
>Louvanzas e críticas non son antónimos; de feito son moi similares en varias facetas. Ambos son formas de atención primarias, e son máis efectivos cando son específicos que cando son xenéricos. Ambos deben ser empregados con obxectivos concretos na mente. Ambos poden diluírse por uso en exceso: louva demasiado ou demasiado pouco e restaraslle forza ás túas louvanzas; o mesmo para o caso das críticas, aínda que na práctica a crítica adoita ser reactiva e por tanto un pouco máis resistente a perder forza. </para>

<para
>Un cuestión interesante da cultura tecnolóxica é que a detallada e desapaixonada crítica a miúdo tómase como una especie de louvanza (como se viu en <xref linkend="rudeness"/><phrase output="printed"
> en <xref linkend="communications"/></phrase
>), isto débese á implicación subxacente de que o traballo que se está criticando vale suficientemente a pena como para ser analizado polo miúdo. En calquera caso, ambos aspectos; <emphasis
>detallada</emphasis
> e <emphasis
>desapaixonada</emphasis
> deben cumprirse para que esta afirmación sexa verdade. Por exemplo, se alguén fixer algunha mudanza chapuceira no código, é inútil (e de feito é contraproducente) comentares o asunto simplemente dicindo "Fixeches unha chapuza". Ser un chapuzas é, ao final, unha característica da <emphasis
>persoa</emphasis
>, non do seu traballo, e é importante acoutar a túa atención e opinión ao traballo feito. É moito máis eficiente describires todas as cousas mal feitas que se introduciron ao facer a mudanza, e hai que facelo con tacto e sen malicia. Se esta for a terceira ou cuarta mudanza descoidada da mesma persoa, entón o máis apropiado sería mencionares o feito, despois da crítica sobre o traballo realizado, e de novo sen ningún signo de enfado, para así deixares claro que dito padrón de comportamento foi advertido.</para>

<para
>Se alguén non mellorar tras as críticas, a solución non é máis, ou peor crítica. A solución é que o grupo elimine esa persoa do traballo non que é incompetente, nun xeito no que se minimice tanto como for posible ferir os seus sentimentos; en <xref linkend="transitions"/><phrase output="printed"
> ao final deste capítulo </phrase
> podes ver uns exemplos. Este adoita ser un caso raro. A maioría da xente responde bastante ben á crítica específica, detallada e que contén unha clara (mesmo aínda que non sexa explícita) esperanza de mellora.</para>

<para
>As lovanzas non feren os sentimentos de ninguén, por suposto, mais iso non significa que deban ser empregadas con menor coidado que as críticas. A louvanzas son unha ferramenta: antes de usala, pregúntate a ti mesmo <emphasis
>por que</emphasis
> queres usala. Como regra, non é unha boa idea louvar a xente por facer aquelo que adoitan facer, ou por accións que son normais ou parte da súa participación no grupo. Se fixeras isto, sería difícil saber cando parar: deberías gabar a <emphasis
>todo o mundo</emphasis
> por facer as cousas habituais? Despois de todo, se deixas algunha xente fóra, preguntaranse por que. É moito mellor expresar gabanzas e gratitude ocasionalmente en resposta a esforzos non usuarios ou inesperados, coa intencións de fomentar máis deses esforzos. Cando un participante parece terse movido a un estado permanente de alta produtividade, axusta as túas gabanzas consecuentemente. As gabanzas repetidas por comportamentos normais acaban gradualmente perdendo o seu significado. En lugar diso, esa persoa debe sentir que o seu alto nivel de produtividade agora é considerado normal e natural, e só o traballo que vaia máis alá debe ser especialmente considerado.</para>

<para
>Isto non quere dicir que a contribución desta persoa non deba ser recoñecida, por suposto. Mais recorda que se o proxecto está ben configurado, todo o que esa persoa faga xa é visible de tódolos xeitos, e por tanto o grupo verá (e esta persoa saberá que o resto do grupo sabe) todo o que ela fai. Tamén hai outros xeitos de recoñecer o traballo de alguén mediante outros medios distintos da gabanza directa. Poderías mencionar de pasada, cando se discuta un tema relacionado, que esa persoa fixo unha cantidade enorme de traballo nesa área e por tanto é o experto na mesma; poderías consultarlle publicamente algunhas cuestións sobre o código;ou quizais sexa máis eficaz empregar o seu traballo de xeito ostensible para que a persoa poida ver que os demais se senten cómodos cos resultados do seu traballo. Probablemente non sexa necesario facer estas cousas dun xeito calculado. Alguén que regularmente faga grandes contribucións nun proxecto saberao, e ocupará por defecto unha posición de influencia. Normalmente non é necesario dar pasos explícitos para asegurar isto, a non ser que sintas que, pola razón que sexa, un contribuínte está sendo infravalorado.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="territoriality">
<title
>Evita a territorialidade</title>

<para
>Ten coidado cos participantes que intentan apropiarse en exclusividade da propiedade de certas área do proxecto, e que parece que queren facer todo o traballo nesas áreas, ata o punto de apropiárense do traballo que outros comezaron. Este comportamento pode parecer saudable ao comezo, despois de todo superficialmente parece que a persoa está collendo máis responsabilidade e amosando un incremento da actividade dentro dunha área dada, mais a longo prazo é destrutivo. Cando a xente ve un "prohibido o paso", apártase. Isto provoca unha redución da supervisión nesa área, e unha fraxilidade maior, dado que se depende da dispoñibilidade dun único desenvolvedor. Aínda peor, esta actitude rompe o espírito cooperativo e igualitario do proxecto. En teoría calquera desenvolvedor é benvido para axudar en calquera tarefa en calquera momento, na práctica por suposto as cousas funcionan dun xeito algo diferente: a xente ten áreas nas que é máis ou menos influínte, e os non expertos adoitan deixar que os expertos manexen certos dominios do proxecto. Mais a chave atópase en que todo isto é voluntario: a autoridade informal é obtida en base á competencia demostrada, mais nunca debería ser activamente <emphasis
>conquistada</emphasis
>. Incluso se a persoa que desexa a autoridade realmente é competente, segue sendo crucial que atesoure esa autoridade dun xeito informal, a través do consenso do grupo, e que a autoridade nunca provoque que exclúa aos demais do traballo nesa área.</para>

<para
>Rexeitar ou editar o traballo de alguén por motivos técnicos é unha cuestión totalmente diferente, por suposto. Aquí o factor decisivo é o contido do traballo, non o que sucede ao actuar como gardameta. Podería suceder que a mesma persoa faga a maior parte da revisión para unha área dada, mais mentres non tente evitar que os demais poidan facer tamén ese traballo, probablemente as cousas vaian ben.</para>

<para
>Para combater unha incipiente territorialidade, ou mesmo a súa aparición, moitos proxectos teñen tomada a decisión de prohibir a inclusión dos nomes dos autores, ou dos mantedores designados, non ficheiros fonte. Eu estou de acordo de todo corazón con esta práctica: nós seguímola no proxecto Subversion, e é unha directiva máis ou menos oficial na Apache Software Foundation. Sander Striker, membro da ASF, explícao deste xeito:</para>

<blockquote>
   <para
><emphasis
>At the Apache Software foundation we discourage the use of author tags in source code. There are various reasons for this, apart from the legal ramifications. Collaborative development is about working on projects as a group and caring for the project as a group. Giving credit is good, and should be done, but in a way that does not allow for false attribution, even by implication. There is no clear line for when to add or remove an author tag. Do you add your name when you change a comment? When you put in a one-line fix? Do you remove other author tags when you refactor the code and it looks 95% different? What do you do about people who go about touching every file, changing just enough to make the virtual author tag quota, so that their name will be everywhere?</emphasis
></para>

   <para
><emphasis
>There are better ways to give credit, and our preference is to use those. From a technical standpoint author tags are unnecessary; if you wish to find out who wrote a particular piece of code, the version control system can be consulted to figure that out. Author tags also tend to get out of date. Do you really wish to be contacted in private about a piece of code you wrote five years ago and were glad to have forgotten?</emphasis
></para>
</blockquote>

<para
>A software project's source code files are the core of its identity. They should reflect the fact that the developer community as a whole is responsible for them, and not be divided up into little fiefdoms.</para>

<para
>People sometimes argue in favor of author or maintainer tags in source files on the grounds that this gives visible credit to those who have done the most work there. There are two problems with this argument. First, the tags inevitably raise the awkward question of how much work one must do to get one's own name listed there too. Second, they conflate the issue of credit with that of authority: having done work in the past does not imply ownership of the area where the work was done, but it's difficult if not impossible to avoid such an implication when individual names are listed at the tops of source files. In any case, credit information can already be obtained from the version control logs and other out-of-band mechanisms like mailing list archives, so no information is lost by banning it from the source files themselves.<footnote
><para
>But see the mailing list thread entitled <citetitle
>"having authors names in .py files"</citetitle
> at <ulink url="http://groups.google.com/group/sage-devel/browse_thread/thread/e207ce2206f0beee"
></ulink
> for a good counterargument, particularly the post from William Stein. The key in that case, I think, is that many of the authors come from a culture (the academic mathematics community) where crediting directly at the source is the norm and is highly valued. In such circumstances, it may be preferable to put author names into the source files, along with precise descriptions of what each author did, since the majority of potential contributors will expect that style of acknowledgement.</para
></footnote
></para>

<para
>If your project decides to ban individual names from source files, make sure not to go overboard. For instance, many projects have a <filename
>contrib/</filename
> area where small tools and helper scripts are kept, often written by people who are otherwise not associated with the project. It's fine for those files to contain author names, because they are not really maintained by the project as a whole. On the other hand, if a contributed tool starts getting hacked on by other people in the project, eventually you may want to move it to a less isolated location and, assuming the original author approves, remove the author's name, so that the code looks like any other community-maintained resource. If the author is sensitive about this, compromise solutions are acceptable, for example:</para>

<blockquote>
<programlisting
># indexclean.py: Remove old data from a Scanley index.
#
# Original Author: K. Maru &lt;kobayashi@yetanotheremailservice.com&gt;
# Now Maintained By: The Scanley Project &lt;http://www.scanley.org/&gt;
#                    and K. Maru.
# 
# ...
</programlisting>
</blockquote>

<para
>Mais é mellor evitares estes compromisos, na medida que for posible, e a maioría dos autores están dispostos a seren persuadidos, porque se senten felices de que a súa contribución se converta nun parte máis integral do proxecto.</para>

<para
>O importante é lembrares que hai unha continuidade entre o núcleo e a periferia de calquera proxecto. Os ficheiros fonte principais para o software son claramente parte do núcleo, e debería considerarse que son mantidos pola comunidade. Por outra banda, as ferramentas de acompañamento ou as pezas de documentación poden ser o traballo de individuos isolados, os cales os manteñen en solitario, aínda cando ese traballo poida asociarse, ou mesmo distribuírse, co proxecto. Non hai necesidade de aplicar a mesma regra a cada ficheiro, sempre e cando se cumpra o principio de que os recursos mantidos pola comunidade non poidan converterse no coto privado de ninguén.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="automation">
<title
>A relación de automatización</title>

<para
>Tenta evitar que os humanos fagan aquelo que as máquinas poden facer no seu lugar. Como norma xeral, automatizar unha tarefa común supón dez veces menos traballo do que perdería un desenvolvedor facéndoa manualmente de cada vez. Para tarefas moi frecuentes ou complexas, a relación pode facilmente dispararse a vinte ou máis.</para>

<para
>Pensar en ti mesmo como un "xefe de proxecto" máis que como simplemente outro desenvolvedor pode ser unha actitude moi positiva neste particular. Ás veces os desenvolvedores individuais están demasiado metidos no traballo de baixo nivel e non son capaces de veren o cadro ao completo e decatarse de que alguén está gastando unha morea de esforzo levando a cabo manualmente tarefas que se poderían automatizar. Mesmo aqueles que si que se decatan poden non empregar o tempo preciso para resolveren o problema: dado que o rendemento e custo individual de cada tarefa non se presentan como demasiado altos no conxunto, nunca ninguén se anoxa tanto como para facer algo ao respecto. O que fai atractiva a automatización é que esa pequena carga multiplícase polo número de veces que cada desenvolvedor debe afrontala, e <emphasis
>ese</emphasis
> número aínda hai que multiplicalo polo número de desenvolvedores.</para>

<para
>Aquí estou a empregar o termo "automatización" nun senso amplo, para dar a entender non unicamente tarefas repetitivas onde unha ou dúas variables mudan de cada vez, senón tamén calquera tipo de infraestrutura técnica que axude os humanos. A automatización mínima estándar precisa para levar a cabo un proxecto a día de hoxe describiuse en <xref linkend="technical-infrastructure"/>, mais cada proxecto pode ter a súa problemática específica, por suposto. Por exemplo, un grupo traballando en documentación podería querer ter un sitio web no que se mostren as versións máis actualizadas dos documentos en cada momento. Dado que a documentación adoita escribirse en linguaxes de marcado estilo XML, pode haber un paso de compilación, ás veces bastante intricado, involucrado na creación dos documentos visualizables e descarregables. Desenvolver unha páxina web onde esta compilación se faga de xeito automático ante cada commit pode ser complexo e bastante esixente en tempo&mdash;mais é rendible, mesmo se a súa configuración che custa un día ou máis. O beneficio xeral de ter páxinas actualizadas dispoñibles en todo momento é enorme, mesmo se o custo de <emphasis
>non</emphasis
> telas puidese parecerlle un tema menor nun momento concreto a algún desenvolvedor concreto.</para>

<para
>Dar estes pasos non só elimina gastos de tempo, senón que tamén elimina as obsesións e frustracións que aparecen nas persoas cando cometen erros (cousa que inevitablemente vai suceder) ao tentar executaren manualmente procedementos complexos. As operacións deterministas de varios pasos é precisamente para o que se inventaron os computadores; deixa que os humanos fagan cousas máis interesantes.</para>

<sect3 id="automated-testing">
<title
>Probas automáticas</title>

<para
>As execucións automáticas de probas son útiles para calquera proxecto de software, pero aínda o son máis no caso dos proxectos de software libre, dado que a testaxe automatizada (especialmente a testaxe de regresión) permite que os desenvolvedores se sintan cómodos mudando código en áreas que non lles son familiares, e mesmo fomenta o desenvolvemento exploratorio. Como é moi difícil detectar fallos a man&mdash;tes que adiviñar onde puideches romper algo, e probar varios experimentos para comprobares se o fixeches ou non&mdash;ter mecanismos automatizados para detectar estes erros afórralle ao proxecto <emphasis
>unha chea</emphasis
> de tempo. A maiores, tamén consegue que a xente se sinta máis relaxada á hora de refactorizar grandes conxuntos de código, e polo tanto contribúe a manter a longo prazo o software.</para>

  <sidebar id="regression-testing">
  <title
>Probas de regresión</title>

  <para
>As <firstterm
>probas de regresión</firstterm
> son as comprobacións que se fan para detectar a reaparición de erros previamente reparados. A finalidade das probas de regresión é reducir a probabilidade de que mudanzas no código rompan o software de xeito inesperado. Do mesmo xeito que un proxecto de software vai aumentando de tamaño e complexidade, as probabilidades destes efectos colaterais aumentan da man. Un bo deseño pode reducir a relación de incremento destas probabilidades, mais non pode eliminar o problema por completo.</para>

  <para
>Como resposta a esta problemática, moitos proxectos teñen unha <firstterm
>colección de probas</firstterm
>, un programa separado que invoca o software do proxecto en casuísticas nas que se sabe que no pasado se producían erros. Se a colección de probas fai que aparezan algúns deste erros, entón este feito coñécese como <firstterm
>regresión</firstterm
>, o que quere dicir que as mudanzas feitas por alguén reabriron un erro previamente reparado.</para>

  <para
>Bótalle unha ollada a <ulink url="http://en.wikipedia.org/wiki/Regression_testing"
></ulink
>.</para>

  </sidebar>

<para
>As probas de regresión non son a panacea. Ten en conta que funcionan mellor con programas con interfaces ao estilo dos procesos por lotes. O software que se opera principalmente a través de interfaces de usuario é moito máis complicado de manexar programaticamente. Outro problema é que o marco das coleccións de proba para comprobacións de regresión habitualmente é bastante complexo, cunha curva de aprendizaxe e de mantemento nada desprezables. Reducir esta complexidade é unha das cousas máis útiles que podes facer, mesmo se implica a inversión dunha morea considerable de tempo. Canto máis sinxelo for engadir novas comprobacións á colección, máis desenvolvedores as engadirán, e así a taxa de supervivencia dos erros será moito menor. Calquera esforzo dirixido a facer que as comprobacións sexan máis sinxelas de compoñer será recompensado con xuros abundantes ao longo do ciclo de vida do proxecto.</para>

<para
>Moitos proxectos observan con decisión a regra de <firstterm
>"Non rompas o que funciona!" </firstterm
>, o que significa: non fagas mudanzas que deixen o software nun estado no que non compile ou non execute. Ser a persoa que rompeu a compilación ou execución adoita causar certa vergoña e burla. Os proxectos que teñen coleccións de probas de regresión habitualmente teñen como norma un corolario da anterior: non fagas ningunha mudanza que provoque que as comprobacións fallen. Estes fallos son sinxelos de identificar se hai execucións nocturnas automáticas das coleccións de proba nas que se envíen os resultados por correo-e á lista de desenvolvemento ou a listas dedicadas aos resultados das probas; este é outro exemplo de automatización que vale a pena.</para>

<para
>A maioría dos desenvolvedores voluntarios están dispostos a empregaren tempo extra en escribiren probas de regresión, sempre e cando o sistema de comprobacións sexa comprensible e sexa fácil de traballar con el. O acompañamento das mudanzas coas comprobacións habitualmente enténdese como unha cuestión de responsabilidade, e a maiores tamén é unha boa oportunidade para que xurda a colaboración: habitualmente dous desenvolvedores divídense o traballo preciso para reparar un erro, cun deles escribindo a corrección en si mesma, e co outro escribindo a comprobación. O segundo desenvolvedor pode ter ao final máis traballo, e a maiores escribir a comprobación é menos satisfactorio que escribir a corrección do erro, polo que se torna imperativo que a experiencia de usuario coa colección de comprobacións non sexa máis dolorosa do imprescindible.</para>

<para
>Algúns proxectos aínda van máis alá, requirindo que unha nova comprobación acompañe <emphasis
>cada</emphasis
> solución de erros ou nova funcionalidade. Pode ser unha boa idea ou non en función de varios factores: a natureza do software, a predisposición do equipo de desenvolvemento, e a dificultade de escribir novas comprobacións. O proxecto CVS (<ulink url="http://www.cvshome.org/"
></ulink
>) hai tempo que tivo esta norma. En teoría é unha boa política, dado que CVS é un software de control de versións e por tanto debe ter unha alta aversión polos riscos e posibilidades de perder ou corromper os datos dos usuarios. Na práctica o problema está en que a colección de probas de regresión de CVS é un solitario script para consola de comandos (apropiadamente chamado <filename
>sanity.sh</filename
>) moi difícil de ler, modificar ou estender. A dificultade de engadir novos casos de proba, combinada co requisito de que os remendos deben estar acompañados de novas comprobacións, provoca que efectivamente CVS free o envío de remendos. Cando traballaba en CVS, ás veces vin xente comezar ou mesmo rematar un remendo para CVS, mais renderse e abandonar cando lles mencionaba o requisito de que tiñan que engadir un novo caso de proba ao ficheiro <filename
>sanity.sh</filename
>.</para>

<para
>É normal empregares máis tempo escribindo un novo caso de proba de regresión que en solucionares o erro orixinal. Mais CVS levou este fenómeno ás súas últimas consecuencias: podías perder horas tentando deseñar convenientemente un novo caso de proba, e mesmo así non conseguilo debido a que había demasiadas complexidades imprevisibles á hora de mudar un ficheiro de liña de comandos composto por 35.000 liñas de código. Mesmo os desenvolvedores que participaban desde había moito tempo rosmaban cando tiñan que engadir un novo caso de proba.</para>

<para
>Esta situación debíase a un fallo de parte a parte na consideración da relación de automatización. É certo que facer a mudanza a un marco de comprobacións real&mdash;tanto fose personalizado como empregado así como saía da caixa&mdash;tería sido un esforzo moi grande.<footnote
><para
>. Ten en conta que non había a necesidade de converter todas as probas preexistentes ao novo marco/ferramenta de comprobación; os dous marcos/ferramentas poderían convivir, convertendo unicamente aquelas comprobacións que precisaran ser actualizadas.</para
></footnote
> Mais negarse a facelo tivo un custo moito maior para o proxecto, ao longo dos anos. Cantas correccións de erros e novas funcionalidades <emphasis
>non</emphasis
> están incluídas en CVS hoxe en día debido ás dificultades que producía unha colección de probas pouco axeitada? Non podemos saber o número exacto, mais seguramente sexa varias veces maior que o número de correccións de erros e novas funcionalidades que se perderían polo gasto do tempo preciso para desenvolver un novo sistema de comprobación (ou integrar un xa desenvolvido). Esta tarefa consumiría unicamente unha cantidade de tempo finita, mentres que a penalización derivada do uso do sistema de comprobacións que se emprega prolongarase para sempre se non se fai nada ao respecto.</para>

<para
>A cuestión non está en que ter requisitos estritos de escritura de comprobacións sexa malo, nin peor que escribir o teu sistema de comprobacións como un script por liña de comandos. Todo isto podería funcionar ben, dependendo de como o deseñes e do que necesites comprobar. A cuestión redúcese a que cando o sistema de comprobacións se convirte nun impedimento significativo para o desenvolvemento, debes facer algo. O mesmo pensamento pode estenderse para calquera proceso rotineiro que se converte nunha barreira ou gargalo.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="users-to-volunteers">
<title
>Trata a cada usuario como un potencial voluntario</title>

<para
>Todo contacto cun usuario é unha oportunidade para captares un novo voluntario. Cando un usuario se molesta en enviar unha mensaxe a unha lista de correo ou cubrir un erro no bugtracker, está amosando máis potencial de colaboración que a maioría de outros usuarios dos que nunca se saberá nada. Fomenta ese potencial: se enviar un erro, agradécelle o traballo e pregúntalle se desexa corrixilo. Se apuntou que á FAQ lle falta algunha cuestión importante ou que a documentación é mellorable en certo punto, entón recoñece abertamente o problema (se en verdade existir) e pregúntalle se está interesado en resolvelo el mesmo. Evidentemente, algúns porán obxeccións e non o farán. Mais non custa nada preguntar, e cada vez que o fas, estás recordándolle aos outros usuarios que participar no proxecto é algo que todo o mundo pode facer.</para>

<para
>Non limites os teus obxectivos para conseguires novos desenvolvedores e persoas que documenten. Por exemplo, formar xente para escribir bos informes de erros paga a pena a longo prazo, se non empregares <emphasis
>demasiado</emphasis
> tempo por persoa e se eles van a enviar máis informes no futuro &mdash; o que é probable que fagan se teñen unha relación construtiva co proxecto desde o inicio. Unha relación construtiva non quere dicir que o erro se resolva, aínda que iso é o ideal; senón que pode ser simplemente unha solicitude de máis información ou unha confirmación de que <emphasis
>si</emphasis
> é un erro. A xente desexa que a escoiten. Ademais, desexa que os erros sexan resoltos. Aínda que non se poida resolver o erro de inmediato, sempre se pode escoitar os colaboradores.</para>

<para
>Un corolario disto é que os desenvolvedores non deberían expresar enfado ante a xente que envía informes ben intencionados aínda que vagos. Esta é a miña maior queixa; vexo a desenvolvedores facelo en todo momento en varias listas de correo de proxectos de software libre e o dano que iso fai é palpable. Algún usuario novo non informático pode escribir un informe non inútil, como o que segue:</para>

<blockquote>
   <para
>Hi, I can't get Scanley to run. Every time I start it up, it just errors. Is anyone else seeing this problem?</para>
</blockquote>

<para
>Some developer&mdash;who has seen this kind of report a thousand times, and hasn't stopped to think that the newbie has not&mdash;will respond like this:</para>

<blockquote>
   <para
>What are we supposed to do with so little information? Sheesh. Give us at least some details, like the version of Scanley, your operating system, and the error.</para>
</blockquote>

<para
>This developer has failed to see things from the user's point of view, and also failed to consider the effect such a reaction might have on all the <emphasis
>other</emphasis
> people watching the exchange. Naturally a user who has no programming experience, and no prior experience reporting bugs, will not know how to write a bug report. What is the right way to handle such a person? Educate them! And do it in such a way that they come back for more:</para>

<blockquote>
   <para
>Sorry you're having trouble. We'll need more information in order to figure out what's happening here. Please tell us the version of Scanley, your operating system, and the exact text of the error. The very best thing you can do is send a transcript showing the exact commands you ran, and the output they produced. See http://www.scanley.org/how_to_report_a_bug.html for more.</para
> 
</blockquote>

<para
>This way of responding is far more effective at extracting the needed information from the user, because it is written to the user's point of view. First, it expresses sympathy: <emphasis
>You had a problem; we feel your pain</emphasis
>. (This is not necessary in every bug report response; it depends on the severity of the problem and how upset the user seemed.) Second, instead of belittling her for not knowing how to report a bug, it tells her how, and in enough detail to be actually useful&mdash;for example, many users don't realize that "show us the error" means "show us the exact text of the error, with no omissions or abridgements." The first time you work with such a user, you need to be specific about that. Finally, it offers a pointer to much more detailed and complete instructions for reporting bugs. If you have successfully engaged with the user, she will often take the time to read that document and do what it says. This means, of course, that you have to have the document prepared in advance. It should give clear instructions about what kind of information your development team wants to see in every bug report. Ideally, it should also evolve over time in response to the particular sorts of omissions and misreports users tend to make for your project.</para>

<para
>The Subversion project's bug reporting instructions are a fairly standard example of the form (see <xref linkend="bug-reporting"/>). Notice how they close with an invitation to provide a patch to fix the bug. This is not because such an invitation will lead to a greater patch/report ratio&mdash;most users who are capable of fixing bugs already know that a patch would be welcome, and don't need to be told. The invitation's real purpose is to emphasize to all readers, especially those new to the project or new to free software in general, that the project runs on volunteer contributions. In a sense, the project's current developers are no more responsible for fixing the bug than is the person who reported it. This is an important point that many new users will not be familiar with. Once they realize it, they're more likely to help make the fix happen, if not by contributing code then by providing a more thorough reproduction recipe, or by offering to test fixes that other people post. The goal is to make every user realize that there is no <emphasis
>innate</emphasis
> difference between herself and the people who work on the project&mdash;that it's a question of how much time and effort one puts in, not a question of who one is.</para>

<para
>The admonition against responding angrily does not apply to rude users. Occasionally people post bug reports or complaints that, regardless of their informational content, show a sneering contempt at the project for some failing. Often such people are alternately insulting and flattering, such as the person who posted this to a Subversion mailing list:</para>

<blockquote>
<para
>Why is it that after almost 6 days there still aren't any binaries posted for the windows platform?!? It's the same story every time and it's pretty frustrating. Why aren't these things automated so that they could be available immediately?? When you post an "RC" build, I think the idea is that you want users to test the build, but yet you don't provide any way of doing so. Why even have a soak period if you provide no means of testing??</para>
</blockquote>

<para
>Initial response to this rather inflammatory post was surprisingly restrained: people pointed out that the project had a published policy of not providing official binaries, and said, with varying degrees of annoyance, that he ought to volunteer to produce them himself if they were so important to him. Believe it or not, his next post started with these lines:</para>

<blockquote>
<para
>First of all, let me say that I think Subversion is awesome and I really appreciate the efforts of everyone involved. [...]</para>
</blockquote>

<para
>... e entón voltou <emphasis
>de novo</emphasis
> a reprender a xente do proxecto por non proporcionar os binarios, aínda que non se propuxo voluntario para facer nada. Despois diso, unhas 50 persoas se abalanzaron sobre el, e non podo dicir que me preocupase demasiado. A política de "tolerancia cero" contra a mala educación predicada anteriormente <xref linkend="prevent-rudeness"/><phrase output="printed"
> en <xref linkend="getting-started"/></phrase
> aplícase ás persoas coas que o proxecto ten (o debería ter) unha interacción sostida no tempo, mais cando alguén se postula como unha fonte de malos modais dende o comezo, non paga a pena facer que se sinta como na casa.</para>

<para
>Afortunadamente, tales situacións son raras e son aínda moito máis estranas naqueles proxectos que fan o esforzo de integrar os novos participantes de modo construtivo e cortesmente desde o inicio.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="share-management">
<title
>Comparte as tarefas de xestión así como as técnicas</title>

<para
>Comparte tanto o traballo de xestión así como o técnico do día a día do proxecto. A medida que un proxecto se fai máis complexo, cada vez máis traballo ten que ver con xestión da xente e fluxo de información. Non hai razón para non compartir esas tarefas, e por compartir non quero dicir necesariamente unha xerarquía top-down &mdash; na práctica dáse máis unha topoloxía de redes igualitarias antes que unha estrutura de estilo militar.</para>

<para
>Algunhas veces, os roles de xestión están formalizados e outros emerxen de modo espontáneo. No proxecto Subversion, temos un xestor de remendos, outro de traducións, de documentación, xestión de incidencias (aínda que non oficial) e un xestor das publicacións do software. Algúns deses roles saíron dunha decisión consciente, outros simplemente emerxeron por si mesmos; a medida que o proxecto medre, supoño que máis roles aparecerán. A continuación examinaranse ese roles e outros en detalle (a excepción do xestor de publicación, o do que xa se falou en <xref linkend="release-manager"/> e <xref linkend="release-owner"/><phrase output="printed"
></phrase
>).</para>

<para
>A medida que vexas as descrición dos roles, observa como ningún deles require control exclusivo sobre o dominio en cuestión. O xestor de incidencias non evita que outra xente faga mudanzas na base de datos de incidencias, a persoa encargada da FAQ non pretende ser a única persoa en editar a FAQ, etc. Eses roles versan sobre responsabilidades, non sobre monopolio. Unha parte importante sobre o traballo de cada un dos xestores é observar cando a xente está a traballar nese dominio e axudalos para que fagan mellor as cousas, de cara a que os múltiples esforzos se vexan multiplicados e non entren en conflito. Os xestores deberían tamén documentar os procesos mediante os que fan o seu traballo, para que cando un queira deixalo, algún outro poida retomar o seu traballo.</para>

<para
>A veces existe un conflito: dúas ou máis persoas desexan o mesmo rol. Non hai un modo correcto de xestionar isto. Pódese suxerir que cada voluntario propoña unha candidatura e tódalas persoas con acceso ao repositorio voten sobre cal lles parece a mellor. Mais esta técnica é potencialmente nociva. Unha mellor é falar cos múltiples candidatos para que entre eles cheguen a un consenso. Habitualmente chegarán a el, e esta solución sentirase como máis xusta que se viñer imposta por alguén de fóra.</para>

<sect2 id="patch-manager">
<title
>Xestor de remendos</title>

<para
>Nun proxecto de software libre que recibe moitos remendos, facer seguimento de cada un deles pode ser un pesadelo, especialmente se se fixer dun modo descentralizado. A maioría dos remendos son enviados como mensaxes á lista de correo (aínda que algún deles pode ser enviado ao xestor de incidencias, ou ter aparecido nalgún sitio web), e existen varios camiños que poden seguir desde ese momento.</para>

<para
>Ás veces, alguén revisa o remendos atopa algún problema e encamíñao ao autor orixinal para que corrixa os erros. Este proceso habitualmente leva a un proceso iterativo &mdash;sempre visible a través da lista de correo&mdash; no que o autor orixinal envía versións sucesivas do remendo ata que ninguén ten nada máis que criticar. Non sempre é sinxelo saber cando remata o proceso: se o revisor fixer commit do remendo, claramente o proceso está completo. Mais se non for así, podo ser porque non tivo tempo, ou non ten acceso de commit e non puido falar con outros desenvolvedores para que o fixesen.</para>

<para
>Outra resposta frecuente é un debate espontáneo, non necesariamente sobre o remendo, senón sobre se o concepto detrás do remendo é adecuado. Por exemplo, o remendo pode ter un erro, mais o proxecto prefire arranxalo doutro modo, como parte dunha estratexia para resolver unha clase máis xeral de problemas. Habitualmente, isto non se sabe por adiantado, é o mesmo remendo o que fai o descubrimento.</para>

<para
>Ocasionalmente, o remendo atópase con silencio absoluto. Isto soe acontecer porque ningún desenvolvedor ten tempo <emphasis
>nese preciso instante</emphasis
> para revisalo, e cada un deles espera que outro o revise. Debido a que non hai un límite específico sobre canto unha persoa pode esperar para que alguén responda e que poden chegar novas prioridades ao proxecto, é moi sinxelo que un remendo pase desapercibido. O proxecto pode estar perdendo un bo remendo, mais existen outros efectos colaterais peores que este: é desalentador para o autor -quen ten invertido traballo no remendo- e transmite que o proxecto non está ó día, sobre todo con esa xente que escribe e envía remendos.</para>

<para
>O traballo do xestor de remendos é asegurarse de que os remendos non se perden no vacuo. Isto faise seguindo a evolución de cada remendo con algunha clase de táboa de estado. O xestor de remendos vixía cada lista de correo na que se envían remendos. Se o envío do remendo finaliza en commit, non fai nada. Se entra nun proceso interactivo de revisión, tendo unha versión do remendo definitiva mais non se fai comit, preocúpase de cubrir unha incidencia que apunte a esa versión final do remendo e á lista de correo na que sucedeu, para que sexa sinxelo que os desenvolvedores o revisen máis tarde. Se o remendo ten a ver cunha incidencia concreta, anota toda esa información baixo a incidencia existente.</para>

<para
>Cando un remendo non xera ningunha reacción, o xestor de remendos espera uns poucos días, e entón pregunta se alguén vai a revisalo. En xeral, isto xera algunha reacción: un desenvolvedor pode explicar que o remendo non debería ser aplicado ou pode revisalo el mesmo, dando lugar a un dos camiños expostos anteriormente. Se a pesar diso, non hai resposta, o xestor de remendo pode (ou non) cubrir unha incidencia para o remendo segundo mellor vexa, mais polo menos o autor orixinal obtén <emphasis
>algún</emphasis
> feedback.</para>

<para
>Para o proxecto Subversion, ter un xestor de remendos supuxo un aforro de tempo e enerxía mental. Sen unha persoa especialmente dedicada a estes temas, cada desenvolvedor tería que preocuparse constantemente sobre a xestión do mesmo: "Se non teño tempo de respondelo agora, podo confiar en alguén para que o faga? Debería botarlle un ollo? E se outra xente xa o está revisando? Entón estaríamos duplicando esforzos de modo innecesario". O xestor de remendos elimina este tipo de dúbidas e cuestións. Cada desenvolvedor toma a decisión que mellor lle veña no mesmo momento en que ve o remendo: se desexa seguilo e revisalo, pode facelo. Se vai ignoralo, iso tamén está ben, xa que o xestor do remendo fará que non fique no olvido.</para>

<para
>Este sistema funciona só se a xente pode confiar en que o xestor de remendo vai estar aí sempre, o rol debe ser formalmente declarado. En Subversion, publicitámolo nas listas de correo de usuarios e desenvolvedores, obtendo bastantes voluntarios e escollendo ó primeiro que respondeu. Cando esta persoa tivo que deixalo (ver <xref linkend="transitions"/><phrase output="printed"
> máis adiante</phrase
>), fixemos o mesmo de novo. Nunca se tentou ter varias persoas co mesmo rol, debido á sobrecarga en comunicacións que requiriría entre ambos, mais talvez en proxectos con moita carga de remendos, un equipo de xestores de remendos teña sentido.</para>

</sect2>

<sect2 id="translation-manager">
<title
>Xestor das traducións</title>

<para
>Nos proxectos de software, "tradución" pode referirse a cousas moi diferentes. Por un lado, pode ter que ver coa tradución da documentación a outras linguaxes, polo outro, pode referirse á tradución da aplicación &mdash; é dicir, facer que as mensaxes que emite o programa estean dispoñibles na linguaxe preferida polo usuario. Ambas son tarefas complexas, mais unha vez a infraestrutura estiver lista, son tarefas ben diferenciadas de outras de desenvolvemento. Xa que son similares entre elas, pode ter sentido (dependendo do proxecto) ter un xestor de traducións que manexe as dúas, ou polo contrario pode ter sentido ter dous diferentes.</para>

<para
>No proxecto Subversion, temos a unha única persoa xestionando ambas. Esta persoa non escribe as traducións por si mesmo, desde logo &mdash; pode botar unha man nunha ou dúas, mais precisaría falar 10 linguas (12 dialectos) para traballar en todas elas! O seu labor ten que ver coa xestión de voluntarios e equipos de tradución: axúdaos a coordinárense entre eles, e esta persoa é o punto común entre todos os equipos e o resto do proxecto.</para>

<para
>Unha das razóns principais polas que o xestor de tradución é necesario, é que en xeral, os tradutores son bastante diferentes dos desenvolvedores. Ás veces, teñen pouca ou ningunha experiencia traballando con sistemas de control de versións, ou mesmo de traballo dentro dun grupo distribuído de voluntarios. Mais noutros aspectos son os mellores voluntarios: xente con coñecemento do dominio que viu unha necesidade e desexa participar na súa resolución. Habitualmente están dispostos a aprenderen todo o necesario e son entusiastas do seu traballo. Todo o que precisan é que alguén os guíe. O xestor de traducións asegúrase de que as mesmas evolúan correctamente sen interferiren no desenvolvemento regular do proxecto. Tamén exerce de representante dos tradutores como un grupo en si mesmo, cando se comunica con desenvolvedores de cara a informalos de mudanzas técnicas necesarias para mellorar o traballo de tradución.</para>

<para
>Sendo así, as capacidades máis valiosas para este posto son diplomáticas, non técnicas. Por exemplo, no proxecto Subversion temos a política de que tódalas traducións deben ter polo menos 2 persoas traballando nelas, debido a que doutro xeito o texto non será revisado. Cando un novo voluntario se ofrece a traducir o proxecto a, por exemplo, Malagasy, o xestor de tradución ten que presentarlle a alguén quen informou 6 meses atrás de que quería traducir o proxecto a Malagasy ou amablemente indicarlle que busque <emphasis
>outro</emphasis
> tradutor. Unha vez que se consegue a xente suficiente, o xestor ocúpase de todo o relativo a darlle acceso de commiter, informalos sobre as convencións do proxecto (tales como escribir mensaxes de log) e fai o seguimento oportuno para que sigan esas convencións.</para>

<para
>As conversas entre os desenvolvedores e o xestor de traducións, ou entre este e os equipos de tradución, mantéñense na lingua franca do proxecto &mdash; é dicir, na lingua orixe desde a que se fan tódalas traducións. Para a maioría de proxectos de software libre, esta lingua é o inglés, mais non importa cal sexa sempre e cando o proxecto teña un acordo sobre a mesma (o inglés é probablemente mellor para proxectos que desexen atraer unha comunidade de desenvolvedores internacional).</para>

<para
>As conversas <emphasis
>dentro </emphasis
>dun equipo de tradución, habitualmente teñen lugar na súa lingua compartida. Unha das tarefas que debe levar a cabo o xestor de traducións é encargarse de que o equipo teña unha lista de correo exclusiva para eles. Deste modo, os tradutores poden debater o seu traballo libremente, sen distraeren outras persoas que están noutras listas de correo, a maioría das cales non entenderán a lingua.</para>

  <sidebar id="i7n">
  <title
>Internacionalización versus localización</title>
  
  <para
><firstterm
>Internacionalización</firstterm
> (<firstterm
>I18N</firstterm
>) e <firstterm
>localización</firstterm
> (<firstterm
>L10N</firstterm
>) refírense ao proceso de adaptación dun programa a outros entornos lingüísticos e culturais diferentes do orixinal onde foi creado. Embora habitualmente o uso dos termos se troque, non se refiren ao mesmo. Como <ulink url="http://en.wikipedia.org/wiki/G11n"
></ulink
> describe:</para>

  <blockquote>
     <para
>A distinción entre eles é sutil aínda que importante: a internacionalización é a adaptación de produtos para o seu <emphasis
>potencial</emphasis
> uso en todas partes, mentres a localización ten a ver con engadir funcionalidades <emphasis
>específicas</emphasis
> para o seu uso en determinados entornos.</para>
  </blockquote>

  <para
>Por exemplo, o feito de mudar o teu programa para que use Unicode (<ulink url="http://en.wikipedia.org/wiki/Unicode"
></ulink
>) como formato de codificación de texto é un movemento de internacionalización, xa que non se refire a unha linguaxe particular senón a facilitar o procesamento de texto en múltiples linguaxes. Por outra banda, facer que o programa imprima tódalas mensaxes de erro en esloveno, cando se detecta que está sobre un entorno configurado para tal linguaxe, é un movemento de localización.</para>

  <para
>Así, as tarefas do xestor de traducións refírense principalmente á localización, non á internacionalización.</para>
  
  </sidebar>

</sect2>

<sect2 id="documentation-manager">
<title
>Xestor de documentación</title>

<para
>O mantemento da documentación é unha tarefa que nunca remata. Cada nova funcionalidade ou mellora introducida no código pode esixir unha mudanza na documentación. Ademais, cando a documentación dun proxecto atinxe un certo nivel de completitude, verás que moitos dos remendos que a xente envía son para a documentación, non para o código. Isto débese a que hai máis xente competente para resolver erros na prosa que no código: tódolos usuarios son lectores, mais só uns poucos son programadores.</para>

<para
>Os remendos de documentación son máis sinxelos de revisar e aplicar que os de código. Hai pouco que revisar ou testar, e a calidade da mudanza pode ser avaliada rapidamente mediante a revisión do texto. Xa que a cantidade é alta e a carga de revisión é baixa, a relación de carga administrativa en relación ao traballo produtivo é maior para remendos de documentación que para os de código. Por outra banda, a maioría dos remendos probablemente precisarán de algún axuste, de cara a manter unha voz única ao longo de toda a documentación. En moitos casos, os remendos estarán solapados ou afectarán a outros remendos, e precisarán ser axustados antes de facerse commit con eles.</para>

<para
>Dadas as esixencias de xestión dos remendos de documentación, e o feito de que o código precisa ser monitorizado constantemente para que a documentación estea actualizada, ten sentido que unha persoa ou un equipo se dedique á tarefa. Eles poden facer seguimento de onde e como a documentación vai atrasada con respecto do código, ademais de que poden ter desenvolvido procedementos eficientes para manexar grandes cantidades de remendos dun modo integrado.</para>

<para
>Evidentemente, isto non impide que outras persoas poidan enviar e aplicar mudanzas na documentación, especialmente os pequenos. O mesmo xestor de remendos (ver <xref linkend="patch-manager"/><phrase output="printed"
> anteriormente neste mesmo capítulo</phrase
>) pode facer seguimento tanto dos remendos de código como dos de documentación, cubríndoos onde os equipos de desenvolvemento e documentación estiveren habituados a recibilos. (Se a cantidade de remendos en total excede o que unha persoa pode seguir, dividir o traballo entre un xestor de remendos de código e outro de documentación é probablemente un bo primeiro paso). A vantaxe de ter un equipo de documentación é ter persoas que teñan en mente a tarefa de manter a documentación organizada, actualizada e coherente. Na práctica, isto quere dicir coñecer a documentación en profundidade, revisar o código, ver tamén as mudanzas que <emphasis
>outros</emphasis
> fan sobre a documentación, revisar remendos á documentación e usar toda esas fontes de información para facer o que for necesario para manter a documentación nun bo estado.</para>

</sect2>

<sect2 id="issue-manager">
<title
>Xestor de incidencias</title>

<para
>O número de incidencias no sistema de xestión de erros do proxecto crece proporcionalmente co número de xente que usa o programa. Embora arranxes erros e distribúas unha aplicación cada vez máis robusta, deberías esperar que o número de erros abertos medre. Tamén se incrementará a frecuencia de erros duplicados, así como a de aqueles incompletos ou pobremente descritos.</para>

<para
>Os xestores de erros axudan a aliviar eses problemas mediante a revisión de todo o que se vai introducindo na base de datos, e de forma periódica buscando problemas específicos. A tarefa máis común probablemente sexa a de revisar tódolos erros novos e comprobar que non son duplicados de outros ou que os campos están correctamente preenchidos. Obviamente, canto máis familiarizada estiver esta persoa coa base de datos do proxecto, máis eficientemente será capaz de detectar duplicados &mdash; o que é unha das principais vantaxes de ter unha pouca xente especializada, en vez de ter a todo o mundo tratando de facelo <foreignphrase
>ad hoc</foreignphrase
>. Cando un grupo trata de facelo dun modo descentralizado, ninguén adquire un coñecemento profundo do contido da base de datos.</para>

<para
>Os xestores de erros poden tamén axudar tamén a diminuír a fenda existente entre usuarios e desenvolvedores. Cando se notifican moitos erros, non tódolos desenvolvedores poden seguir con igual atención a lista de correo. Porén, si alguén próximo ao equipo de desenvolvemento revisa tódolos erros entrantes, pode chamar a atención dun desenvolvedor sobre un problema concreto que a este se lle pasou. Desde logo, isto ten que facerse coa sensibilidade adecuada. É unha boa práctica que os xestores de erros sexan á súa vez desenvolvedores.</para>

<para
>En función de como o proxecto use o sistema de envío de erros, os coordinadores poden tamén darlle forma á base de datos para reflectir as prioridades actuais do proxecto. Por exemplo, no proxecto Subversion programabamos certas funcionalidades/corrección de erros para certas versións futuras do proxecto. Seguindo esta política, cando alguén pregunta "Cando será resolto este erro?" podemos dicir "dentro de 2 versións", mesmo se non for posible dar unha data exacta. As versións estaban representadas no sistema como milestones (marcos), un campo dispoñible na aplicación que nos usabamos IssueZilla.<footnote
><para
>IssueZilla é un sistema xestor de erros descendente de BugZilla</para
></footnote
> Como norma, cada nova versión de Subversion ten unha nova funcionalidade e un conxunto de erros resoltos. Nós asignamos o milestone adecuado a tódalas incidencias planeadas para esa versión (incluíndo a nova funcionalidade &mdash; nós considerámola tamén como unha incidencia), así a xente pode navegar na base de datos a través das diferentes versións sabendo que mudanzas incluirán. Porén, eses obxectivos raramente se manteñen estáticos. A medida que chegan novos erros, as prioridades teñen que ser repensadas e as incidencias deben ser re-planeadas dun milestone a outro, de cara a que a nova versión sexa manexable. Este traballo, é mellor que o faga xente que teña unha visión global do que hai na base de datos e de como as diferentes incidencias se relacionan entre si.</para>

<para
>Outra das tarefas que leva a cabo un coordinador é ver cando unha incidencia é obsoleta. A veces, un erro é corrixido accidentalmente como parte dunha mudanza no programa, ou a veces a xente implicada muda de opinión sobre se un comportamento é erróneo. Atopar incidencias obsoletas non é sinxelo: o único modo de facelo é rastreando sistematicamente a base de datos do proxecto. Os rastrexos completos son menos prácticos a medida que aumenta o número de incidencias. Chegado a certo punto, a única aproximación para manter unha lista de erros adecuada é usar a estratexia de divide e vencerás: categorizar as incidencias a medida que cheguen e dirixilas directamente ao desenvolvedor ou equipo adecuado. Esa persoa ou grupo de persoas faise cargo desa incidencia desde entón, ficando obrigado a resolvela ou encamiñala cando for necesario. Cando a base de datos é moi grande, o xestor de incidencias parécese máis a un coordinador, invertendo menos tempo revisando cada incidencia e máis en encamiñala á persoa adecuada.</para>

</sect2>

<sect2 id="faq-manager">
<title
>Xestor da FAQ (Preguntas Frecuentes)</title>

<para
>Contra todo prognóstico, o mantemento da FAQ é un problema complexo. A diferencia da maioría dos documentos dun proxecto, cuxos contidos son planeados por adiantado polos propios autores, a FAQ é un documento reactivo (ver <xref linkend="starting-a-faq"/>). Non importa como de grande sexa, é imposible coñecer cal será o seguinte engadido. E debido a que vai crecendo por pequenas mudanzas, é sinxelo que se converta nun documento desorganizado e incoherente, mesmo contendo duplicados ou semi-duplicados. Mesmo cando non existan obvios problemas como eses, haberá interdependencias entre os temas &mdash; ligazóns que deberían estar mais non están&mdash; debido a que os items relacionados foron engadidos un ano atrás.</para>

<para
>O rol do xestor da FAQ ten dúas caras. A primeira, consiste en manter a calidade global da FAQ e estar familiarizado con tódolos temas que hai en ela, para que cando a xente engada novos temas que son duplicados de, ou relacionados con outros, se poidan levar a cabo os axustes necesarios. A segunda, consiste en revisar a lista de correo do proxecto e outros foros buscando preguntas recorrentes, escribindo novas entradas na FAQ baseadas nesta información. Esta última tarefa pode ser bastante complexa: un debe ser capaz de seguir un fío de correos, recoñecer as cuestións clave, enviar para debate unha entrada na FAQ que explique o anterior, incorporar os comentarios doutras persoas (xa que é imposible para o xestor da FAQ ser un experto en cada tema cuberto pola FAQ) e saber cando o proceso de debate finaliza para poder engadir o novo ítem á FAQ.</para>

<para
>Esta persoa, habitualmente convértese no experto por defecto no formato da FAQ. Hai un montón de pequenos detalles ao redor de manter unha FAQ (ver <xref linkend="all-as-archives"/><phrase output="printed"
> en <xref linkend="communications"/></phrase
>); cando xente aleatoria a edita, algunhas veces van esquecer certos detalles. Non hai problema por iso, sempre e cando o xestor da FAQ estea aí para resolver o problema.</para>

<para
>Existen varias ferramentas de software libre para manter a FAQ. Paga a pena usalas sempre e cando non comprometa a calidade da FAQ nin supoña unha sobre-automatización. Algúns proxectos tratan de automatizar o proceso por completo, permitindo que todo o mundo contribúa e a edite dun modo similar a un wiki (ver <xref linkend="wikis"/><phrase output="printed"
> en <xref linkend="technical-infrastructure"/></phrase
>). Particularmente, isto ocorre con Faq-O-Matic (<ulink url="http://faqomatic.sourceforge.net/"
></ulink
>), aínda que é posible que os casos que teño visto foran simplemente abusos que foron máis alá das intencións orixinais para o que Faq-O-Matic fora pensado. En calquera caso, aínda que a descentralización da edición e mantemento da FAQ reduce a carga de traballo do proxecto, iso tamén produce unha FAQ de peor calidade. Non hai ninguén cunha visión completa do documento, ninguén para observar cando certos ítems son obsoletos, duplicados ou precisan actualización, non hai ninguén que se encargue de ver as interdependencias entre os ítems. Como resultado obtense un documento que non satisface as necesidades do usuario, e no peor caso, o confunde. Usa as ferramentas que consideres necesarias para manter o documento, mais nunca te deixes cegar polas mesmas comprometendo a calidade da FAQ.</para>

<para
>Bótalle un ollo ao artigo de Michael Kerner <citetitle
>A FAQ das FAQs</citetitle
>, en <ulink url="http://osdir.com/Article1722.phtml"
></ulink
>, para obteres descricións e avaliacións detalladas de ferramentas de mantemento de FAQs con software libre.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="transitions">
<title
>Transicións</title>

<para
>A veces ocorre que, un voluntario nunha posición de responsabilidade (por exemplo: xestor de remendos, de tradución, etc) será incapaz de levar a cabo as tarefas requiridas. Isto pode deberse a que son maiores que as que se anticiparan, ou por outro tipo de factores externos: mudanza do estado civil, situacións familiares novas como ter un fillo, un novo emprego, etc.</para>

<para
>Cando isto ocorre, o propio voluntario non se decata de inmediato. A mudanza prodúcese de modo progresivo, cunha redución das tarefas que leva a cabo e talvez non sexa consciente de que xa non é capaz de satisfacer tódolos requirimentos que o propio rol acarreta. Por outra banda, o resto do proxecto simplemente non ten noticias del nun tempo. Soe ocorrer que entón o proxecto ve un pico repentino de actividade, que soe vir dado porque a persoa se sente culpable por deixar de lado o traballo no proxecto e se senta un día a facer tarefas e poñerse ao día. Despois diso. é habitual que non se saiba nada del durante un tempo máis longo que o anterior, para ter de novo -ou talvez non- outro pico de actividade. Raramente acontece unha resignación voluntaria do posto. O voluntario estaba a facer o traballo no seu tempo libre, polo que resignar significaría recoñecer abertamente a si mesmo que ten menos tempo libre do que pensaba. Á xente habitualmente lle costa asumir iso.</para>

<para
>Polo tanto, depende totalmente de ti e das outras persoas no proxecto decatarvos do que está a ocorrer &mdash; ou do que non está a ocorrer&mdash; e preguntarlle ao voluntario o que está pasando. A pregunta debe ser totalmente amigable e sen que implique un sentimento de culpa para el. O propósito é saber o que acontece, non facer que a persoa se sinta mal. En xeral, é mellor que isto se faga publicamente, mais é perfectamente válido que se faga en privado se existir algunha razón para tal cousa. A razón de facelo usando os canais públicos reside en que se o voluntario contesta que non pode levar a cabo as tarefas encomendadas, existe un contexto xa para a túa <emphasis
>seguinte</emphasis
> mensaxe pública: unha petición de novos voluntarios para que ocupen ese rol.</para>

<para
>Ás veces, o voluntario non é capaz de levar a cabo as tarefas encomendadas, mais tampouco está disposto ou é capaz de recoñecer ese feito. Evidentemente, calquera pode ter problemas ao principio, especialmente se a responsabilidade for complexa. Porén, se a cousa simplemente non funcionar, mesmo despois de recibir toda a axuda posible, só existe unha solución apropiada: que o voluntario deixe paso a outra persoa. E se el non o ve por si mesmo, necesitará que alguén llo diga. Creo que só hai un modo de manexar isto, mais é un proceso de múltiples pasos, onde cada un deles é importante.</para>

<para
>Primeiro, asegúrate de que non está errado. Fala en privado con outras persoas do proxecto para ver se eles concordan contigo e o problema é tan serio como ti pensas que é. Embora xa esteas seguro, isto serve para facerlle ver aos demais que estás a considerar pedirlle á persoa que dea o relevo do rol. Habitualmente ninguén terá obxeccións &mdash; a xente estará contenta de que deas a cara para facer unha tarefa ingrata, e así eles non teñen que facelo!</para>

<para
>A continuación, contacta <emphasis
>en privado</emphasis
> coa persoa e coméntalle o que pensas, directa, mais amablemente. Sé específico, dando tantos exemplos como for posible. Asegúrate de facer explícito como o resto da xente fixo o posible por axudar, mais que o problema continúa. É probable que este correo che tome un tempo escribilo, e se non estiveres seguro do que estás a dicir, non deberías dicilo. Unha vez o fixeres, explica que che gustaría atopar un novo voluntario para o rol, mais tamén deixa claro que existen outras maneiras de contribuír ao proxecto. Nesta etapa, non digas que falaches con outra xente; a ninguén lle gusta ouvir que outros estiveron conspirando ás súas costas.</para>

<para
>Isto pode dar lugar a diferentes respostas pola súa parte. A máis probable é que estea de acordo contigo ou que non desexe discutir, polo que está disposto a dar o relevo. Nese caso, o mellor sería que el fixese o anuncio por si mesmo, e despois diso podes facer unha petición para atopares un novo voluntario.</para>

<para
>Outra delas, sería que estea de acordo en que non puido levar a cabo o traballo encomendado, mais que pida un pouco máis de tempo (ou unha nova oportunidade, para roles con tarefas discretas como por exemplo o xestor da publicación). A reposta a isto depende do teu xuízo, mais decidas o que decidires, non o fagas unicamente porque sentes que non podes rexeitar unha petición tan razoable como esa. Ese enfoque prolongaría a agonía, non a eliminaría. Unha boa razón para rexeitares a petición é que xa existiron un bo número de oportunidades, as que vos levaron ao punto no que estades agora. A continuación podes ver o correo-e que lle enviei a alguén que estaba ocupando o posto de xestor da publicación, mais que en verdade non estaba feito para el:</para>

<blockquote>
<screen
>&gt; Se desexas substituírme por algunha outra persoa, enténdoo e 
&gt; farei o relevo o mellor que poida. Porén, teño unha petición, 
&gt; que penso que é razoable. Gustaríame facer unha publicación máis
&gt; para poñerme a proba.

Comprendo perfectamente o teu desexo (pasoume a min mesmo!), mais creo que 
neste caso non deberíamos intentalo de novo.

Esta non é a primeira ou segunda publicación do programa, é a sexta ou sétima ...
e para todas elas, sei que tamén ti non estás satisfeito cos resultados
(temos falado diso antes). Pódese dicir que xa o temos intentado 
unha vez máis. 
E un deses intentos ten que ser o último. Creo que 
[a pasada publicación] debería ter sido este último intento.
</screen>
</blockquote>

<para
>No peor caso, a persoa pode estar en desacordo. Tes que aceptar entón que as cousas van ser incómodas e tirar para diante. É momento de dicir que tes falado xa con outra xente (mais non dicir con quen a non ser que teñas o seu permiso, xa que esas conversas foron confidenciais), e non cres que sexa bo para o proxecto que as cousas continúen dese modo. Sé insistente, mais non ameazador. Ten en conta que para a maioría dos roles, a transición ocorre no momento en que alguén novo ocupa o rol, <emphasis
>non</emphasis
> cando a antiga persoa deixa de facelo. Por exemplo, se a discusión versar sobre, digamos, o xestor das incidencias, en calquera momento ti e outras persoas do proxecto podedes facer explícito o teu desexo de ter outra persoa para o posto. Non é necesario obrigatoriamente que a persoa que estaba facendo o traballo deixe de facelo, sempre e cando non sabote (deliberadamente ou doutro modo) os esforzos do novo voluntario.</para>

<para
>O que nos leva a unha idea tentadora: por que en troca de pedirlle á persoa que abandone o posto, non o enfocamos como simplemente unha cuestión de darlle máis axuda? Por que non ter dous xestores de incidencias ou de remendos, ou calquera que for o rol?</para>

<para
>Aínda que esa idea poida soar tentadora a primeira vista, xeralmente non é unha boa idea. O que fai que rol de coordinador funcione &mdash; o que o fai útil, de feito &mdash; é a súa centralización. As cousas que poden facerse dun modo descentralizado xa son feitas dese modo. Ter dúas persoas facendo un traballo que pode facer unha, introduce unha sobrecarga comunicativa entre ambos, ademais do potencial desentendemento da responsabilidade (un polo outro e a casa sen varrer). Dende logo, hai excepcións. Ás veces, dúas persoas traballan moi ben xuntas, ou pode que que a propia natureza do rol pode ser distribuída entre varios dun modo sinxelo. Mais non soe ocorrer iso cando ves alguén fracasar nun rol para o que non ten as capacidades adecuadas. Se o voluntario tiver visto o problema por si mesmo, tería pedido axuda por si mesmo. En calquera caso, sería unha falta de respecto deixar que alguén esbanxase o seu tempo nun traballo que ninguén vai ter en consideración.</para>

<para
>O factor máis importante de pedirlle a alguén que dea o relevo é a privacidade: darlle espazo para que tome unha decisión sen que sinta que os demais o están mirando ou esperado. Unha vez, eu cometín o erro &mdash; un erro bastante obvio, en retrospectiva&mdash; de enviarlle un correo ás tres partes implicadas para pedir que o xestor da publicación de Subversion dese o relevo en favor de outras dúas persoas. Xa tiña falado cos dous novos voluntarios e estaban dispostos a asumir a responsabilidade. Dun modo inocente, crin que aforraría algún tempo si lle enviaba o email aos tres á vez para que iniciasen a transición. Asumín que o actual coordinador era plenamente consciente do problema e vería razoable a miña petición.</para>

<para
>Estaba equivocado. O xestor da publicación ofendeuse moito, e con razón. Unha cousa é facerlle ver que ten que deixar o seu rol; outra moi distinta é facelo <emphasis
>diante</emphasis
> da xente que dará o relevo. Unha vez me decatei de por que estaba ofendido, pedín desculpas. El deu o relevo dun modo elegante para todos e a día de hoxe segue a participar no proxecto. Mais os seus sentimentos foron feridos, e é necesario dicir, que tampouco foi o mellor dos comezos que imaxinaran os novos voluntarios.</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="committers">
<title
>Committers</title>

<para
>Debido a que formalmente son a única clase de voluntarios que atopamos en calquera proxecto de software libre, os commiters merecen unha especial atención aquí. Os commiters son unha inevitable concesión discriminatoria, nun sistema que por outra banda é o menos discriminatorio dos posibles. Mais non tomes "discriminación" no senso pexorativo. A función que teñen os commiters é necesaria e non creo que un proxecto puidese sobrevivir sen eles. Evidentemente o control de calidade require control. Hai moita xente que se sente competente para facer mudanzas a un programa, e algúns poucos que realmente o son. O proxecto non pode depender do propio xuízo da xente; deben impoñerse estándares e conceder unicamente acceso só a aqueles que os cumpriren. <footnote
><para
>Obsérvese que ter acceso de commiter ten un significado diferente en sistemas de control de versións descentralizados, onde calquera pode configurar un repositorio que enlace ao proxecto e outorgarse a si mesmo acceso de commiter nese repositorio. Porén, o <emphasis
>concepto</emphasis
> de commit ten validez mesmo neses entornos: "acceso de commit" é un modo resumido de dicir "o dereito de facer mudanzas no programa que se empacotará na seguinte versión do mesmo". En sistemas de control de versións centralizados, isto quere dicir ter acceso de commit directo; en sistemas descentralizados, quere dicir que as mudanzas que un fai son integradas directamente no repositorio principal. En ambos casos é a mesma idea, a mecánica de como se fai non é realmente importante </para
></footnote
> Por outro lado, conseguir que a xente que ten acceso de commiter traballe ombro con ombro coa xente que non o ten outórgalle ao proxecto unha dinámica moi boa de traballo. E debe ser xestionada para que non dane o proxecto.</para>

<para
>En <xref linkend="electorate"/><phrase output="printed"
> en <xref linkend="social-infrastructure"/></phrase
>, xa se ten debatido a mecánica de incluír novos commiters. A continuación botaráselle un ollo aos estándares polos cales o potenciais commiters deben ser xulgados e como este proceso debe ser presentado ante a comunidade que rodea o proxecto.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-committers">
<title
>Escollendo os commiters</title>

<para
>No proxecto Subversion escollemos os committers principalmente empregando o Principio Hipocrático:<emphasis
>primeiro, non fagas dano</emphasis
>. O noso criterio principal non son nin as capacidades técnicas nin o coñecemento do código, simplemente que o committer amose un bo criterio. Criterio pode simplemente significar saber o que non asumir. Unha persoa podería enviar soamente pequenos remendos, arranxando pequenos problemas no código; mais se os remendos se aplican limpamente, non conteñen erros, e están en harmonía co rexistro de mensaxes e as guías de estilo do proxecto, e hai remendos de abondo para consideralo un padrón evidente, entón un commiter existente habitualmente proporá esa persoa para darlle permiso de commit. Se un mínimo de tres persoas din que si, e ninguén se opón, faise a oferta. Certo, pode que non teñamos ningunha proba de que a persoa está capacitada para resolver problemas complexos en tódalas áreas do código, mais iso non importa: a persoa deixou claro que polo menos é quen de xulgar as súas propias habilidades. As capacidades técnicas pódense aprender (e ensinar), mais o criterio, as máis das veces, non. Polo tanto, esta é a única cousa da que te tes que asegurar que unha persoa ten antes de darlle permiso de commit.</para>

<para
>Cando unha proposta nova de committer provoca unha discusión, non adoita ser sobre as capacidades técnicas, senón máis ben sobre o comportamento desa persoa nas listas de correo ou no IRC. Ás veces, unha persoa amosa capacidades técnicas e habilidades para traballar conforme á filosofía do proxecto, mais tamén se amosa constantemente belixerante e non cooperativa nos foros públicos. Este é un asunto importante: se a persoa non se adaptar ao longo do tempo, mesmo como resposta a indirectas, entón non imos engadilo como commiter independentemente do capacitado que estiver. Nun grupo de voluntarios, as habilidades sociais, ou a habilidade de "xogar limpo na area", son tan importantes como as capacidades técnicas en estado puro. Xa que todo está baixo control de versións, as consecuencias de ter engadido a un commiter que non deberías non son tanto os problemas que pode causar no código (a revisión sacaríaos á luz) como que pode forzar finalmente a anular o permiso de committer desa persoa; unha medida que non é nunca agradable e pode ás veces causar confrontacións.</para>

<para
>Moitos proxectos insisten en que un commiter potencial ten que demostrar un certo nivel de experiencia técnica e persistencia, enviando un certo número de remendos non triviais; é dicir, estes proxectos non se conforman con saber que a persoa non fará dano, senón que queren saber que probablemente traballará ben ao longo do código. Isto está ben, mais hai que ter coidado de que non converta a pertenza ó grupo de committers nunha cuestión de pertenza a un grupo exclusivo. A pregunta que todo o mundo debería ter na cabeza é "Que traerá os mellores resultados para o código?" e non "Imos empeorar o status social asociado coa pertenza ao grupo de committers admitindo a esta persoa?" A idea do permiso de commit non é reforzar a autoestima da xente, senón permitir que as boas mudanzas entren no código cun mínimo esforzo. Se tiveres 100 committers, 10 dos cales fan grandes mudanzas por norma xeral, e os outros 90 só arranxan erros de escritura e pequenos erros poucas veces ao ano, isto é mellor que ter so ós 10 primeiros.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="revoking-committers">
<title
>Revocación do permiso de commit</title>

<para
>A primeira cousa que se debe dicir sobre revocar o permiso de commit é: tenta non chegar a esta situación, en primeiro lugar. Dependendo de a quen se lle retirar o permiso, e por que, as discusións en torno a está situación poden chegar a dividir. Mesmo se non chegaren a dividir, serán unha perda de tempo que nos distraerán do traballo produtivo.</para>

<para
>Porén, se tiveres que facelo, a discusión debería manterse en privado entre as mesmas persoas que estarían en posición de votar para concederlle o permiso a esa persoa, independentemente do tipo de permiso de commit que tiver. A persoa involucrada non debería estar incluída nesta discusión. Isto refuta o mandato habitual en contra do segredo, mais neste caso é preciso. Primeiro, ninguén sería quen de falar libremente no caso contrario. Segundo, se a moción fracasar, pode non interesarche que a persoa saiba que foi considerada, porque isto podería provocar que lle xurdisen preguntas. (Quen estivo do meu lado? Quen estivo na miña contra?) que conducirán ao peor dos sectarismos. En certas circunstancias estranas, o grupo pode querer que a persoa coñeza que a revocación do permiso de commit se considera ou se considerou, como un aviso, mais isto debe ser unha decisión do grupo. Ninguén debería, por iniciativa propia, revelar información relativa a unha discusión e votación que os demais supoñen secreta.</para>

<para
>Unha vez que o permiso é revocado, debe facerse público inevitablemente (ver <xref linkend="commit-access-openness"/><phrase output="printed"
> máis adiante neste capítulo), así que tenta ser o máis diplomático posible en canto á forma en que o anuncias ao mundo exterior.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="partial-committers">
<title
>Permiso de commit parcial</title>

<para
>Certos proxectos ofrecen graos de permiso de commit. Por exemplo, podería haber contribuíntes con permisos que lles proporcionen vía libre na documentación, mais que non poidan facer commits sobre o código. Áreas habituais para permisos de commit parciais son documentación, traducións, ligazóns de código con outras linguaxes de programación, especificación para o empacotado dos ficheiros (p.ex. especificación RPM de RedHat), e outras áreas onde un erro non causará un problema no núcleo do proxecto.</para>

<para
>Xa que o permiso de commit non implica só facer commits, senón tamén formar parte dun electorado (ver <xref linkend="electorate"/><phrase output="printed"
> en <xref linkend="social-infrastructure"/></phrase
>),a pregunta naturalmente xorde: en que poden votar os committers parciais? Non hai resposta correcta; depende do tipo de dominios de commit parcial do proxecto. No proxecto Subversion mantemos as cousas moi simples: un commiter parcial pode votar en temas relacionados exclusivamente co seu dominio de commit, e en nada máis. É importante destacar que temos mecanismos para emitirmois votos de asesoramento (basicamente o committer escribe "+0" ou "+1 (non vinculante)" en vez de "+1"). Non hai razón para silenciar a xente simplemente porque o seu voto non é formalmente vinculante.</para>

<para
>Os committers con permiso total poden votar sobre calquera cuestión, do mesmo xeito que poden facer commits en calquera parte do código, e só eles poden votar para engadir novos committers de calquera tipo. Na práctica, porén, a capacidade para engadir novos commiter con permisos parciais é delegada. Calquera commiter total pode "patrocinar" un commiter parcial, e os commiters parciais poden ás veces escoller novos commiters para o seu dominio (isto axuda considerablemente a axilizar o traballo de tradución).</para>

<para
>O teu proxecto pode precisar dunha filosofía diferente, dependendo da natureza do traballo, mais estes mesmos principios xerais son válidos para tódolos proxectos. Cada committer debe poder votar nos temas que caen dentro do seu dominio de commit, e non en temas que caen fóra del, e os votos sobre cuestións relativas ao procedemento deben ser por defecto dos committers totais, a menos que exista algunha razón (decidida polos committers totais) para ampliar o electorado.</para>

<para
>Con respecto á aplicación de permiso de commit parcial: adoita ser mellor <emphasis
>non</emphasis
> empregar o sistema de control de versións para aplicar dominios de commit parcial, mesmo se for posible. Mira <xref linkend="vc-authz"/><phrase output="printed"
> en <xref linkend="technical-infrastructure"/></phrase
> para saberes por que.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="dormant-committers">
<title
>Committers inactivos</title>

<para
>Algúns proxectos automaticamente revogan o permiso para facer commits da xente se pasaren un determinado período de tempo (por exemplo, un ano) sen faceren ningún commit. Penso que isto é normalmente erróneo e mesmo contraproducente, por dúas razóns.</para>

<para
>Primeiro, pode tentar a xente a faceren commits de mudanzas aceptables, mais innecesarias, simplemente para evitaren que o permiso para facer commits expire. En segundo lugar, non serve realmente para ningún propósito. Se o principal motivo para outorgar permiso de commit é o bo xuízo, entón por que asumir que o xuízo sobre alguén se deteriora simplemente porque se afasta do proxecto por un tempo? Mesmo se desaparecer completamente por anos, sen atender ao código ou ás discusións dos desenvolvedores, cando reaparece quererá <emphasis
>saber</emphasis
> como de desconectado está realmente, e actuar en consecuencia. Confiaches nel anteriormente, así que por que non confiar nel sempre? Se os diplomas do instituto non caducan, é evidente que o acceso de commit tampouco debería.</para>

<para
>Ás veces un committer pode pedir ser eliminado, ou ser marcado explicitamente como inactivo, na lista de committers (véxase  <xref linkend="commit-access-openness"/><phrase output="printed"
> máis adiante</phrase
> para coñecer mellor esa lista). Nestes casos, o proxecto debería acceder aos desexos da persoa, evidentemente.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="commit-access-openness">
<title
>Evitar o misterio</title>

<para
>Embora as discusión acerca de aceptar novos comitters deban ser confidenciais, as propias regras e procedementos non deben selo. De feito, é mellor publicalos, de modo que a xente comprenda que os committers non son ningunha Cámara Celestial pechada aos meros mortais, senón que calquera pode unirse simplemente posteando bos remendos e sabendo como manexarse na comunidade. No proxecto Subversion poñemos esta información directamente no documento coas pautas para os desenvolvedores, xa que a xente máis interesada en coñecer como se outorgan permisos para commits é aquela que pensa en contribuír co proxecto.</para>

<para
>Para alén de publicares os procedementos, publica a <emphasis
>lista</emphasis
> completa e actualizada de committers. O lugar onde se adoita facer é o arquivo <filename
>MAINTAINERS</filename
>, ou <filename
>COMMITTERS</filename
> no nivel máis alto da árbore de código fonte do proxecto. Debería ser unha lista que inclúa en primeiro lugar os committers globais, seguidos dos diferentes dominios de commit parciais e os membros de cada un deles. Cada persoa debe ser listada co nome e o enderezo de email, embora o enderezo se poida cifrar para evitar spam (véxase <xref linkend="address-hiding"/><phrase output="printed"
> en <xref linkend="technical-infrastructure"/></phrase
>) se a persoa o preferir.</para>

<para
>Xa que a distinción entre acceso como committer global e parcial é obvia e ben definida, é aconsellable indicala na lista tamén. Para alén disto, a lista non debe tratar de indicar as diferenzas informais que inevitablemente xorden en cada proxecto, como quen son as persoas máis influíntes, e de que modo. Trátase dun rexistro público, non dun ficheiro de recoñecementos. Os committers lístanse en orde alfabética ou na orde en que se uniron ao proxecto.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="credit">
<title
>Recoñecemento</title>

<para
>O recoñecemento é a principal moeda no mundo do software libre. Embora todo o que a xente diga sobre as súas motivacións para traballar nun proxecto, non coñezo ningún desenvolvedor que se sentise feliz facendo o seu traballo de maneira anónima ou co nome doutra persoa. Existen razóns tanxibles para isto: a reputación de cada un nun proxecto determina claramente a súa influencia, e a participación nun proxecto de software libre tamén pode indirectamente proporcionar beneficios económicos, porque actualmente algúns empresarios os buscan nos currículums. Hai tamén razóns intanxibles, quizais máis poderosas: a xente simplemente quere ser apreciada, e instintivamente buscan sinais de que o seu traballo é recoñecido por outros. A promesa do recoñecemento está aí e constitúe unha das maiores motivacións que un proxecto ten. Cando as pequenas contribución son recoñecidas, a xente volta para facer máis.</para>

<para
>Unha das características máis importantes do desenvolvemento colaborativo de software (véxase <xref linkend="technical-infrastructure"/>) é que conserva rexistros precisos sobre quen fixo que e cando. Sempre que for posible, débense empregar estes mecanismos existentes para asegurar que o mérito é distribuído correctamente, sendo específicos na natureza da contribución. Non escribir simplemente "Gracias a X. Aleatorio &lt;xaleatorio@exemplo.gl&gt;" se podemos poñer "Gracias a X. Aleatorio &lt;xaleatorio@exemplo.gl&gt; polo informe do erro e o método para repetilo" nunha mensaxe de log.</para>

<para
>En Subversion temos unha política informal mais coherente de acreditación de informes de erros, ben nun ficheiro de problemas, se existir, ou na mensaxe de log do commit que soluciona o erro. Unha inspección rápida do log de commits de Subversion ata o número 14525 mostra que preto do 10% dos commits acreditan alguén polo nome e o enderezo de correo electrónico, normalmente a persoa que informou ou analizou o erro solucionado nese commit. Nótese que esta persoa é diferente do desenvolvedor que realmente fixo o commit, cuxo nome xa é rexistrado automaticamente no sistema de control de versións. Dos oitenta e tantos committers globais e parciais, cincuenta e cinco foron acreditados en logs de commit (normalmente múltiples veces) antes de seren committers. Isto non demostra, evidentemente, que ter sido acreditado fose un factor na súa colaboración continua no proxecto, mais polo menos crea unha atmosfera na cal a xente sabe que pode contar con que as súas contribucións sexan recoñecidas.</para>

<para
>É importante distinguir entre a rutina de recoñecemento e os agradecementos especiais. Cando se discute un fragmento particular de código, ou calquera outra contribución, sempre é correcto recoñecer o traballo feito. Por exemplo, dicir "as mudanzas recentes de Xan sobre o código delta queren dicir que agora podemos implementar a funcionalidade X" simultaneamente axudan á xente a identificar de que mudanza se está a falar e recoñece o traballo de Xan. Por outra banda, darlle as gracias nun post individual a Xan non ten ningunha utilidade inmediata. Non engade información, xa que o sistema de control de versións e outros mecanismos xa rexistraron o feito de que el fixo as mudanzas. Agradecer a todos por todo sería unha distracción e carecería de toda información, debido a que o agradecemento resulta efectivo na medida en que se aparta dos comentarios favorables que se ven habitualmente. Isto non quere dicir, por suposto, que nunca se deba agradecer á xente. Só se debe estar seguro de que non se fai de maneira que conduza ao exceso de recoñecemento. As seguintes liñas xerais son de axuda niso:</para>

<itemizedlist>
  <listitem
><para
>Canto máis efémero sexa o foro, con máis liberdade se pode agradecer nel. Por exemplo, agradecer alguén por arranxar un erro durante unha conversa de IRC é correcto, así como facelo nun correo centrado principalmente noutros temas. Mais non se debe mandar un correo unicamente para agradecer alguén, se non for por algunha labor realmente inédita. Do mesmo xeito, non se deben encher as páxinas do proxecto con expresións de gratitude. Unha vez que se comeza, nunca estará claro onde ou cando deterse. E <emphasis
>nunca</emphasis
> pór agradecementos no código; iso sería unicamente unha distracción sobre o obxectivo principal dos comentarios, que é axudar o lector a comprender o código.</para
> 
  </listitem>
  <listitem
><para
>Canto menos participar alguén nun proxecto, máis apropiado vai ser agradecerlle o traballo feito. Isto pode parecer un contrasentido, mais encaixa coa actitude de que expresar agradecemento é algo que se fai cando alguén contribúe máis do que era de  esperar. Polo tanto, agradecer continuamente a xente que contribúe habitualmente por un traballo que xa farían en condicións normais ía querer dicir que esperamos deles menos que eles mesmos, e está claro que se algo nos interesa é o efecto contrario.</para>

            <para
>Existen algunhas excepción a esta norma. Resulta aceptable agradecer alguén por cumprir o seu rol cando ese traballo require esforzos importantes de cando en vez. O exemplo por excelencia é o xestor das versións, quen realiza un traballo importante cando se libera cada versión, mentres que o resto do tempo permanece inactivo (inactivo como xestor das versións, xa que por outra banda pode ser un desenvolvedor activo, mais iso é outro asunto). </para>
  </listitem>
  <listitem
><para
>Igual que as críticas e o recoñecemento, o agradecemento debe ser específico. Non se debe agradecer a xente simplemente por seren excelentes, mesmo se realmente o son. Os agradecementos faranse por algo fóra do ordinario, e por puntos adicionais, aclarando por que o traballo feito foi tan destacable.</para
> 
  </listitem>
</itemizedlist>

<para
>En xeral, sempre hai tensión entre asegurarse de que as contribucións individuais da xente son recoñecidas e que o proxecto resulta máis un esforzo de grupo que una colección de logros individuais. Simplemente hai que ser conscientes desta tensión e tratar de inclinar a balanza cara ao lado do grupo, e dese modo estará baixo control.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="forks">
<title
>Ramas</title>

<para
>En <xref linkend="forkability"/><phrase output="printed"
> en <xref linkend="social-infrastructure"/></phrase
> vimos como o <emphasis
>potencial</emphasis
> de crear ramas ten importantes efectos en como se gobernan os proxectos. Mais, ¿que ocorre cando realmente se crea unha nova rama? ¿Como se debe manexar, e que efectos podemos esperar dela? No estremo contrario, cando se debe <emphasis
>iniciar</emphasis
> unha nova rama?</para>

<para
>A resposta depende da clase de rama que sexa. Algunhas débense a desacordos amigables mais irreconciliables sobre a dirección do proxecto; quizais os máis debidos tanto a diverxencias técnicas como a conflitos persoais. Por suposto, non sempre é posible diferenciar ambos, xa que argumentos técnicos poden tamén implicar elementos persoais. O que tódalas ramas teñen en común é que un grupo de desenvolvedores (nalgunhas ocasión mesmo un só deles) decidiu que o custe de traballar con algúns ou con tódolos demais supera os beneficios.</para>

<para
>Unha vez que un proxecto se ramifica, non hai unha resposta segura sobre a pregunta de cal é o proxecto "verdadeiro" ou "orixinal". A xente falará de maneira coloquial acerca de unha rama R que sae dun proxecto P, de maneira que P segue o seu rumbo natural mentres que R penetra nun novo territorio, mais isto é, realmente, unha declaración de como ese observador en concreto percibe a situación. Trátase fundamentalmente dun asunto de percepción: cando un porcentaxe suficientemente grande de observadores está de acordo, devandita afirmación comeza a ser certa. Non se trata de que exista unha verdade obxectiva, unha que simplemente non somos capaces de percibir desde o principio, senón de que as percepcións <emphasis
>son</emphasis
> a verdade obxectiva, simplemente porque un proxecto&mdash;ou unha rama&mdash;é unha entidade abstracta na nosa mente.</para>

<para
>Se a xente que crea unha nova rama sente que están indo nun camiño diferente ao do proxecto principal, a cuestión queda resolta inmediata e sinxelamente. Todos, tanto desenvolvedores coma usuarios, tratarán á rama coma un novo proxecto, cun novo nome (pode que baseado no antigo, mais facilmente distinguible del), un sitio web diferente e unha filosofía de traballo ou un obxectivo distinto. En troca, as cousas complícanse cando ambos lados cren ser os gardiáns lexítimos do proxecto orixinal e por tanto teñen dereito a continuaren co antigo nome. Se existir algunha organización con dereitos sobre o nome, ou control legal sobre o dominio ou páxinas web, o problema resólvese habitualmente segundo o seu criterio: a organización decidirá quen é o proxecto e quen a rama, porque ten tódalas de gañar nunha guerra de relacións públicas. Naturalmente, rara vez as cousas chegan tan lonxe: como todos coñecen as dinámicas do poder, evitan unha guerra cuxo resultado xa saben de antemán, e prefiren ir directamente á solución.</para>

<para
>Por sorte, na maioría dos casos hai poucas dúbidas sobre cal é o proxecto e cal a rama, porque a rama é, en esencia, un voto de confianza. Se máis da metade dos desenvolvedores estiveren a favor de calquera rumbo que a rama propón tomar, habitualmente non hai motivos para ramificar; o proxecto simplemente vai ir por ese camiño por si mesmo, a non ser que estea controlado por un ditador especialmente teimudo. Por outra banda, se estiveren a favor menos da metade dos desenvolvedores, a rama é claramente unha rebelión minoritaria, e tanto a cortesía coma o sentido común dinnos que eles mesmos deberían considerarse unha rama diverxente mais que a tendencia principal.</para>

<sect2 id="forks-handling">
<title
>Manexar unha rama</title>

<para
>Se alguén ameazar con crear unha rama no teu proxecto, mantén a calma e recorda os teus obxectivos a longo prazo. A simple <emphasis
>existencia</emphasis
> da rama non prexudica o proxecto, senón a perda de desenvolvedores e usuarios. Polo tanto o teu verdadeiro obxectivo non é esmagar esa rama, senón minimizar eses efectos daniños. Podes enfadarte, pensar que a rama é inxusta e ninguén a pedía, mais expresalo en público só servirá para alienar a desenvolvedores indecisos. En troca diso, non forces á xente a tomaren decisións excluíntes, e sé tan cooperativo coa rama como for posible. Para comezar, non revoques permisos de commit no teu proxecto a alguén simplemente porque decidiu traballar na rama. Traballar nela non significa que esa persoa perdera de repente a súa competencia para traballar no proxecto orixinal; os committers anteriores deberían seguir séndoo. Aparte disto, deberías expresar o teu desexo de ter toda a compatibilidade posible coa rama, e afirmar que desexas que os desenvolvedores adaptarán mudanzas entre ambos sempre que for apropiado. Se tivres acceso como administrador aos servidores do proxecto, ofrece publicamente as túas infraestruturas para os seus inicios. Por exemplo, ofrécelles unha copia completa do repositorio de control de versións, se non tiveren outra maneira de conseguilo, de modo que non teñan que comezar sen ningún dato histórico (isto pode non ser necesario segundo o sistema de control de versións empregado). Pregúntalles se precisan algunha outra cousa, e proporciónalla na medida do posible. Móstrate cordial e amistoso con eles, sen estorbarlles no seu camiño, demostrando que queres que a rama teña un futuro baseado nos seus propios méritos, nin máis nin menos.</para>

<para
>A razón de faceres todo isto&mdash;e de facérelo publicamente&mdash;non é axudares realmente á rama, senón persuadires aos desenvolvedores de que o teu lado é unha aposta segura, semellando o menos vingativo posible. Na guerra ás veces ten sentido (sentido estratéxico, non ético) forzares a xente a escolleren bando, mais no software libre rara vez é así. De feito, tras unha rama é habitual que algúns desenvolvedores colaboren publicamente en ambos proxectos e fagan todo o posible por mantelos compatibles. Estes desenvolvedores axudan a manter as liñas de comunicación abertas despois de que se crea a rama. Tamén permiten que o teu proxecto se beneficie de novas características interesantes na rama (si, é posible que a rama teña cousas que che interesen) e incrementan as posibilidades dunha fusión máis adiante.</para>

<para
>Nalgunhas ocasións, unha rama ten tanto éxito que, mesmo se foi considerada polos seus creadores como unha rama diverxente, tórnase a versión preferida por todos, e chega un momento en que supera a orixinal en demanda popular. O exemplo por excelencia disto é a rama GCC/EGCS. A <firstterm
>GNU Compiler Collection</firstterm
> (<firstterm
>GCC</firstterm
>, antigamente o <firstterm
>GNU C Compiler</firstterm
>) é o compilador de código fonte libre máis popular, e tamén un dos compiladores máis portables do mundo Debido a desacordos entre os mantedores oficiais de GCC e Cygnus Software<footnote
><para
>Agora parte de RedHat (<ulink url="http://www.redhat.com/"
></ulink
>).</para
></footnote
>, un dos grupos de desenvolvedores de GCC máis activos, Cygnus creou unha rama de GCC chamada <firstterm
>EGCS</firstterm
>. A rama foi deliberadamente amistosa: os desenvolvedores de EGCS non tentaron, en ningún momento, implantar a súa versión de GCC como unha nova versión oficial. No seu lugar, concentráronse en facer EGCS o mellor posible, incorporando remendos a un maior ritmo que os mantedores oficiais de GCC. EGCS gañou popularidade, e finalmente algunhas distribucións decidiron substituír GCC por EGCS como o seu compilador por defecto. Chegado este punto, fíxose evidente para os mantedores de GCC que manter o nome "GCC" mentres que todo o mundo migraba a EGCS simplemente serviría para que todo o mundo sufrira unha mudanza de nome sen motivo algún. Por iso GCC adoptou o código base de EGCS, e así temos de novo un único GCC, mais inmensamente mellorado debido á rama.</para>

<para
>Este exemplo demostra por que non debemos considerar sempre unha rama como algo inevitablemente malo. Unha rama pode ser dolorosa e molesta en certo momento, mais nunca podemos saber se vai ter éxito. Polo tanto debemos manter, xunto co resto do proxecto, un ollo sobre ela, e estarmos preparados non só para absorbermos funcionalidades e código cando for posible, senón para no caso máis extremo unírmonos á rama se se convirte no referente do obxectivo do proxecto. Por suposto, é habitual podermos predicir as posibilidades de éxito dunha rama segundo quen se unir a ela. Se é comezada polo membro máis molesto do proxecto, e seguido por un bo número de desenvolvedores anoxados que xa non tiñan unha actitude construtiva, en esencia resolveron un dos nosos problemas, e probablemente non nos teñamos que preocupar de se a rama supera o proxecto orixinal. Mais se vemos como influentes e respectados desenvolvedores apoian a rama, deberiamos preguntarnos o motivo. Pode que o proxecto estea sendo demasiado restritivo, e a mellor solución pasa por adoptarmos na liña principal algunha ou tódalas accións contempladas na rama&mdash;en esencia, evitarmos que a rama se produza como tal.</para>

</sect2>

<sect2 id="forks-initiating">
<title
>Comezar unha rama</title>

<para
>Tódolos consellos aquí asumen que pensamos en crear unha rama como último recurso, fartos doutras posibilidades xa tentadas. Crear unha rama case sempre implica perder desenvolvedores, con só unha pequena esperanza de gañar outros novos máis adiante. Tamén quere dicir comezar de novo con competencia por captar a atención do usuario: todo o que estiver a punto de descargar o software preguntarase "Hmmmm, prefiro este ou este outro?". En calquera caso, a situación é confusa, porque se introduce unha nova pregunta. Algunha xente sostén que as ramas son saudables para o ecosistema do software en conxunto, por un argumento de selección natural estándar: o máis capacitado sobrevive, o que significa que, ao final, todos conseguen un mellor software. Pode que isto sexa certo desde o punto de vista do ecosistema, mais non desde o punto de vista de calquera proxecto individual. A maioría das ramas non teñen éxito, e a maioría dos proxectos non se alegran de sufriren ramas.</para>

<para
>Un corolario disto é que non se debe empregar a ameaza dunha rama como una técnica extremista de debate&mdash;"Ou fas as cousas á miña maneira ou ramifico o proxecto!"&mdash;porque todos son conscientes de que unha rama que non logra atraer desenvolvedores do proxecto orixinal ten poucas probabilidades de sobrevivir. Tódolos observadores&mdash;non soamente desenvolvedores, senón tamén usuarios e empacotadores de sistemas operativos&mdash;farán o seu xuízo sobre que lado escoller. Polo tanto debemos ter moitas reticencias coa creación de ramas, de maneira que cando o fagamos sexa porque non vemos outra solución.</para>

<para
>Non debemos descoidarnos á hora de termos en conta <emphasis
>tódolos</emphasis
> factores cando avaliamos o éxito potencial da nosa rama. Por exemplo, se moitos desenvolvedores do proxecto teñen o mesmo xefe, mesmo se están molestos e persoalmente a favor da rama, será difícil que o demostren se saben que o seu xefe se mostra en contra dela. A moitos programadores de software libre gústalles pensar que ter unha licenza de software libre no código significa que ningunha compañía pode dominar no desenvolvemento. É verdade que a licenza é, en última instancia, unha garantía da liberdade&mdash;se outros teñen o suficiente interese en crear unha rama, e os recursos necesarios, poden facelo. Mais na práctica, algúns equipos de desenvolvedores de proxectos están fundados na súa maioría por unha entidade, e non podemos pretender que o seu soporte non importa. Se for contrario á rama, os desenvolvedores raramente tomarán parte, mesmo se en secreto así o queren.</para>

<para
>Se, contodo, decidimos crear unha rama, en primeiro lugar buscaremos apoio de maneira privada, e logo o anunciaremos nun ton nada hostil, aínda que esteamos molestos ou decepcionados cos mantedores actuais. Simplemente explicaremos con desilusión os motivos que nos levaron a ramificar e que non desexamos ningún mal ao proxecto orixinal. Asumindo que realmente o consideramos unha rama (en contraposición a preservación de emerxencia do proxecto orixinal), faremos énfase en que estamos ramificando o código e non o nome, e escolleremos un novo que non sexa conflitivo co orixinal. Podemos empregar un que teña referencias ao nome orixinal mentres non leve a confusión á hora de identificalos. Por suposto podemos explicar na páxina web da rama que descende do programa orixinal, e mesmo que tenta substituílo. Soamente tentaremos non facer a vida dos usuarios máis difícil introducíndoos nunha disputa de identidades.</para>

<para
>Finalmente, podemos comezar as cousas con bo pé outorgando permisos de commit na rama a tódolos committers do proxecto orixinal, incluídos aqueles que estiveren manifestamente en contra da ramificación. Mesmo se nunca fixeren uso do seu acceso, a nosa mensaxe é clara: pode que haxa desacordos, mais non enemigos, e agradecemos as contribucións de código de calquera colaborador competente.</para>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
