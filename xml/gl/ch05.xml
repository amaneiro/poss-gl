<chapter id="money">

<title
>Diñeiro</title>

<simplesect>

<para
>Este capítulo examina como conseguir fondos nun entorno de Software Libre. Está dirixido non só a desenvolvedores aos que se lles paga por traballaren en proxectos de Software Libre, senón tamén aos seus xestores, que precisan entender as dinámicas sociais do entorno de desenvolvemento. Nas seguintes seccións, o destinatario ("ti") enténdese tanto como un desenvolvedor que cobra como aquel que coordina a tales desenvolvedores. O consello será frecuentemente o mesmo para ambos; cando non o sexa, a audiencia específica ficará  clara a partir do contexto.</para>

<para
>Os fondos corporativos dun desenvolvemento de Software Libre non son un fenómeno novo. Moitos desenvolvementos estiveron sempre informalmente subvencionados. Cando un administrador de sistemas escribe unha ferramenta de análise de rede para axudarlle no seu traballo e a colga na rede, e consegue correccións de erros e contribucións con novas características fruto da colaboración de outros administradores de sistemas, o que está a ocorrer é que se crea un consorcio non oficial. Os fondos do consorcio veñen dos salarios dos administradores de sistemas; e o seu espazo de traballo e largo de banda de rede son cedidos, sen coñecemento por parte da organización na que traballan. Estas organizacións benefícianse do investimento, por suposto, aínda que institucionalmente ao comezo non son conscientes diso.</para>

<para
>A diferenza é que hoxe moitos deses esforzos están sendo formalizados. As corporacións tomaron consciencia dos beneficios do software de código aberto, e comezaron a participar máis directamente no seu desenvolvemento. Os desenvolvedores hoxe en día tamén esperan que os proxectos realmente importantes atraian cando menos doazóns, e posiblemente mesmo patrocinadores de longa duración. Embora a presenza de diñeiro non mudase as dinámicas básicas do Software Libre, si que mudou dun xeito enorme a escala na que ocorren as cousas, tanto en termos de número de desenvolvedores como en tempo por desenvolvedor. Tamén tivo efecto en como se organizan os proxectos, e en como interaxen as partes involucradas neles. A cuestión non se reduce unicamente a como se gasta o diñeiro, ou como medir o retorno do investimento, senón que tamén envolve a xestión e os procesos: como poden traballar de maneira produtiva en colaboración as estruturas de mando xerárquico das corporacións e as comunidades semi-descentralizadas de voluntarios? Coincidirán no significado de "produtividade"?</para>

<para
>A cobertura financeira é, en xeral, benvida polas comunidades de desenvolvemento de software de código aberto. Este patrocinio pode reducir a vulnerabilidade dun proxecto perante as Forzas do Caos, as cales barren moitos proxectos antes de que realmente despeguen, e ademais pode facer que a xente estea máis desexosa de darlle unha oportunidade ao software en cuestión; senten que están a investir o seu tempo en algo que vai durar polo menos seis meses. Despois de todo, a credibilidade é contaxiosa. Cando, se di, IBM apoia un proxecto de código aberto, a xente máis ou menos asume que non van deixar que o proxecto fracase, e a vontade resultante de dedicarlle esforzos pode convertela nunha profecía autocumprida.</para>

<para
>Porén, os fondos tamén acarretan unha percepción de control. Se non se manexar con coidado, o diñeiro pode dividir o proxecto en grupos. Se os voluntarios non pagados teñen a sensación de que as decisións de deseño ou de adición de novas funcionalidades están só dispoñibles para quen máis paga, marcharanse a outro proxecto que se asemelle máis a unha meritocracia e menos a un traballo non pagado para o beneficio dun terceiro. Pode que nunca se queixen abertamente nas listas de correo; en troca diso, simplemente haberá menos e menos ruído desde fontes externas a medida que os voluntarios gradualmente deixen de tentar ser tomados en serio. O rumor da actividade a pequena escala continuará na forma de informes de erros e ocasionalmente corrección de pequenos erros, mais non haberá máis contribucións con moito código ou participación externa en discusións sobre o deseño. A xente sente que é o que se espera dela, e vive (ou desfalece) da man desas expectativas.</para>

<para
>O diñeiro debe ser usado con coidado, mais iso non quere dicir que non poida comprar influencia  Desde logo que pode. O truco está en que non pode comprar influencia directamente. Nunha sinxela transacción comercial, trocas diñeiro polo que quixeres; se precisares engadir unha funcionalidade, asinas un contrato, pagas por el e farase. Nun proxecto de código aberto isto non é tan sinxelo. Claro que podes asinar un contrato con algúns desenvolvedores, mais eles ían pensar que es parvo, tanto ti como eles mesmos, se che garantisen que o traballo que pagaches vai ser aceptado pola comunidade de desenvolvemento simplemente porque pagaches por el. O traballo só pode ser aceptado polos seus propios méritos e por como encaixa na visión do software da comunidade. Pode que teñas algo que dicir nesta visión, mais non serás a única voz.</para>

<para
>Polo tanto, o diñeiro non pode comprar influencia, mais pode comprar cousas que <emphasis
>conducen á</emphasis
> influencia. O exemplo máis obvio son os programadores. Se son contratados bos programadores, e aguantan abondo para colleren experiencia co software e credibilidade na comunidade, entón van poder influenciar no proxecto polos mesmos medios que calquera outro membro. Terán voto, ou se hai varios, terán un bloque de voto. Se son respectados no proxecto, terán influencia para alén dos seus votos. Tampouco hai necesidade de que os desenvolvedores con salario disimulen os seus motivos. Despois de todo, calquera que quixer facer unha mudanza no software quéreo por algunha razón. As razóns da túa empresa non son menos lexítimas que as de calquera outro. Simplemente o peso dado aos obxectivos da túa empresa vai ser determinado polo status dos teus representantes no proxecto, e non polo teu tamaño, orzamento ou plan de negocio.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="types-of-involvement">
<title
>Tipos de participación</title>

<para
>Existen múltiples razóns distintas polas que os proxectos de código aberto conseguen fondos. Os elementos desta lista non son mutuamente excluíntes; a miúdo o financiamento dun proxecto será o resultado de varias, ou mesmo todas estas motivacións:</para>

<variablelist>

   <varlistentry
><term
>Compartindo a carga</term>
     <listitem>
     <para
>Distintas organizacións con necesidades de software similares, a miúdo atópanse a si mesmas duplicando esforzos, tanto escribindo internamente código similar, como comprando produtos similares de vendedores propietarios. Cando se decatan do que ocorre, as organizacións poden reunir os seus recursos e crear (ou unirse a) un proxecto de Código Aberto adaptado ás súas necesidades. As vantaxes son obvias: o custo de desenvolvemento divídese, mais os beneficios acumúlanse para todos. Aínda que este escenario pareza máis intuitivo para organizacións sen ánimo de lucro, pode ter sentido estratéxico mesmo para competidores con ánimo de lucro.</para>
     <para
>Exemplos: <ulink url="http://www.openadapter.org/"
></ulink
>, <ulink url="http://www.koha.org/"
></ulink
></para>
     </listitem>
   </varlistentry>

   <varlistentry
><term
>Aumentando servizos</term>
     <listitem>
     <para
>Cando unha empresa vende servizos que dependen de, ou se tornan máis atractivos con, programas de código aberto, naturalmente un dos intereses desta compañía é asegurar que estes programas sexan mantidos activamente.</para>
     <para
>Exemplo: o apoio de <ulink url="http://www.collab.net/"
>CollabNet</ulink
> ao soporte de <ulink url="http://subversion.tigris.org/"
></ulink
> (Nota: este é o meu traballo diario, mais tamén é un exemplo perfecto deste modelo).</para>
     </listitem>
   </varlistentry>

   <varlistentry
><term
>Apoiando as ventas de hardware</term>
     <listitem>
     <para
>O valor dos ordenadores e dos seus compoñentes está directamente relacionado coa cantidade de software dispoñible para eles. Os fabricantes de hardware (non só de máquinas completas, senón tamén os fabricantes de periféricos e microchips) descubriron que ter software libre de alta calidade dispoñible para ser executado no seu hardware é importante para os clientes.</para>
     </listitem>
   </varlistentry>

   <varlistentry
><term
>Minando a concorrencia</term>
     <listitem>
     <para
>Algunhas veces as empresas patrocinan certos proxectos de código aberto como un medio de minar o produto dun concorrente, o cal á súa vez pode ser ou non de código aberto. Comerlle cota de mercado aos competidores adoita non ser a única razón para participar nun proxecto de código aberto, mais pode ser un factor.</para>
     <para
>Exemplo: <ulink url="http://www.openoffice.org/"
></ulink
> (non, esta non é a única razón pola cal OpenOffice existe, mais este software é en parte unha resposta a Microsoft Office).</para
> 
     </listitem>
   </varlistentry>

   <varlistentry
><term
>Mercadotecnia</term>
     <listitem>
     <para
>Ter a túa empresa asociada cunha aplicación popular de código aberto pode ser unha boa xestión de marca.</para>
     </listitem>
   </varlistentry>

   <varlistentry
><term
>Licenciamento dual</term>
     <listitem>
     <para
><firstterm
>Licenciamento Dual</firstterm
> é a práctica baixo a cal se ofrece o software empregando unha licenza propietaria tradicional para clientes que desexen revendelo como parte doutra aplicación propietaria, e simultaneamente tamén se ofrece baixo unha licenza libre para aqueles que pretendan empregalo baixo os termos do Software Libre (consulta <xref linkend="dual-licensing"/><phrase output="printed"
> en <xref linkend="legal"/></phrase
>). Se a comunidade de desenvolvedores de Software Libre é activa, o programa recibe os beneficios do desenvolvemento e procura de erros de amplo espectro mentres a empresa segue obtendo beneficios polas regalías para manter algúns desenvolvedores a tempo completo.</para
> 
     <para
>Dous exemplos moi coñecidos son <ulink url="http://www.mysql.com/"
>MySQL</ulink
>, creadores da base de datos co mesmo nome, e <ulink url="http://www.sleepycat.com/"
>Sleepycat</ulink
>, que distribúe e dá soporte á base de datos Berkeley. Non é coincidencia que ambas sexan empresas de bases de datos; as bases de datos adoitan estar integradas en aplicacións antes que seren vendidas directamente aos usuarios, o cal encaixa perfectamente cun modelo de licenciamento dual.</para
> 
     </listitem>
   </varlistentry>

   <varlistentry
><term
>Doazóns</term>
     <listitem>
     <para
>Un proxecto popular pode ás veces obter contribucións significativas tanto de individuos como de organizacións, simplemente tendo en liña un botón de doazóns ou ás veces vendendo produtos promocionais como cuncas de café, camisetas, tapetes de rato, etc. Precaución: se o teu proxecto acepta doazóns, planifica como vai ser empregado o diñeiro <emphasis
>antes</emphasis
> de que este chegue, e publica o plan na páxina web do proxecto. As discusións sobre a onde dirixir o diñeiro adoitan ser máis suaves antes de telo; e de todos os xeitos, se houber desacordos significativos, é mellor descubrilos mentres a planificación do uso do diñeiro for teórica.</para>
     </listitem>
   </varlistentry>

</variablelist>

<para
>O modelo de negocio dun patrocinador non é o único factor co que este se relaciona cunha comunidade de código aberto. A relación histórica entre ambos tamén importa: iniciou a empresas o proxecto ou uniuse a posteriori? En ambos casos, o patrocinador terá que gañarse a credibilidade, mais (como era de esperar) será preciso un maior esforzo no segundo caso. A organización debe ter uns obxectivos claros a respecto do proxecto. A empresa está tentando manter unha posición de liderado, ou simplemente está intentando ser unha voz dentro da comunidade para guiala mais sen necesariamente gobernar a dirección do proxecto? Ou só desexa ter un par de committers (desenvolvedores que teñen os permisos precisos para faceren mudanzas no repositorio de código fonte do proxecto) capaces de amañaren os problemas dos usuarios e introduciren as mudanzas na distribución pública sen moito rebumbio?</para>

<para
>Mantede estas preguntas en mente mentres ledes as seguintes directrices. Están pensadas para a súa aplicación en calquera participación empresarial dentro dun proxecto de software libre, mais cada proxecto é un entorno humano, polo cal non hai dous que sexan iguais. Ata certo punto, será preciso improvisar, mais seguindo estes principios verás aumentadas as posibilidades de que as cousas saian como ti queres.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="long-term-developers">
<title
>Contratos a longo prazo</title>

<para
>Se estás xestionando desenvolvedores nun proxecto de código aberto, tenta mantelos o tempo suficiente para que adquiran experiencia tanto técnica como política; un par de anos, como mínimo. Por suposto que ningún proxecto nin de software libre nin de software privativo se beneficia do intercambio continuo de programadores. A necesidade dos chegados hai pouco de aprenderen todo desde cero pode ser perniciosa nalgúns entornos. Mais a penalización é maior nos proxectos de código aberto, porque os desenvolvedores que marchan levan con eles non só o coñecemento do código, senón tamén o seu status dentro da comunidade e mailas relacións humanas que fixeron nela.</para>

<para
>A credibilidade acumulada por un desenvolvedor non pode ser transferida. O exemplo máis obvio está en que un desenvolvedor que acaba de incorporase non pode herdar o nivel acceso ao código de quen marcha (máis en <xref linkend="money-vs-love"/>), así que se o novo desenvolvedor non ten permisos para realizar mudanzas, deberá enviar remendos ata conseguir estes permisos. Mais este nivel de acceso só é a manifestación máis cuantitativa da perda de influencia. Un desenvolvedor veterano tamén coñece os vellos temas que foron tratados unha e outra vez nas roldas de discusión. Un desenvolvedor novato, sen ter memoria destas conversacións, quizais tente retomar estes temas, levando a túa empresa a unha perda de credibilidade; outros pode que pensen: "Entón, esta xente non pode recordar nada?". Un novo desenvolvedor tampouco terá ningunha relación política coas personalidades do proxecto, e non poderá influenciar na dirección de desenvolvemento tan rápida ou suavemente como alguén que leve moito tempo no proxecto.</para>

<para
>Adestra os novatos mediante un programa de incorporación supervisada. O novo desenvolvedor debe estar en contacto directo coa comunidade de desenvolvemento pública desde o primeiro día, comezando con correccións de erros e tarefas de limpeza, de xeito que poida aprender a base do código e adquirir unha reputación na comunidade, mais sen entraren en discusións de deseño. Durante este tempo, un ou máis desenvolvedores experimentados deben estar dispoñibles para resolver dúbidas, e deben ler cada mensaxe que o novo desenvolvedor envíe ás listas de correo de desenvolvemento, mesmo se se tratar de fíos aos que os desenvolvedores experimentados normalmente non lles prestan atención. Isto axudaralle ao grupo a ver potenciais dificultades antes de que o novo desenvolvedor caia nelas. Dar ánimos e orientación en privado, detrás do telón, pode axudar moito, especialmente se o novo desenvolvedor non estiver acostumado a que o seu código sexa paralela e masivamente revisado polos seus iguais.</para>

<para
>Cando CollabNet contrata un novo desenvolvedor para traballar en Subversion, sentámonos xuntos e escollemos algúns erros abertos para que a nova incorporación se adestre. Discutimos os aspectos técnicos xerais da solución, e despois asignamos polo menos un desenvolvedor experimentado para que (publicamente) revise o remendo que ese novo desenvolvedor (publicamente) vai enviar. Normalmente nin tan sequera lle botamos unha ollada ao remendo antes de que a rolda de desenvolvemento principal o vexa, aínda que o facemos se hai algunha razón para elo. O importante é que o novo desenvolvedor pase polo proceso de revisión pública, aprendendo a base do código mentres simultaneamente se habitúa a recibir críticas provenientes de completos descoñecidos. Aínda así, tentamos coordinar os prazos, de xeito que a nosas propias revisións cheguen inmediatamente despois do envío do remendo. Deste xeito a primeira revisión vista na rolda é a nosa, podendo axudar a establecer o ton do resto de revisións. Isto tamén contribúe á idea de que a nova persoa debe tomarse en serio: se outros ven que estamos empregando tempo en revisións detalladas, con profundas explicacións e referencias aos arquivos cando for apropiado, vanse decatar de que o estamos adestrando e que isto probablemente significa un investimento a longo prazo. Este feito pode posicionalos máis positivamente cara o novo desenvolvedor, cando menos ata o punto de empregaren un pouco tempo extra en responder preguntas e revisar remendos.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="appear-as-many">
<title
>Parecer varios, non un</title>

<para
>Os teus desenvolvedores deben tentar aparecer nos foros públicos do proxecto como participantes individuais, máis que como unha presencia corporativa monolítica. Isto non é así porque haxa unha connotación negativa inherente ás presencias corporativas monolíticas (ben, quizais si que as haxa, mais non é sobre o que trata este libro). En troca diso, débese a que os individuos son o único tipo de entidade para a que os proxectos de código aberto están estruturalmente preparados. Un contribuínte individual pode ter discusións, enviar remendos, adquirir credibilidade, votar, etc. Unha empresa non pode.</para>

<para
>Máis aínda, ao comportarse dun xeito descentralizado, elimínase o estímulo de centralización da oposición. Deixa que os teus desenvolvedores teñan desacordos entre si nas listas de correo. Anímaos a revisaren o código dos compañeiros tan frecuente e publicamente como o farían co código dos demais. Disuádeos de votaren sempre como un bloco, porque se o fixeren, outros poden comezar a sentir que, dun xeito xeral, está habendo un esforzo organizado para mantelos aliñados.</para>

<para
>Hai unha diferencia entre realmente estar descentralizado e simplemente parecer estalo. Baixo certas circunstancias, ter os teus desenvolvedores actuando concertadamente pode ser moi útil, e deberían estar preparados para coordinárense detrás dos bastidores cando for necesario. Por exemplo, cando se fai unha proposta, ter cedo varias persoas afirmando estaren de acordo pode axudala, dando a impresión dun consenso crecente. Os demais van sentir que a proposta ten potencia, e que se a refutaren, pararán esa potencia. Así, a xente só vai obxectar se tiver unha boa razón para facelo. Non hai nada malo en orquestrar o acordo deste xeito, sempre e cando as obxeccións sigan tomándose en serio. As manifestacións públicas dun acordo privado non son menos sinceras por teren sido coordinadas baixo a manga, e non son daniñas mentres non se empregaren para disolver argumentacións opostas. O seu propósito simplemente é inhibir o tipo de xente á que lle gusta obxectar só para manterse en forma; bótalle unha ollada a <xref linkend="bikeshed"/><phrase output="printed"
> en <xref linkend="communications"/></phrase
> para saberes máis sobre eles.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="open-motives">
<title
>Sé aberto sobre as túas motivacións</title>

<para
>Sé tan aberto como poidas sobre os obxectivos da túa empresa, sen comprometeres os seus secretos comercias. Se queres que o proxecto adquira unha funcionalidade concreta porque, seica, os teus clientes a están a reclamar, dio directamente nas listas de correo. Se os clientes quixeren permanecer no anonimato, como pode ser o caso ás veces, polo menos pregúntalles se poden ser empregados como exemplo xenérico. Canto máis saiba a comunidade pública de desenvolvemento sobre <emphasis
>por que</emphasis
> ti queres o que queres, máis cómoda se vai sentir co que propuxeres.</para>

<para
>Isto contradí o instinto&mdash;tan sinxelo de adquirir e tan complicado de deixar&mdash;de que o coñecemento é poder, e que canto máis saiban os demais sobre os teus obxectivos, máis control terán sobre ti. Mais ese instinto está errado neste caso. Ao avogar publicamente por unha funcionalidade (ou corrección de erro, ou o que for) ti <emphasis
>xa</emphasis
> puxeches as cartas enriba da mesa. A única cuestión agora é saber se terás éxito en guiar a comunidade a compartir o teu obxectivo. Se ti simplemente enuncias o que queres, mais non podes fornecer exemplos concretos do porqué, entón a túa argumentación é feble e a xente comezará a sospeitar dunha axenda secreta. Pola contra, se dás aínda que só sexa un pequeno conxunto de escenarios reais, amosando por que a funcionalidade proposta é importante, isto pode ter un efecto dramático no debate.</para>

<para
>Para veres por que isto é así, considera a alternativa. Demasiado a miúdo, os debates sobre as novas funcionalidades ou direccións son longos e cansados. Os argumentos que a xente emprega a miúdo redúcense a "Eu persoalmente quero X" ou o sempre popular "Nos meus anos de experiencia como deseñador de software, X é extremadamente importante para os usuarios / unha parvada inútil que non agradecerá ninguén". Previsiblemente, a ausencia de datos sobre o uso no mundo real nunca axuda a acurtar estes debates, senón que permite divagar máis e máis sen ningunha base en experiencia real de usuario. Sen forzas de contraposición, o final resultante probablemente non sexa determinado pola alternativa mellor artellada, ou polo máis persistente, ou polo máis experimentado.</para>

<para
>Como organización cunha chea de datos dispoñibles sobre os clientes, ti tes a oportunidade de forneceres esa forza de contraposición. Ti podes ser un canal para a información que doutro xeito non tería medios para chegar á comunidade de desenvolvemento. O feito de que esa información lle axude aos teus desexos non ten porque darche vergoña. A maioría dos desenvolvedores individualmente non teñen unha ampla experiencia sobre como se usa o software que escriben. Cada desenvolvedor emprega o software segundo a súa idiosincrasia; sobre os patróns de uso dos demais, dependen da súa intuición e capacidade de adiviñación, e no fondo sábeno. Fornecendo datos cribles sobre un número significativo de usuarios, estáslle dando á comunidade pública de desenvolvemento algo equivalente ao osíxeno. Sempre que os presentes dun xeito correcto, daranlles unha benvida entusiasta e impulsarán as cousas na dirección que ti queres que sigan.</para>

<para
>A chave, por suposto, está en presentares ben as cousas. Nunca funcionará simplemente insistires en que tratas cun gran número de usuarios, e que porque eles precisan (ou pensan que precisan) unha funcionalidade dada, entón a túa solución debe ser implementada. En lugar diso, deberías enfocar as túas mensaxes iniciais no problema en troca de nunha solución particular. Describe ao detalle as experiencias que os teus clientes están a atopar, fornece todas as análises que teñas dispoñibles e cada solución razoable na que poidas pensar. Cando a xente comezar a especular sobre a eficacia e eficiencia de varias solucións, ti podes basearte nos teus datos para defenderes ou refutares o que se está a dicir. Debes ter unha solución concreta en mente durante o proceso, mais non lle debes dar unha consideración especial ao comezo. Isto non é enganar, simplemente é o comportamento estándar dun "operador de bolsa honesto". Despois de todo, o teu auténtico obxectivo é resolver o problema; unha solución só é un medio para ese fin. Se a solución que ti prefires realmente é superior , outros desenvolvedores recoñecerán este feito por si mesmos, e apoiarana porque así o decidiron, o cal é moito mellor que empurralos á súa implementación. (Tamén existe a posibilidade de que pensen nunha solución mellor).</para>

<para
>Isto non quere dicir que nunca poidas interceder en favor dunha solución específica. Mais debes ser paciente para ver repetida na lista pública de desenvolvemento a análise que previamente xa fixestes dun xeito interno. Non envíes mensaxes dicindo "Si, nós xa o vimos, mais non funciona polas razóns A, B e C. Cando se chega ao fondo do problema, o único camiño para resolvelo é..." O problema non é o arrogante que isto soa, senón que dá a impresión de que vós <emphasis
>xa </emphasis
> investístedes, a porta pechada, unha cantidade descoñecida (aínda que a xente pensará que moi grande) de recursos analíticos no problema. Isto fai parecer que os esforzos de conceptualización, e pode que as decisións, se fixeron sen acceso por parte do público, e esta é unha receita para o resentimento.</para>

<para
>Naturalmente, <emphasis
>ti</emphasis
> sabes canto esforzo investístedes internamente no problema, e ese coñecemento é, en certa maneira, unha desvantaxe, ao empurrares os teus desenvolvedores a un espazo mental diferente que o do resto da xente das listas de correo, reducindo a súa habilidade para veren as cousas desde o punto de vista daqueles que aínda non pensaron moito sobre o problema. Canto máis cedo poidas ter a todos os demais pensando sobre as cousas do mesmo xeito que vós, menor será o efecto deste distanciamento. Esta lóxica non só se aplica a situacións técnicas individuais, senón tamén ao gran mandamento de clarificares os teus obxectivos tanto como poidas. O descoñecido sempre é máis desestabilizante que o coñecido. Se a xente entende por que ti queres o que queres, sentirase cómoda falando contigo mesmo cando estiveren en desacordo. Se descoñecen o que che gusta, asumirán o peor, polo menos durante algún tempo.</para>

<para
>Por suposto que non debes publicitar todo, nin a xente o espera de ti. Todas as organizacións teñen segredos,; quizais as organizacións comerciais teñan máis, mais as organizacións sen ánimo de lucro tamén os teñen. Se debes avogar por un camiño concreto, mais non podes revelar nada sobre o porqué, simplemente ofrece os mellores argumentos que poidas baixo esa limitación, e acepta o feito de que pode que non teñas tanta influencia na discusión como che gustaría. Este é un dos compromisos que adoptas para teres unha comunidade de desenvolvemento fóra da túa nómina.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="money-vs-love">
<title
>O diñeiro non pode comprar o amor</title>

<para
>Se es un desenvolvedor asalariado nun proxecto, entón establece axiña as  normas sobre o que o diñeiro pode comprar e o que non. Isto non quere dicir que teñas que mandar dúas mensaxes ao día ás listas de correo reiterando a túa nobre e incorruptible natureza. Simplemente quere dicir que debes estar atento para desfacer as tensións que <emphasis
>poderían</emphasis
> ser creadas polo diñeiro. Non debes comezar asumindo que as tensións están aí; o preciso é demostrares que estás ao tanto de que potencialmente poden xurdir.</para>

<para
>Un exemplo perfecto disto xurdiu no proxecto Subversion. Subversion arrancou en 2000 grazas a <ulink url=\"http://www.collab.net/\"
>CollabNet</ulink
>, o cal é o principal financeiro do proxecto desde a súa concepción, pagando os salarios de varios desenvolvedores (nota: eu son un deles). Pouco despois do comezo do proxecto, contratamos outro desenvolvedor, Mike Pilato, para unirse ao esforzo. Na altura xa se comezara a escribir código.
Embora Subversion aínda estaba nas súas etapas iniciais, xa había unha comunidade de desenvolvemento cun conxunto de normas básicas.</para>

<para
>A chegada de Mike fixo xurdir unha cuestión interesante. Subversion xa tiña unha política sobre como os novos desenvolvedores conseguían acceso para faceren commit (gravación de mudanzas no repositorio central do código fonte). Primeiro, debían enviar algúns remendos ás roldas de correo de desenvolvemento. Despois dun número suficiente de remendos para que o resto de desenvolvedores puidesen ver que o novo contribuínte sabía o que estaba a facer, alguén propoñía que simplemente fixera commit directamente (esta proposta era privada, como se describe en <xref linkend="committers"/>). Asumindo o acordo dos desenvolvedores con acceso a facer commit, un deles enviáballe un correo ao novo desenvolvedor e ofrecíalle acceso a facer commit no repositorio do proxecto.</para>

<para
>CollabNet contratara a Mike especificamente para traballar en Subversion. Entre os que xa o coñecían, non había dúbida sobre as súas capacidades técnicas nin sobre a súa preparación para traballar no proxecto. Ademais, os desenvolvedores voluntarios tiñan unha moi boa relación cos empregados de CollabNet, e presumiblemente a maioría non presentaría obxeccións se lle tivermos dado a Mike acceso a facer commit o día que o contratamos. Mais sabiamos que estariamos sentando un precedente. Se lle tivermos dado acceso a facer commit a Mike por mandato, estariamos dicindo que CollabNet tiña o dereito de ignorar as directrices do proxecto, simplemente por ser o inversor primario. Mentres que o dano causado por isto aparentemente non necesariamente tería que ser inmediato, gradualmente provocaría un sentimento de non representatividade por parte dos desenvolvedores non asalariados: outras persoas teñen que gañar o seus acceso a facer commit&mdash;Collabnet simplemente cómprao.</para>

<para
>Polo tanto Mike estivo de acordo en comezar o seu traballo en CollabNet como calquera outro desenvolvedor voluntario, sen acceso a facer commit. Enviou remendos ás listas públicas de correo, onde os mesmos poderían ser, e eran, revisados por todo o mundo. Nós tamén dixemos na lista de correo que estabamos facendo estas cousas deliberadamente, para que non se perdera a perspectiva. Despois dun par de semanas de sólida actividade de Mike, alguén (non podo lembrar se foi un desenvolvedor de CollabNet ou non) propúxoo para ter acceso a facer commit, e foi aceptado, como sabiamos que ía ser.</para>

<!--

The relevant dates for Mike Pilato are:

   http://subversion.tigris.org/servlets/ReadMsg?list=dev&msgNo=2943

   From: "C. Michael Pilato" <cmpilato@collab.net>
   To: "dev@subversion.tigris.org" <dev@subversion.tigris.org>
   Subject: Introducing...me.
   Message-ID: <Pine.LNX.4.21.0101121604240.1653-100000@pascal>
   Date: Fri, 12 Jan 2001 16:04:44 -0800 (PST)

followed by:

   2001-01-30 15:35  C. Michael Pilato <cmpilato@collab.net>

        * configure.in (1.49), subversion/clients/win32/svn_com/svn_com.dsp
        (1.3), subversion/include/svn_path.h (1.26),
        subversion/libsvn_subr/path.c (1.29):

        Fixes path inconsistencies on Windows.  More generally, actually
        makes use of the "style" parameter passed to the path library
        functions to choose the right path delimeter ('/' or '\' at this
        time).  
        
        * config.hw (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for Windows usage.  
        
        * configure.in (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for those systems that use autoconf.  
        
        * svn_com.dsp: 
          Added the subversion root directory to the include path so
          config.h can be found by the inclusion of the path headers.  
        
        * svn_path.h (SVN_PATH_REPOS_SEPARATOR, SVN_PATH_URL_SEPARATOR): 
          Added url separator define, and changed naming of repos to be an
          exported symbol.  
        
        * path.c (get_separator_from_style): 
          Added new function for choosing an appropriate path separator,
          given a subversion path style.  Also changed a variety of
          functions in this module to make use of this new function instead of
          simply using SVN_PATH_REPOS_SEPARATOR.  

   2001-01-30 12:23   Karl Fogel <kfogel@collab.net>

        * AUTHORS (1.9):

        Added Mark Murphy, Bill Tutt, C. Michael Pilato.  
-->

<para
>Esta coherencia dáche unha credibilidade que o diñeiro non podería comprar nunca. E a credibilidade é unha moeda valiosa a ter nas discusións técnicas: inmunízate fronte a que cuestionen máis tarde os teus motivos. Na calor da argumentación, a xente ás veces busca camiños non técnicos para gañaren a batalla. O investidor principal do proxecto, debido á súa profunda participación e obvia incumbencia sobre as direccións que o proxecto toma, presenta uns obxectivos máis amplos que a maioría. Sendo escrupuloso na observación de todas as directrices do proxecto desde o comezo, o investidor adquire o mesmo tamaño que todos os demais.</para>

<para
>(Ver tamén o blog de Danese Cooper en <ulink url="http://blogs.sun.com/roller/page/DaneseCooper/20040916"
></ulink
> para ver unha historia similar sobre o acceso a facer commit. Cooper foi a "Open Source Diva" de Sun Microsystems&mdash;creo que ese era o seu título oficial&mdash;e na entrada do blog, describe como a comunidade de desenvolvemento de Tomcat fixo que Sun seguise para os seus desenvolvedores os mesmos estándares que para os desenvolvedores que non eran de Sun)</para>

<para
>A necesidade dos investidores de xogaren coas mesmas normas que os demais quere dicir que o modelo de goberno da Ditadura Benevolente (ver <xref linkend="benevolent-dictator"/><phrase output="printed"
> en <xref linkend="social-infrastructure"/></phrase
>) é lixeiramente máis duro de conseguir ante a presencia de fondos económicos, sobre todo se o ditador traballa para o investidor principal. Dado que unha ditadura ten poucas normas, é difícil demostrar para o investidor que é respectuoso cos estándares da comunidade permanentemente, mesmo cando o for. Certamente non é imposible; só require un líder de proxecto capaz de ver as cousas desde o punto de vista dos desenvolvedores externos, así como desde o do investidor, e de actuar en consecuencia. Mesmo así, probablemente sexa unha boa idea ter unha proposta de goberno non ditatorial preparada como Plan B, lista para ser presentada no momento que houber indicadores de insatisfacción na comunidade.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="contracting">
<title
>Contratación</title>

<para
>O traballo contratado precisa ser manexado con coidado nos proxectos de software libre. Idealmente, ti queres que o traballo contratado sexa aceptado pola comunidade e incorporado á distribución pública. En teoría, non debería importar quen é o contratista, polo menos mentres cumprir coas directrices do proxecto. A teoría e a práctica ás veces coinciden: un completo descoñecido que se presenta con un bo remendo xeralmente <emphasis
>será capaz</emphasis
> de introducilo no software. O problema radica en que é moi difícil de producir un bo remendo para melloras non triviais ou producir unha nova funcionalidade cando realmente es un completo descoñecido; primeiramente debe discutirse co resto do proxecto. A duración desta discusión non pode ser calculada con precisión. Se ao contratista se lle pagar por horas, poderías acabar pagando máis do que esperas; se se lle pagar unha suma prefixada, el pode acabar facendo máis traballo do que pode permitirse.</para>

<para
>Hai dous camiños para afrontar isto. O mellor xeito é facer un cálculo aproximado sobre a lonxitude do proceso de discusión, baseado en anteriores experiencias, engadíndolle algunhas marxes para contemplar a posibilidade de erros, e basear a contratación nisto. Este modo de operar tamén axuda a dividir o problema en varios máis pequenos, todo o independentes que for posible, para incrementar a previsibilidade de cada anaco. O outro xeito é contratar unicamente a entrega dun remendo, e tratar a aceptación do remendo no proxecto público como algo individual. Así é moito máis sinxelo escribir o contrato, mais ficas atrapado baixo a carga de manteres un remendo privado tanto tempo como dependeres do software, ou polo menos tanto tempo como demorares en conseguir ese remendo ou unha funcionalidade equivalente na rama principal. Por suposto, mesmo no mellor caso, o contrato en si mesmo non pode requirir que o remendo sexa aceptado no código, dado que isto requiriría vender algo que non está en venda. (Que pasaría se o resto do proxecto inesperadamente decidise non soportar a funcionalidade?) Non obstante, o contrato pode requirir un esforzo de <foreignphrase
>boa fe</foreignphrase
> para conseguir que as mudanzas sexan aceptadas pola comunidade, e que sexan introducidas no repositorio se a comunidade estiver de acordo con elas. Por exemplo, se o proxecto tiver estándares de escritura a respecto das mudanzas no código, o contrato pode referenciar estes estándares e especificar  que o traballo debe respectalas. Na práctica, isto normalmente non funciona do xeito que todo o mundo espera.</para>

<para
>A mellor táctica para unha contratación con éxito é contratar un dos desenvolvedores do proxecto&mdash; preferiblemente un committer&mdash. Esta pode parecer unha forma de comprar influencia, e si, o é. Mais non é tan corrupta como podería parecer. A influencia dun desenvolvedor no proxecto débese principalmente á calidade do seu código e ás súas interacción cos outros desenvolvedores. O feito de que teña un contrato para facer determinadas cousas non eleva o seu status, nin o diminúe, aínda que pode facer que a xente o escrute máis coidadosamente. Moitos desenvolvedores non arriscan a súa posición no proxecto por darlle cobertura a unha noa funcionalidade inapropiada ou fortemente degradada. De feito, parte do que obtés, ou poderías obter, cando contratas son consellos sobre que tipos de mudanzas probablemente sexan aceptadas pola comunidade. Ti tamén obtés unha leve elevación nas prioridades do proxecto. Debido á que a priorización non é máis que ver quen ten tempo para traballar en que, cando pagas polo tempo de alguén, provocas que o seu traballo suba un pouco na cola de prioridades. Este é un feito ben coñecido para os desenvolvedores de software libre experimentados, e cando menos algúns deles vanlle dedicar atención ao traballo contratado simplemente porque parece que vai ser feito, dado que queren axudar a que se faga ben. Talvez non escriban nada do código, mais debaterán o deseño e revisarán o código, podendo ser moi útiles ambas cousas. Por todas estas razóns, o contratista é mellor visto dende as bancadas dos que xa están a participar no proxecto.</para>

<para
>Isto lanza inmediatamente dúas preguntas: os contratos deben ser sempre privados? E cando non o foren, deberías preocuparte pola creación de tensións na comunidade derivadas do feito de tiveres contratado algúns desenvolvedores e non outros?</para>

<para
>É mellor seres transparente sobre os contratos, cando puideres. Doutro xeito, o comportamento do contratado pode parecerlle estrano a outros na comunidades&mdash;pode que de repente inexplicablemente lle dea alta prioridade a funcionalidades nas que nunca amosara interese no pasado. Cando a xente lle pregunta porque as valora agora, como pode responder convincentemente se non pode falar sobre o feito de que foi contratado para escribilas?</para>

<para
>Ao mesmo tempo, nin ti nin o contratado deberiades actuar como se os demais debesen tratar o voso acordo como un gran trato. Demasiado frecuentemente teño visto contratados danzaren nas listas de correo de desenvolvemento coa actitude de que as súas mensaxes deberían ser consideradas máis en serio simplemente porque se lles estaba pagando. Este tipo de actitudes sinálalle ao resto do proxecto que o contratado considera máis importante o feito do contrato en lugar do resultado da codificación resultante do contrato. Mais desde o punto de vista do resto de desenvolvedores, só o código importa. En todo momento, o foco de atención debe manterse nas cuestión técnicas, e non nos detalles de quen paga a quen. Por exemplo, un dos desenvolvedores da comunidade de Subversion manexa a súa contratación dun xeito particularmente elegante. Mentres no IRC se discuten as súas mudanzas no código, el menciona aparte (normalmente dun xeito privado con mensaxes <firstterm
>privmsg</firstterm
>, do IRC) que o seu traballo nese erro ou funcionalidade en concreto está sendo pagado. Pero sempre, e dun xeito coherente, dá a impresión de que de igual xeito querería estar traballando nesa mudanza, e de que está contento de que os cartos fagan posible que o poida facer. Pode ou non revelar a identidade do seu cliente, mais en todo caso, el non vive do contrato. Salienta que só é un adorno dos debates técnico sobre como facer as cousas.</para>

<para
>Este exemplo mostra outra razón pola que é bo ser transparente sobre os contratos. Podería haber múltiples organizacións financiando contratos nun proxecto de código aberto dado, e se cada un coñece o que os demais están tratando de facer, poderían poñer en común os seus recursos. No caso anterior, o maior financiador do proxecto (CollabNet) non está involucrado de ningún xeito con estes contratos a desagregados, mais coñecer que algún outro está financiando determinadas correccións de erros permitiríalle a CollabNet encamiñar os seus recursos a outros erros, obtendo unha maior eficiencia para o conxunto do proxecto.</para>

<para
>Vanse ofender outros desenvolvedores debido a que algúns cobren por traballar no proxecto? Xeralmente non, sobre todo cando os que cobran están ben posicionados, e xa eran membros respectados da comunidade. Ninguén espera que o traballo contratado sexa distribuído con ecuanimidade entre os committers. A xente comprende a importancia das relacións de longa duración: as incertezas involucradas na contratación son tales que unha vez atopares alguén que saibas que pode traballar contigo es relutante a trocalo por unha persoa diferente só para seres equitativo. Pénsao deste xeito: a primeira vez que contratas, non vai haber queixas, porque claramente tes que escoller <emphasis
>alguén</emphasis
>&mdash; non é culpa túa que non poidas contratar todo o mundo. Despois, cando contratas a mesma persoa por segunda vez, entón só é sentido común: ti xa o coñeces, a última vez tivestes éxito, entón por que asumir riscos innecesarios? Deste modo, é perfectamente natural ter unha ou dúas persoas de man na comunidade, en lugar de repartir o traballo uniformemente.</para>

<sect2 id="community-review-acceptance">
<title
>Revisión e aceptación de mudanzas</title>

<para
>A comunidade segue sendo importante para o éxito do traballo contratado. A súa participación no deseño e no proceso de revisión das mudanzas significativas non se pode facer a última hora. Debe ser considerada parte do traballo, e ser abrazada polo contratista. Non penses no escrutinio da comunidade como un obstáculo a ser evitado&mdash;pensa nel como un departamento de deseño e garantía de calidade. É beneficioso ser perseguido, e non simplemente soportado.</para>

<sect3 id="cvs-pserver">
<title
>Caso de estudo: o protocolo de autenticación vía contrasinal de CVS</title>

<para
>En 1995, fun a metade dunha sociedade que fornecía soporte e melloras a CVS (o "Concurrent Versions System"; mira <ulink url="http://www.cvshome.org/"
></ulink
>). O meu socio Jim e máis eu eramos, informalmente, os mantedores de CVS. Pero nós nunca pensaramos coidadosamente sobre como deberiamos dicirllo á comunidade de voluntarios de desenvolvemento de CVS. Nós simplemente asumimos que eles continuarían enviando remendos, e nós aplicariámolos, e así sería como funcionaría.</para>

<para
>Voltando ao tema, o traballo en rede sobre CVS só podía facerse mediante un programa de acceso remoto como <literal
>rsh</literal
>. Empregar a mesma seña tanto para o acceso ao CVS como para acceso ao login era un risco de seguridade obvio, e moitas organizacións adiaron o seu uso debido a isto. Un importante banco contratounos para engadir un novo mecanismo de autenticación, así poderían empregar de xeito seguro o traballo en rede sobre CVS nos lugares de traballo remotos.</para>

<para
>Jim e máis eu asinamos o contrato e sentámonos a deseñar un novo sistema de autenticación. Chegamos a algo bastante simple (os Estados Unidos daquela tiñan controles de exportación sobre os códigos criptográficos, polo que os clientes entendían que non podiamos implementar unha autenticación forte), mais como non tiñamos experiencia no deseño de tales protocolos, fixemos unhas poucas chapuzadas que terían sido obvias para un experto. Estes erros poderían ter sido vistos facilmente se tiveramos tido o tempo para escribirmos unha proposta e enviarlla aos demais desenvolvedores para unha revisión. Mais nunca chegamos a facelo porque non se nos ocorreu pensar que a lista de desenvolvemento puidera ser empregada como un recurso. Nos sabiamos que a xente probablemente ía aceptar calquera cousa que nós mudaramos, e porque nós non sabiamos o que non sabiamos, non nos preocupabamos de facer o traballo dun xeito visible, por exemplo, enviando remendos con frecuencia, facendo pequenos e sinxelos commits a unha rama especial, etc. O protocolo de autenticación resultante non foi moi bo, e por suposto, unha vez que se chegou a establecer, foi difícil de mellorar debido a cuestións de compatibilidade.</para>

<para
>A raíz do problema non estivo na falta de experiencia; poderiamos ter aprendido dun xeito sinxelo aquilo que precisabamos saber. O problema estivo na nosa actitude cara a comunidade de voluntarios de desenvolvemento. Considerabamos a aceptación das mudanzas como un obstáculo a saltar, máis que como un proceso polo cal a calidade das mudanzas podería ser mellorada. Desde que confiamos en que case todo o que fixeramos sería aceptado (tal como fose), fixemos un esforzo menor para que os demais participasen.</para>

</sect3>

<para
>Obviamente, cando vas a escoller un contratista, ti queres alguén coas capacidades técnicas e experiencia axeitadas para o traballo. Mais tamén é importante escolleres algún con un historial de interacción construtiva na comunidade cos outros desenvolvedores. Deste xeito, vas a obter máis que unha simple persoa; vas obter un axente con permiso para liderar dentro dunha rede de experiencia, asegurando que o traballo se fai dun xeito robusto e que pode ser mantido.</para>

</sect2>

<!-- 
<para
><remark
>Contractors as the route to expansion of services and
support.  Businesses who are deeply involved in the development of an
open source program, and who also sell support and customization
services, are in a resource bind.  The more their business grows, the
more strain they are under, trying to stay involved in the open
source side while using those same developers for in-house work.
Contracting with volunteer developers is one way out of this bind,
but it has to managed carefully (and openly, as far as
possible).</remark
></para>
-->

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="funding-non-programming">
<title
>Financiando actividades para alén da programación</title>

<para
>A programación soamente é parte do traballo dun proxecto de código aberto. Desde o punto de vista dos voluntarios do proxecto, é a parte máis visible e glamurosa. Desafortunadamente, isto significa que as outras actividades, tales como documentación, testaxe formal, etc., ás veces poden desatenderse, polo menos comparadas coa cantidade de atención que adoitan recibir no software propietario. As corporacións ás veces son capaces de completar isto, mediante a dedicación de parte da súa infraestrutura interna de desenvolvemento de software a proxectos de código aberto.</para>

<para
>A chave para facelo con éxito é mediar entre os procesos internos da compañía e os da comunidade pública de desenvolvemento. Esta mediación require esforzo: habitualmente as dúas non son unha parella próxima, e as diferencias só poden ser salvadas mediante intervención humana. Por exemplo, a compañía pode empregar un sistema de notificación de erros distinto ao do proxecto público. Mesmo se ambas empregan o mesmo sistema de notificación de erros, os datos que se almacenan poden ser moi distintos, xa que as necesidades de notificación de erros dunha compañía son moi distintos das dunha comunidade de software libre. Unha peza de información iniciada nun sistema de notificación necesita ser reflectida no outro, cos anacos confidenciais borrados ou, na outra dirección, engadidos.</para>

<para
>As seccións que seguen tratan o tema de como construír e manter estas pontes. O resultado final debería ser que o proxecto de código aberto avanza máis suavemente, a comunidade recoñece os investimentos e recursos da empresa, e memso non sente que a empresa está conducindo inapropiadamente as cousas cara aos seus propios obxectivos.</para>

<!-- integrate the internal into the development community.  If you
     have salaried developers, for example, use them as a liason.
     Don't just have the marketing department send out papers, get
     them fact-checked and also *politics*-checked first.  Make sure
     the QA people know how to use the project's public bug tracker,
     and make sure the community sees that these resources are being
     devoted to the project. -->

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-qa">
<title
>Garantía da calidade (por exemplo, testaxe profesional)</title>

<para
>No desenvolvemento de software propietario, é normal ter equipos de xente dedicados unicamente á garantía da calidade: caza de erros, testaxe de rendemento e escalabilidade, revisión de interfaces e documentación, etc. Como regra, estas actividades non se perseguen tan vigorosamente pola comunidade de voluntarios dos proxectos de software libre. Isto parcialmente débese a que é difícil obter voluntarismo para traballo non glamuroso como a testaxe, en parte porque a xente tende a asumir que tendo unha ampla comunidade de usuarios obtés unha boa cobertura de testaxe; no caso das testaxes de rendemento e escalabilidade, en parte débese a que os voluntarios non adoitan ter acceso aos recursos hardware precisos.</para>

<para
>A asunción de que ter moitos usuarios é equivalente a ter moitos testadores non se fai completamente sen base. Certamente, hai certo acerto asignando testadores a usuarios nas funcionalidades básicas dos entornos comúns: os erros serán rapidamente atopados polos usuarios no curso natural das cousas. Mais debido a que os usuarios só están facer o traballo, non exploran conscientemente os casos límite da funcionalidade do programa, polo que son propensos a deixaren certas clases de erros sen atopar. Máis aínda, cando atopan un erro cun rodeo sinxelo, adoitan implementar en silencio o rodeo sen importarlles a súa notificación. Máis insidiosamente, os padróns de uso dos teus clientes (a xente que dirixe <emphasis
>os teus</emphasis
> intereses no software) poden diferir dun xeito estatisticamente significativo dos padróns de uso do usuario medio da rúa.</para>

<para
>Un equipo profesional de testaxe pode descubrir estes tipos de erros, e pode facelo dun xeito tan sinxelo co software libre como co software propietario. O reto é transferir os resultados do equipo de testaxe ao público dun xeito útil. Os departamentos de testaxe internos adoitan ter un xeito propio de informar sobre os resultados das testaxes, envolvendo a xíria específica da empresa, ou coñecemento especializado sobre clientes particulares e os seus conxuntos de datos. Os devanditos informes poderían ser inapropiados para o sistema de notificación de erros público, tanto pola súa forma como pola cuestión da confidencialidade. Mesmo se o software de notificación de erros da túa empresa fose o mesmo que se emprega no proxecto público, a xestión precisaría facer mudanzas nos comentarios e metadatos específicos da empresa debido ás anteriores cuestións (por exemplo para contemplar a cuestión da prioridade interna, ou planificar a resolución para un cliente particular). Normalmente estas notas son confidenciais; ás veces nin se lle mostran ao cliente. Mais memso cando non son confidenciais, non pertencen ao proxecto público, e por tanto o público non debería ser distraído con elas. </para>

<para
>O núcleo da notificación de erros <emphasis
>é</emphasis
> importante en si mesmo para o público. De feito, unha notificación de erro que parte do teu departamento de testaxe é, desde múltiples puntos de vista, máis valiosa que unha que se reciba dos usuarios, dado que o departamento de testaxe proba cousas que o resto de usuarios non proban. Dado que é pouco probable que vaias recibir esa notificación de erro concreta de ningunha outra fonte, é importante que a conserves e a tornes dispoñible para o proxecto público.</para>

<para
>Para facelo, ou ben o departamento de garantía de calidade arquiva estas cuestións directamente no sistema público de notificación (se se senten cómodos facéndoo) ou ben un intermediario (habitualmente un dos desenvolvedores) pode "traducir" os informes internos do departamento de testaxe en novas incidencias no sistema público de notificación de erros. A tradución só quere dicir describir o erro dun xeito que non faga referencia á información específica do cliente (o xeito de reprodución podería conter datos do cliente, asumindo que o cliente o aprobe, por suposto).</para>

<para
>O preferible é ter o departamento de garantía de calidade arquivando directamente as incidencias no sistema de notificación público. Isto dálle ao público unha apreciación máis directa da participación da túa empresa no proxecto: as notificacións de erros útiles dánlle á túa empresa tanta credibilidade como calquera contribución técnica. Ademais, tamén lle dá aos desenvolvedores un canal de comunicación co equipo de testaxe. Por exemplo, se o equipo interno de garantía de calidade esta monitorizando o sistema público de incidencias, un desenvolvedor pode inserir unha solución para un erro de escalabilidade (para o cal o desenvolvedor podería non ter os recursos precisos por si mesmo para facer o test), e logo engadir unha nota á incidencia pedíndolle ao equipo de garantía de calidade que comprobe se a solución produce o efecto desexado. Conta con algunha resistencia por parte dalgúns desenvolvedores; os programadores teñen a tendencia de considerar a garantía de calidade como, no mellor caso, un mal necesario. O equipo de garantía de calidade pode vencer esta tendencia dun xeito sinxelo atopando erros significativos e arquivando informes comprensibles; por outra banda, se os seus informes non son polo menos tan bos como os que veñen dun usuario medio da comunidade, entón non ten sentido que interaxan directamente co equipo de desenvolvemento.</para>

<para
>De calquera xeito, unha vez que existe unha incidencia pública, a incidencia interna orixinal podería simplemente referenciar á incidencia pública polo contido técnico. A xestión e os desenvolvedores en nómina deberían continuar comentando a incidencia interna empregando comentarios específicos da empresa cando for necesario, mais deberían usar a incidencia pública para a información que debería estar dispoñible por todo o mundo.</para>

<para
>Debes entrar neste proceso esperando unha sobrecarga extra. Manter dúas incidencias para un único erro é, naturalmente, máis traballo que manter unha soa incidencia. O beneficio está en que máis desenvolvedores van ver o informe de erros e van poder contribuír na súa solución.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-legal">
<title
>Consellos legais e protección</title>

<para
>As corporacións, con ou sen ánimo de lucro, son case as únicas entidades que sempre prestan atención ás complexas cuestións legais do software libre. Os desenvolvedores individuais habitualmente entenden os matices de varias licenzas de código aberto, mais xeralmente non teñen o tempo ou recursos para seguir en detalle as leis dos dereitos de copia, marcas comerciais e patentes. Se a túa empresa ten un departamento legal, pode colaborar cun proxecto examinando o status dos dereitos de copia do código, e botándolle unha man aos desenvolvedores para entenderen as posibles cuestións de patentes e marcas comerciais. As formas exactas que esta axuda pode adoptar discútense en <xref linkend="legal"/>. O principal é asegurar que a comunicación entre o departamento legal e a comunidade de desenvolvemento, se a hai, ocorra cunha mutua apreciación dos moi diferentes universos dos que veñen ambas partes. En ocasións, estes dous grupos non se comunican entre si, cada parte asume que a outra posúe coñecementos específicos do dominio que en realidade non ten. Unha boa estratexia consiste en ter unha ligazón (normalmente un desenvolvedor, ou incluso un avogado con experiencia técnica) entre ambos que faga as traducións entre ambos cando se precisaren.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-documentation-usability">
<title
>Documentación e usabilidade</title>

<para
>A Documentación e maila usabilidade son famosos puntos débiles nos proxectos de código aberto, aínda que creo que, polo menos no caso da documentación, a diferencia entre o software libre e o propietario é esaxerada con frecuencia. Non obstante, é empiricamente certo que moito software de código aberto padece da falta de documentación de primeira clase, e de investigación na usabilidade.</para>

<para
>Se a túa organización quere axudar a cubrir estas deficiencias nun proxecto, probablemente a mellor cousa que poida facer sexa contratar xente que <emphasis
>non</emphasis
> sexa desenvolvedora habitual no proxecto, mais que sexa capaz de interactuar produtivamente cos desenvolvedores. A non contratación de desenvolvedores habituais do proxecto é boa por dúas razóns: primeiro, deste xeito non restas tempo de desenvolvemento no proxecto; segundo, a xente máis próxima ao proxecto normalmente é a xente equivocada para escribir a documentación ou investigar na usabilidade, xa que teñen dificultades para ver o software desde o punto de vista dun foráneo.</para>

<para
>Porén, segue sendo necesario, para calquera que traballar nestes problemas, comunicarse cos desenvolvedores. Atopa xente suficientemente técnica para falar co equipo de codificación, mais non tan experta no software como para que non poida sentir empatía cos usuarios medios.</para>

<para
>Un usuario de nivel medio probablemente sexa a persoa correcta para escribir unha boa documentación. De feito, despois de que a primeira edición deste libro foi publicada, recibín o seguinte correo electrónico dun desenvolvedor de software libre chamado Dirk Reiners:</para>

<screen
>Un comentario sobre diñeiro, documentación e usabilidade: cando nós tivemos
algúns cartos para gastar e decidimos que un tutorial para principiantes era a peza
máis fundamental que necesitabamos, contratamos un usuario de nivel medio para
escribila. El recibira unha introdución ao sistema o bastante recente como para
lembrar os problemas, e como os tiña sufrido sabía como describilos. Isto
permitíalle escribir algo que necesitase só correccións menores polos
 desenvolvedores principais para as cousas que aínda non tiña comprendido ben.

O seu caso foi mesmo mellor, dado que iniciara un grupo
de xente (estudantes) ao sistema, polo que combinou a experiencia de varias
persoas, o cal é algo que só foi unha afortunada coincidencia e probablemente sexa
difícil de conseguir na maioría dos casos.
</screen>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-hosting">
<title
>Fornecendo aloxamento/largo de banda</title>

<para
>Para un proxecto que non estiver a empregar aloxamento gratuíto (ver <xref linkend="canned-hosting"/><phrase output="printed"
> en <xref linkend="technical-infrastructure"/></phrase
>), fornecer un servidor, conectividade de rede e, o máis importante, axuda coa administración de sistemas, pode ser de importancia capital. Mesmo se isto é todo o que a túa organización fai polo proxecto, pode ser un camiño moderadamente efectivo para obter bo karma nas relacións públicas, aínda que non che ofreza ningunha influencia sobre a dirección do proxecto.</para>

<para
>Probablemente debas contar cun cartaz publicitario ou un recoñecemento na páxina de inicio do proxecto, agradecéndolle á túa empresa a provisión de aloxamento. Se configurares o aloxamento de xeito que o enderezo web do proxecto fque baixo o nome de dominio da túa empresa, vas obter algunha asociación adicional a través da URL. Isto provocará que moitos usuarios pensen no software como se tivese <emphasis
>algo</emphasis
> que ver coa túa empresa, mesmo se non contribuíres nada ao desenvolvemento. O problema está en que os desenvolvedores tamén son conscientes desta tendencia asociativa, e poden non sentirse moi cómodos con ter un proxecto baixo o teu dominio a non ser que vaias contribuír con máis recursos que unicamente o largo de banda. Despois de todo, hoxe en día existen unha morea de lugares nos que ter o aloxamento. A comunidade pode eventualmente sentir que a deslocalización de identidade implícita non é compensada polo aloxamento, e por tanto decidir mover o proxecto a outro lugar. Se queres fornecer aloxamento, faino, mais ou ben pensa participar máis a curto prazo, ou ben sé cauteloso sobre canta participación reivindicas.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="marketing">
<title
>Mercadotecnia</title>

<para
>Embora a maioría dos desenvolvedores de software libre probablemente odien admitilo, a mercadotecnia funciona. Unha boa campaña de marketing <emphasis
>pode</emphasis
> crear ruxe-ruxe sobre dun produto de código aberto, mesmo ata o punto no que os desenvolvedores máis obstinados se atopen a si mesmos tendo pensamentos positivos sobre o software por razóns intanxibles. Non procede que eu aquí diseccione as dinámicas xerais da mercadotecnia. Calquera corporación involucrada no software libre poderá nunha altura determinada considerar como venderse a si mesma, o software ou a súa relación co software. O consello de abaixo versa sobre como evitar riscos neste esforzo; revisa tamén <xref linkend="publicity"/><phrase output="printed"
> en <xref linkend="communications"/></phrase
>.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="goldfish-bowl">
<title
>Recorda que estás sendo observado</title>

<para
>Polo ben de manter ao teu carón a comunidade de desenvolvedores voluntarios, é <emphasis
>moi</emphasis
> importante non dicires nada que non for certo. Revisa cada petición coidadosamente antes de facela, e dálle ao público os medios para revisar as túas peticións por si mesmos. A revisión independente dos feitos é unha parte fundamental do software libre, e envolve máis que unicamente o código fonte.</para>

<para
>Naturalmente, de tódolos xeitos ninguén lle aconsellaría ás empresas faceren reivindicacións non verificables. Mais coas actividades de código aberto, hai unha cantidade de xente inusitadamente elevada con experiencia en verificar reivindicacións; así como probablemente xente con accesos a internet de moito largo de banda e cos contactos sociais adecuados para publicitar dun xeito daniño as cousas que poderían chegar a atopar, se así o decidisen. Cando as industrias "Global Megacorp Chemical" contaminan un regato, isto é verificable unicamente por científicos adestrados, os cales poden ser refutados polos científicos de "Global Megacorp", deixando o público rascando a cabeza e preguntándose que pensar. Pola outra banda, o teu comportamento no mundo do software libre non só é visible e gravado; tamén é facilmente revisable dun xeito sinxelo e independente polo resto da xente, permitíndolle chegar ás súas propias conclusións e espallalas. Estas redes de comunicación están ben, son a esencia de como opera o software libre, e poden ser empregadas para transmitir calquera tipo de información. A refutación adoita ser difícil, cando non imposible, especialmente cando o que a xente está a dicir é certo.</para>

<para
>Por exemplo, está ben referirte á túa organización como "investidora do proxecto X" se realmente o é. Pero non te refiras a ti mesmo como "o creador de X" se a maioría do código foi escrito por xente externa. Á inversa, non reivindiques ter unha comunidade de voluntarios profundamente involucrada se calquera pode mirar no teu repositorio e ver que hai poucas ou ningunha mudanza no código provenientes de xente externa á túa organización.</para>

<para
>Non hai demasiado tempo, vin o anuncio dunha empresa moi coñecida de informática dicindo que ían liberar un importante paquete de software baixo unha licenza de software libre. Cando saíu o anuncio inicial, deille unha revisión ao seu repositorio público e vin que contiña unicamente tres revisións. Noutras palabras, tiñan feita unha importación inicial do código fonte, mais realmente non acontecera nada desde aquela. Isto en si mesmo non era tan triste, mais xusto acababan de facer o anuncio, despois de todo. Non había ningunha razón para non esperar unha morea de actividade de desenvolvemento de aí en diante.</para>

<para
>Algún tempo despois, fixeron outro anuncio. Aquí está o que dixeron, co nome e número de versión substituído por seudónimos:</para>

  <blockquote>
    <para
><emphasis
>É para nós un pracer anunciar que seguindo rigorosas testaxes pola Comunidade Singer, Singer&nbsp;5 para Linux e Windows agora mesmo está listo para o seu uso en produción.</emphasis
></para>
  </blockquote>

<para
>Curioso por saber que descubrira a comunidade na "testaxe rigorosa" volvín ao repositorio para ver a súa historia de mudanzas recentes. O proxecto aínda estaba na revisión 3. Aparentemente, non atoparan <emphasis
>ningún</emphasis
> erro ou solución antes da publicación! Pensando que os resultados da testaxe da comunidade tiñan que ter sido gravados, a continuación examinei o notificador de erros. Había exactamente seis incidencias abertas, catro das cales estiveran abertas durante varios meses.</para>

<para
>Isto resta credibilidade, por suposto. Cando os testadores revisan por algún tempo unha peza de software grande e complexa, atopan erros. Mesmo se as reparacións destes erros non se fan na seguinte publicación, si que esperas algunha actividade de control de versións como resultado do proceso de testaxe, ou polo menos algunha incidencia nova. En base ás aparencias, non pasara nada entre o anuncio da licenza de software libre e a primeira publicación con código aberto.</para>

<para
>A cuestión non é que a empresa estivera mentindo sobre a testaxe da comunidade. Non sei se o fixeron ou non. Mais omitían tantos datos a respecto da revisión como se estiveran mentindo. Dado que nin o sistema de control de versións nin o sistema de notificación de erros daban ningunha indicación de que a mencionada testaxe rigorosa tivera lugar, a empresa non debería ter feita a reivindicación en cuestión ou debería ter fornecido algunha ligazón clara a algún resultado tanxible da testaxe ("Atopamos 278 erros, preme aquí para veres os detalles"). A segunda opción permitiríalle a calquera obter rapidamente unha visión sobre o nivel de actividade da comunidade. Tal como vimos, só me levou uns poucos minutos comprobar que fose o que for esta comunidade de testaxe, non deixara ningunha traza en ningún dos lugares habituais. Non é moito traballo, e estou seguro que non son o único que se decatou do problema.</para>

<para
>A transparencia e a verificabilidade tamén son unha parte importante dun correcto recoñecemento, por suposto. Revisa <xref linkend="credit"/><phrase output="printed"
> en <xref linkend="managing-volunteers"/></phrase
> para profundizar.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="competing-products">
<title
>Non confrontes produtos de código aberto</title>

<para
>Abstente de dar opinións negativas sobre produtos competidores de código aberto É perfectamente lexítimo amosar <emphasis
>feitos</emphasis
>&mdash; negativos, isto é, asercións facilmente confirmables do tipo habitualmente visible nas boas comparativas. Mais as caracterizacións negativas dunha natureza menos rigorosa é mellor eliminalas por dúas razóns. Primeiro, son responsables de comezar guerras incendiarias que desangran as discusións produtivas. Segundo, e máis importante, varios dos desenvolvedores voluntarios do <emphasis
>teu</emphasis
> proxecto tamén poden deixar de traballar no proxecto da competencia. Isto é máis probable do que pode parecer nunha primeira volta: os proxectos xa están no mesmo dominio (isto é polo que son competencia), e os desenvolvedores con experiencia nese dominio poden facer contribucións en calquera lugar no que a súa experiencia sexa aplicable. Mesmo cando non hai solapamento directo de desenvolvedores, é probable que os desenvolvedores do teu proxecto estean polo menos familiarizados cos desenvolvedores de proxectos relacionados. A súa habilidade para manteren ligaduras persoais produtivas pode verse dificultada por demasiadas mensaxes negativas provenientes do marketing.</para>

<para
>A confrontación cos produtos de código pechado parece estar máis amplamente aceptada no mundo do software libre, especialmente cando estes produtos están feitos por Microsoft. Persoalmente, eu deploro esta tendencia (unha vez máis, non hai nada malo nas comparacións francas e que se cinguen aos feitos), non unicamente porque sexa de mala educación, senón tamén porque é perigoso para un proxecto comezar a crer a súa propia propaganda e dese modo ignorar os ámbitos nos cales a competencia pode realmente ser superior. En xeral, vixía o efecto que as declaracións de marketing poden provocar na túa propia comunidade de desenvolvemento. A xente podería excitarse tanto ao ter cobertura por parte do marketing que podería chegar a perder a obxectividade sobre os puntos fortes e fracos reais do software. É normal, e esperable, que os desenvolvedores dunha empresa exhiban un certo distanciamento a respecto das declaracións de marketing, mesmo nos foros públicos. Claramente, eles non deberían contradicir de xeito directo as mensaxes de marketing (a non ser que realmente sexan falsas, aínda que é de esperar que ese tipo de cousas fosen descubertas máis cedo). Poderían rirse disto de cando en vez, como un xeito de tornar o resto da comunidade de desenvolvemento máis realista.</para>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
